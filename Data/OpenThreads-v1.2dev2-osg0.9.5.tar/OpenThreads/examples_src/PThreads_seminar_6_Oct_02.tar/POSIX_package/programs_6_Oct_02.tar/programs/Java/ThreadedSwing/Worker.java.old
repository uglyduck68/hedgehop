//             ThreadedSwing/Worker.java

import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import com.sun.java.swing.*;
import Extensions.*;



public class Worker implements Runnable {
  boolean               doWork; // Hack to avoid having 2 Worker classes
  ThreadedJButton       button;

  
public Worker(boolean dw, ThreadedJButton b) {
  doWork = dw;
  button = b;
}



public void run() {
  if (doWork)
    doWork();
  else
    workComplete();
}



public void workComplete() {    // Run only in Swing main thread.
  Thread selfName = Thread.currentThread();

  button.setEnabled(true);
  System.out.println(button + " reenabled. " + selfName);
}



public void doWork() {          // Run in any thread.
  Thread selfName = Thread.currentThread();

  System.out.println(button + " sleeping... " + selfName);
  InterruptibleThread.sleep(6000);
  System.out.println(button + " done. " + selfName);

  // This will run workComplete() in Swing main thread.
  // This is the main point of the whole example.
  SwingUtilities.invokeLater(new Worker(false, button));
}
 
}
