JAVA PROFILE 1.0.1, created Mon Mar 19 14:55:32 2001

Header for -Xhprof ASCII Output

Copyright 1998 Sun Microsystems, Inc. 901 San Antonio Road, Palo Alto,
California, 94303, U.S.A.  All Rights Reserved.

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME	is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
		the time spent by a thread waiting to enter a monitor.
		Entries in this record are TRACEs ranked by the percentage
		of total monitor contention time and a brief description
		of the monitor.  The "count" field indicates the number of 
		times the monitor was contended at that TRACE.

MONITOR DUMP	is a complete snapshot of all the monitors and threads in 
		the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=1e2570, id = 1, name="Signal dispatcher", group="system")
THREAD START (obj=1e2610, id = 2, name="Reference Handler", group="system")
THREAD START (obj=1e2990, id = 3, name="Finalizer", group="system")
THREAD START (obj=2acc28, id = 4, name="main", group="main")
THREAD END (id = 4)
THREAD START (obj=2acc48, id = 5, name="Thread-0", group="main")
THREAD START (obj=3399f0, id = 6, name="MT1", group="main")
THREAD START (obj=350770, id = 7, name="MT2", group="main")
TRACE 1:
	<empty>
TRACE 4:
	java/lang/Compiler.initialize(Compiler.java:Native method)
	java/lang/Compiler.<clinit>(Compiler.java:59)
TRACE 10:
	TestA.foo2(Test.java:Compiled method)
	Test2.run(Test.java:Compiled method)
	java/lang/Thread.run(Thread.java:Compiled method)
TRACE 3:
	java/lang/System.initProperties(System.java:Native method)
	java/lang/System.initializeSystemClass(System.java:783)
TRACE 7:
	Test.main(Test.java:Compiled method)
TRACE 8:
	java/security/AccessController.getStackAccessControlContext(AccessController.java:Native method)
	java/security/AccessController.getContext(AccessController.java:Compiled method)
	java/lang/Thread.init(Thread.java:Compiled method)
	java/lang/Thread.<init>(Thread.java:Compiled method)
TRACE 9:
	TestA.foo1(Test.java:Compiled method)
	Test1.run(Test.java:Compiled method)
	java/lang/Thread.run(Thread.java:Compiled method)
TRACE 11:
	java/lang/Object.wait(Object.java:Native method)
	java/lang/ref/ReferenceQueue.remove(ReferenceQueue.java:112)
	java/lang/ref/ReferenceQueue.remove(ReferenceQueue.java:127)
	java/lang/ref/Finalizer$FinalizerThread.run(Finalizer.java:174)
TRACE 2:
	java/security/AccessController.getStackAccessControlContext(AccessController.java:Native method)
	java/security/AccessController.getContext(AccessController.java:358)
	java/lang/Thread.init(Thread.java:270)
TRACE 12:
	java/lang/Object.wait(Object.java:Native method)
	java/lang/Object.wait(Object.java:424)
	java/lang/ref/Reference$ReferenceHandler.run(Reference.java:114)
 TRACE 5:
	Test.<clinit>(Test.java:Unknown line)
TRACE 6:
	Test.<clinit>(Test.java:13)
MONITOR DUMP BEGIN
    THREAD 7, trace 10, status: MW
    THREAD 6, trace 9, status: MW
    THREAD 3, trace 11, status: CW
    THREAD 2, trace 12, status: CW
    THREAD 1, trace 1, status: R
    THREAD 5, trace 1, status: CW
    MONITOR TestA(3507b0)
	owner: thread 7, entry count: 1
	waiting to enter: thread 6
    MONITOR TestB(3507d0)
	owner: thread 6, entry count: 1
	waiting to enter: thread 7
    MONITOR java/lang/ref/ReferenceQueue$Lock(1e29d0) unowned
	waiting to be notified: thread 3
    MONITOR java/lang/ref/Reference$Lock(1e2670) unowned
	waiting to be notified: thread 2
    RAW MONITOR "_hprof_dump_lock"(0x25140)
	owner: thread 1, entry count: 1
    RAW MONITOR "Monitor cache lock"(0x250f0)
	owner: thread 1, entry count: 1
    RAW MONITOR "Alarm monitor"(0x25050) unowned
	waiting to be notified: <unknown thread>
    RAW MONITOR "Thread queue lock"(0x24da8)
	owner: thread 1, entry count: 1
	waiting to be notified: thread 5
    RAW MONITOR "Monitor registry"(0x24d80)
	owner: thread 1, entry count: 1
MONITOR DUMP END
MONITOR TIME BEGIN (total = 0 ms) Mon Mar 19 14:55:44 2001
MONITOR TIME END
