%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Palatino-Roman FMFONTDEFINE
2 0 /Palatino-BoldItalic FMFONTDEFINE
3 1 /ZapfDingbats FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 522 216 576 R
3 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
0 281 527 390 561 136 45 17 27 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.9.3
%%For: (Conehead Woman) (Conehead Co.)
%%Title: (SunSoft.eps)
%%CreationDate: (7/16/92) (12:16 PM)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica-Narrow
%%BoundingBox:281 527 390 561
%%TemplateBox:306 396 306 396
%%TileBox:-522 761 30 1491
%%DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%BeginEncoding: _Helvetica-Narrow Helvetica-Narrow
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
]/_Helvetica-Narrow/Helvetica-Narrow 0 Z
%%EndEncoding
%%EndSetup
0 A
u
0 O
0 0 0 1 k
0 i 0 J 0 j 1 w 3.863 M []0 d
%%Note:
312.717 551.687 m
312.637 547.556 317.28 545.612 317.199 541.994 c
317.199 540.995 316.443 538.403 313.798 538.457 c
312.474 538.484 311.205 539.375 311.233 541.67 C
311.233 543.29 L
311.205 543.425 311.205 543.587 311.097 543.722 c
311.016 543.803 310.854 543.857 310.72 543.803 c
310.477 543.668 310.423 543.398 310.314 543.182 c
310.179 542.48 310.018 541.751 309.882 541.049 c
309.855 540.995 309.936 540.995 309.882 540.995 c
309.774 540.482 309.693 539.942 309.667 539.429 c
309.639 539.105 309.855 538.835 310.125 538.673 c
311.125 538.134 312.393 537.755 313.798 537.729 c
317.227 537.675 320.034 540.671 320.088 543.587 c
320.115 545.936 318.792 547.286 317.334 549.041 c
316.605 549.959 315.147 551.228 315.201 552.902 c
315.201 554.252 316.308 555.764 318.334 555.737 c
321.06 555.683 320.628 552.794 320.682 551.471 c
320.682 551.336 320.682 551.201 320.79 551.147 c
320.899 551.039 321.06 551.012 321.195 551.066 c
321.276 551.147 321.33 551.201 321.358 551.282 C
322.032 553.82 L
322.14 554.279 322.357 554.738 322.357 555.278 c
322.357 555.413 322.248 555.548 322.114 555.656 c
320.682 556.412 319.818 556.52 318.495 556.547 c
315.147 556.601 312.744 554.225 312.717 551.687 c
f
U
u
320.804 546.665 m
320.804 546.557 320.885 546.422 321.047 546.422 c
321.398 546.422 321.614 547.097 322.451 548.258 c
322.937 549.014 323.558 549.554 323.909 549.554 c
324.125 549.554 324.152 549.392 324.152 549.23 c
324.152 548.393 321.074 541.94 321.074 539.402 c
321.074 538.592 321.398 537.837 322.397 537.837 c
324.8 537.837 327.365 540.86 329.201 543.56 c
329.255 543.614 329.309 543.641 329.282 543.479 c
328.931 542.399 328.364 540.293 328.364 538.997 c
328.364 538.457 328.472 537.783 329.336 537.783 c
331.145 537.783 333.791 541.346 333.791 542.156 c
333.791 542.318 333.71 542.48 333.548 542.48 c
333.305 542.48 333.224 542.183 332.954 541.805 c
332.36 540.995 331.523 539.726 330.929 539.726 c
330.74 539.726 330.74 539.942 330.74 540.077 c
330.74 541.481 334.034 550.472 334.034 550.742 c
334.034 550.931 334.007 551.066 333.683 551.066 c
333.467 551.066 333.143 551.12 332.63 551.12 c
331.739 551.12 331.685 550.985 331.604 550.823 c
331.172 549.959 330.524 547.313 329.228 544.964 c
327.473 541.913 325.097 539.51 324.125 539.51 c
323.747 539.51 323.531 539.753 323.531 540.158 c
323.531 541.535 326.825 548.528 326.825 550.229 c
326.825 550.634 326.582 551.417 325.61 551.417 c
322.991 551.417 320.804 547.178 320.804 546.665 c
f
U
u
345.266 551.39 m
342.593 551.39 339.839 547.232 338.895 545.801 c
338.813 545.693 338.787 545.747 338.813 545.828 c
339.272 547.556 339.839 549.068 339.839 550.148 c
339.839 550.823 339.515 551.471 338.624 551.471 c
336.761 551.471 334.116 547.853 334.116 546.962 c
334.116 546.773 334.169 546.638 334.305 546.638 c
334.601 546.638 334.872 547.259 335.357 547.907 c
335.979 548.69 336.735 549.662 337.193 549.662 c
337.274 549.662 337.383 549.608 337.383 549.365 c
337.383 548.177 335.033 541.778 334.088 538.565 c
334.008 538.241 334.196 538.16 335.223 538.16 c
335.925 538.16 336.248 538.052 336.41 538.592 c
337.004 540.725 338.165 543.128 339.354 545.207 c
340.487 547.151 342.836 549.986 344.159 549.986 c
344.484 549.986 344.672 549.77 344.672 549.338 c
344.672 547.934 341.189 541.454 341.297 538.997 c
341.324 538.322 341.568 537.783 342.458 537.783 c
344.267 537.783 345.887 539.861 346.752 541.4 c
346.86 541.643 346.967 541.643 346.967 541.994 c
346.967 542.264 346.806 542.399 346.616 542.399 c
346.535 542.399 346.455 542.318 346.401 542.237 c
345.806 541.238 344.835 539.726 344.159 539.726 c
343.997 539.726 343.943 539.888 343.943 540.023 c
343.943 540.995 346.967 547.313 346.967 549.473 c
346.967 550.904 346.184 551.39 345.266 551.39 c
f
U
u
350.946 551.687 m
350.865 547.556 355.509 545.612 355.428 541.994 c
355.428 540.995 354.672 538.403 352.026 538.457 c
350.703 538.484 349.434 539.375 349.461 541.67 C
349.461 543.29 L
349.434 543.425 349.434 543.587 349.326 543.722 c
349.245 543.803 349.083 543.857 348.948 543.803 c
348.705 543.668 348.651 543.398 348.543 543.182 c
348.408 542.48 348.246 541.751 348.111 541.049 c
348.084 540.995 348.165 540.995 348.111 540.995 c
348.003 540.482 347.922 539.942 347.895 539.429 c
347.868 539.105 348.084 538.835 348.354 538.673 c
349.353 538.134 350.622 537.755 352.026 537.729 c
355.455 537.675 358.263 540.671 358.317 543.587 c
358.344 545.936 357.021 547.286 355.563 549.041 c
354.834 549.959 353.376 551.228 353.43 552.902 c
353.43 554.252 354.537 555.764 356.562 555.737 c
359.289 555.683 358.857 552.794 358.911 551.471 c
358.911 551.336 358.911 551.201 359.019 551.147 c
359.127 551.039 359.289 551.012 359.424 551.066 c
359.505 551.147 359.559 551.201 359.586 551.282 C
360.261 553.82 L
360.369 554.279 360.585 554.738 360.585 555.278 c
360.585 555.413 360.477 555.548 360.342 555.656 c
358.911 556.412 358.047 556.52 356.724 556.547 c
353.376 556.601 350.973 554.225 350.946 551.687 c
f
U
359.754 542.723 m
359.781 540.806 360.672 537.675 363.885 537.729 c
367.719 537.783 371.256 542.291 371.175 546.638 c
371.094 550.931 368.044 551.66 366.801 551.633 c
364.128 551.579 359.646 548.555 359.754 542.723 c
f
1 g
368.826 548.447 m
368.853 545.666 367.071 538.565 363.858 538.511 c
362.346 538.484 362.022 539.78 361.995 540.941 c
361.941 544.208 364.02 550.796 366.909 550.85 c
368.097 550.877 368.8 550.013 368.826 548.447 c
f
u
0 0 0 1 k
381.346 557.573 m
378.916 557.573 376.162 554.954 375.028 551.255 c
375.001 551.201 374.973 551.093 374.893 551.093 c
374.434 551.093 373.705 551.093 372.949 551.093 c
372.787 551.093 372.598 550.688 372.598 550.31 c
372.598 550.202 372.733 550.094 372.922 550.094 c
373.57 550.094 374.002 550.094 374.542 550.094 c
374.568 550.094 374.596 550.013 374.596 549.959 c
374.596 549.716 372.841 543.749 372.517 542.777 c
371.086 538.457 370.33 533.085 368.737 533.085 c
368.656 533.085 368.332 533.139 368.332 533.814 c
368.332 534.111 368.386 534.408 368.386 534.759 c
368.386 535.596 367.792 535.947 367.171 535.947 c
366.253 535.947 365.848 534.974 365.848 534.354 c
365.848 532.842 366.928 532.221 367.954 532.221 c
369.709 532.221 371.788 533.679 372.922 536.189 c
374.677 539.996 375.675 544.802 377.134 549.959 c
377.161 550.013 377.215 550.094 377.323 550.094 c
378.268 550.094 382.571 550.094 383.516 550.094 C
383.732 551.093 L
383.273 551.093 378.457 551.093 377.674 551.093 c
377.62 551.093 377.538 551.093 377.566 551.228 c
378.025 553.334 378.943 556.331 380.077 556.331 c
381.076 556.331 379.996 553.82 381.723 553.82 c
382.75 553.82 383.29 554.954 383.29 555.791 c
383.29 557.465 381.643 557.573 381.346 557.573 c
f
U
u
384.765 554.981 m
384.603 554.954 384.522 554.792 384.522 554.765 c
384.225 553.793 383.523 551.741 383.307 551.174 c
383.253 551.093 383.226 551.093 383.118 551.093 c
383.037 551.066 382.281 551.039 381.714 551.039 c
381.336 551.039 381.093 550.715 381.093 550.256 c
381.093 550.175 381.255 550.094 381.39 550.094 c
381.849 550.094 382.659 550.094 382.713 550.094 c
382.767 550.094 382.902 550.094 382.902 549.959 c
382.902 549.473 379.932 541.4 379.932 539.375 c
379.932 538.754 380.148 537.864 381.147 537.864 c
383.253 537.864 385.98 542.021 385.98 542.858 c
385.98 543.155 385.818 543.209 385.683 543.209 c
385.44 543.209 385.305 542.804 385.035 542.372 c
384.468 541.4 383.469 539.834 382.767 539.834 c
382.605 539.834 382.525 539.942 382.525 540.104 c
382.525 541.265 384.279 546.287 385.44 550.04 C
385.44 550.067 385.494 550.094 385.575 550.094 c
385.872 550.094 386.682 550.121 387.303 550.121 c
387.519 550.121 387.708 550.148 387.843 550.31 c
388.005 550.472 388.086 550.688 388.086 550.796 c
388.086 550.85 388.059 550.985 387.924 551.066 c
387.735 551.093 386.736 551.093 385.845 551.093 c
385.791 551.093 385.764 551.147 385.764 551.228 c
385.764 551.336 386.79 554.414 386.79 554.846 c
386.79 554.954 386.736 554.981 386.682 554.981 c
386.574 555.008 386.277 555.035 386.196 555.035 c
385.872 555.035 385.116 555.008 384.765 554.981 c
f
U
u
0 g
0.771 w 4 M
295.144 537.672 m
295.227 537.59 295.108 537.339 295.027 537.257 c
294.944 537.174 294.693 537.057 294.612 537.139 C
294.604 537.148 L
289.867 541.885 L
288.686 540.704 L
293.423 535.967 L
293.434 535.96 L
294.233 535.161 295.527 535.161 296.326 535.96 c
297.125 536.759 297.125 538.054 296.326 538.853 C
296.317 538.861 L
291.58 543.598 L
290.398 542.416 L
295.135 537.679 L
295.144 537.672 L
f
U
295.142 544.287 m
295.06 544.37 294.809 544.253 294.727 544.17 c
294.645 544.088 294.527 543.837 294.609 543.755 C
294.619 543.748 L
299.356 539.011 L
298.173 537.829 L
293.436 542.566 L
293.43 542.578 L
292.632 543.377 292.632 544.672 293.43 545.47 c
294.229 546.269 295.524 546.269 296.322 545.47 C
296.331 545.46 L
301.068 540.723 L
299.886 539.542 L
295.149 544.279 L
295.142 544.287 L
f
291.274 547.549 m
291.357 547.631 291.608 547.513 291.689 547.432 c
291.772 547.349 291.889 547.098 291.807 547.016 C
291.798 547.009 L
287.061 542.272 L
288.243 541.09 L
292.98 545.827 L
292.987 545.839 L
293.785 546.638 293.785 547.932 292.987 548.731 c
292.188 549.53 290.892 549.53 290.094 548.731 C
290.085 548.722 L
285.348 543.985 L
286.53 542.803 L
291.267 547.54 L
291.274 547.549 L
f
u
284.659 547.547 m
284.577 547.465 284.694 547.214 284.776 547.131 c
284.858 547.05 285.109 546.932 285.192 547.014 C
285.199 547.023 L
289.936 551.76 L
291.118 550.578 L
286.381 545.841 L
286.369 545.835 L
285.57 545.036 284.275 545.036 283.476 545.835 c
282.678 546.634 282.678 547.929 283.476 548.727 C
283.486 548.736 L
288.223 553.473 L
289.405 552.291 L
284.668 547.554 L
284.659 547.547 L
f
U
u
294.57 556.926 m
294.488 557.009 294.605 557.26 294.687 557.342 c
294.77 557.424 295.021 557.541 295.103 557.46 C
295.11 557.45 L
299.847 552.713 L
301.029 553.895 L
296.291 558.632 L
296.28 558.638 L
295.481 559.437 294.186 559.437 293.388 558.638 c
292.589 557.84 292.589 556.545 293.388 555.746 C
293.397 555.737 L
298.135 551 L
299.316 552.183 L
294.579 556.92 L
294.57 556.926 L
f
U
294.572 550.311 m
294.655 550.229 294.905 550.346 294.987 550.429 c
295.07 550.51 295.187 550.761 295.105 550.844 C
295.096 550.851 L
290.358 555.588 L
291.541 556.77 L
296.278 552.033 L
296.284 552.02 L
297.082 551.222 297.082 549.927 296.284 549.128 c
295.485 548.33 294.19 548.33 293.392 549.128 C
293.383 549.138 L
288.646 553.875 L
289.828 555.057 L
294.565 550.32 L
294.572 550.311 L
f
298.393 547.02 m
298.311 546.938 298.06 547.055 297.977 547.138 c
297.895 547.22 297.778 547.471 297.86 547.553 C
297.869 547.56 L
302.606 552.297 L
301.424 553.479 L
296.687 548.742 L
296.681 548.73 L
295.882 547.932 295.882 546.637 296.681 545.838 c
297.48 545.04 298.774 545.04 299.573 545.838 C
299.582 545.847 L
304.319 550.584 L
303.137 551.767 L
298.399 547.03 L
298.393 547.02 L
f
u
305.008 547.023 m
305.09 547.104 304.973 547.355 304.89 547.438 c
304.809 547.52 304.558 547.638 304.475 547.555 C
304.468 547.546 L
299.731 542.809 L
298.549 543.991 L
303.287 548.728 L
303.299 548.734 L
304.097 549.533 305.392 549.533 306.191 548.734 c
306.989 547.935 306.989 546.641 306.191 545.842 C
306.181 545.834 L
301.444 541.097 L
300.262 542.278 L
304.999 547.015 L
305.008 547.023 L
f
U
1 w
/_Helvetica-Narrow 4.85 12 -0.25 0 z
[1 0 0 1 310.5 531]e
33 (A Sun Microsystems, Inc. Business)t
T
%%Trailer
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
0 24 Q
(CASE) 88.16 550 T
(STUDY) 80.83 530 T
1 9 Q
0.47 0.09 (Over 10,000 of the most widely used engineering and scienti\336c applications can) 234 579 B
0.35 0.09 (now take full advantage of the speed of multiple pr) 234 568 B
0.35 0.09 (ocessor SP) 446 568 B
0.35 0.09 (ARC\250 computers by) 488.16 568 B
0.47 0.09 (simply r) 234 557 B
0.47 0.09 (elinking their existing applications. Dakota Scienti\336c Softwar) 268.24 557 B
0.47 0.09 (e \050DSS\051 is) 519.12 557 B
0.47 0.09 (making computers much faster and easier to use for engineering and scienti\336c) 234 546 B
0.47 0.09 (users with the r) 234 535 B
0.47 0.09 (elease of DSSLIB, an optimized implementation of the standar) 298.69 535 B
0.47 0.09 (d) 554.61 535 B
0.47 0.09 (BLAS, LAP) 234 524 B
0.47 0.09 (ACK, and LINP) 279.61 524 B
0.47 0.09 (ACK libraries that use Solaris\252 thr) 344.24 524 B
0.47 0.09 (eads. Ther) 489.75 524 B
0.47 0.09 (e ar) 532.2 524 B
0.47 0.09 (e) 547.48 524 B
0.47 0.09 (literally tens of thousands of pr) 234 513 B
0.47 0.09 (ograms built with these libraries including such) 363.64 513 B
0.47 0.09 (well-known favorites as IMSL/Math fr) 234 502 B
0.47 0.09 (om V) 393.91 502 B
0.47 0.09 (isual Numerics, LAP) 415.85 502 B
0.47 0.09 (ACK.h++ fr) 500.49 502 B
0.47 0.09 (om) 548.81 502 B
0.47 0.09 (Rogue W) 234 491 B
0.47 0.09 (ave, and NASA) 271.19 491 B
0.47 0.09 (\325s NASTRAN. All of them can start r) 334.72 491 B
0.47 0.09 (unning 2-20 times) 486.21 491 B
0.47 0.09 (faster within 10 minutes simply by r) 234 480 B
0.47 0.09 (elinking with DSSLIB. Even users of single) 383.89 480 B
0.47 0.09 (pr) 234 469 B
0.47 0.09 (ocessor machines can often enjoy speedups of 40% or mor) 242.98 469 B
0.47 0.09 (e with DSSLIB.) 482.27 469 B
0.47 0.09 (Dakota Scienti\336c Softwar) 234 451 B
0.47 0.09 (e was founded in 1990 when several employees fr) 337.27 451 B
0.47 0.09 (om a) 542.63 451 B
0.47 0.09 (Minneapolis super) 234 440 B
0.47 0.09 (computer company decided that they had a better way) 310.4 440 B
0.47 0.09 (. They) 535.83 440 B
0.47 0.09 (r) 234 429 B
0.47 0.09 (ealized that many of the techniques that they wer) 237.48 429 B
0.47 0.09 (e using on their company\325s $35) 441.92 429 B
0.47 0.09 (million super) 234 418 B
0.47 0.09 (computers could also be used to signi\336cantly incr) 288.82 418 B
0.47 0.09 (ease the power of) 493.33 418 B
0.47 0.09 (mor) 234 407 B
0.47 0.09 (e cost-ef) 250.52 407 B
0.47 0.09 (fective RISC platforms. \322Our customers ar) 284.17 407 B
0.47 0.09 (e some of the most) 457.95 407 B
0.47 0.09 (demanding engineering and scienti\336c customers in the world with lar) 234 396 B
0.47 0.09 (ge-scale) 521.96 396 B
0.47 0.09 (computing needs that r) 234 385 B
0.47 0.09 (equir) 329.8 385 B
0.47 0.09 (e the best possible performance fr) 351.03 385 B
0.47 0.09 (om their Sun) 490.12 385 B
0.47 0.09 (computers,\323 says Diane Boucher) 234 374 B
0.47 0.09 (, DSS Pr) 366.95 374 B
0.47 0.09 (esident.) 400.61 374 B
0.47 0.09 (Performance is a constant pr) 234 356 B
0.47 0.09 (oblem with engineering and scienti\336c applications.) 351.46 356 B
0.11 0.09 (Applications for str) 234 345 B
0.11 0.09 (uctural analysis, CFD, VLSI design, and r) 313.3 345 B
0.11 0.09 (eservoir modelling ar) 481.7 345 B
0.11 0.09 (e) 569.15 345 B
0.47 0.09 (among the most computationally demanding pr) 234 334 B
0.47 0.09 (ograms that exist anywher) 431.39 334 B
0.47 0.09 (e.) 540.64 334 B
0.47 0.09 (Historically these lar) 234 323 B
0.47 0.09 (ge applications ran only on specialized super) 319.22 323 B
0.47 0.09 (computers, but) 505.24 323 B
0.47 0.09 (people today ar) 234 312 B
0.47 0.09 (e \336nding that powerful RISC machines can handle the job. \322Our) 298.5 312 B
0.47 0.09 (customers use computing envir) 234 301 B
0.47 0.09 (onments that span the spectr) 363.17 301 B
0.47 0.09 (um fr) 481.96 301 B
0.47 0.09 (om a single-) 504.89 301 B
0.47 0.09 (pr) 234 290 B
0.47 0.09 (ocessor IPX\252 to a lar) 242.98 290 B
0.47 0.09 (ge SP) 331.21 290 B
0.47 0.09 (ARCserver\252 1000 machine, but they all need the) 353.02 290 B
0.13 0.09 (maximum speed possible in or) 234 279 B
0.13 0.09 (der to r) 359.08 279 B
0.13 0.09 (un their applications. W) 389.26 279 B
0.13 0.09 (e need to deliver that) 486.89 279 B
0.47 0.09 (speed acr) 234 268 B
0.47 0.09 (oss the total Sun pr) 272.76 268 B
0.47 0.09 (oduct line in or) 352.55 268 B
0.47 0.09 (der to satisfy our customer base.\323) 415.87 268 B
0 12 Q
0.69 0.12 (Solid T) 234 227 B
0.69 0.12 (ools Support) 274.65 227 B
1 9 Q
0.47 0.09 (For DSS, SunSoft was the natural choice to supply the integrated suite of tools) 234 208 B
0.47 0.09 (r) 234 197 B
0.47 0.09 (equir) 237.48 197 B
0.47 0.09 (ed to manage the ongoing development of a lar) 258.72 197 B
0.47 0.09 (ge softwar) 454.59 197 B
0.47 0.09 (e pr) 497.58 197 B
0.47 0.09 (oject. \322W) 513.77 197 B
0.47 0.09 (e) 550.48 197 B
0.46 0.09 (started by using the performance measur) 234 186 B
0.46 0.09 (ement tool to see wher) 403.3 186 B
0.46 0.09 (e we should apply) 496.96 186 B
0.47 0.09 (additional optimization by hand. After optimization, we decided to experiment) 234 175 B
0.47 0.09 (with the automatic parallelization. Once we saw how well SunSoft\325s compiler) 234 164 B
0.47 0.09 (automatically parallelized our optimized code, I knew that we had found our) 234 153 B
0.47 0.09 (compiler vendor) 234 142 B
0.47 0.09 (,\323 declar) 301.37 142 B
0.47 0.09 (es Gail Schmidt, one of the technical team leaders. The) 335.97 142 B
0.47 0.09 (level of integration and inter) 234 131 B
0.47 0.09 (operability among the SunSoft tools has also been an) 352.02 131 B
0.47 0.09 (important asset. \322Our pr) 234 120 B
0.47 0.09 (oduct comprises ar) 335.35 120 B
0.47 0.09 (ound one million lines of code written) 413.45 120 B
0.38 0.09 (in a mixtur) 234 109 B
0.38 0.09 (e of FOR) 279.57 109 B
0.38 0.09 (TRAN, C, and assembly) 315.53 109 B
0.38 0.09 (. W) 413.44 109 B
0.38 0.09 (e cannot use a debugger that works) 426.76 109 B
0.47 0.09 (well only with our C code, nor ar) 234 98 B
0.47 0.09 (e we willing to learn a dif) 371.97 98 B
0.47 0.09 (fer) 478.58 98 B
0.47 0.09 (ent sour) 489.55 98 B
0.47 0.09 (ce br) 523.02 98 B
0.47 0.09 (owser) 542.87 98 B
-0.06 0.09 (for each language.\323 \050The SunSoft debugger automatically adjusts itself to the sour) 234 87 B
-0.06 0.09 (ce) 565.23 87 B
0.09 (language.\051) 234 76 S
2 30 Q
(DSS makes Floating) 234 691 T
(Point Libraries Fly) 234 661 T
(with Solaris Thr) 234 631 T
(eads) 453.48 631 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
(2550 Gar) 72 48 T
(cia A) 107.01 48 T
(venue, Mountain V) 126.55 48 T
(iew) 203.06 48 T
(, CA 94043-1) 216.67 48 T
(100 USA) 266.3 48 T
3 6 Q
(l) 303.03 48 T
1 9 Q
(\050415\051 960-3200) 310.28 48 T
3 6 Q
(l) 368.77 48 T
1 9 Q
(Fax \050415\051 961-6070) 376.02 48 T
1 7 Q
(Printed in USA 9/94 94338-001) 468 48 T
0 281 527 390 561 135 45 72 63 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Adobe Illustrator 88(TM) 1.9.3
%%For: (Conehead Woman) (Conehead Co.)
%%Title: (SunSoft.eps)
%%CreationDate: (7/16/92) (12:16 PM)
%%DocumentProcSets: Adobe_packedarray 0 0
%%DocumentSuppliedProcSets: Adobe_packedarray 0 0
%%DocumentProcSets: Adobe_cmykcolor 0 0
%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0
%%DocumentProcSets: Adobe_cshow 0 0
%%DocumentSuppliedProcSets: Adobe_cshow 0 0
%%DocumentProcSets: Adobe_customcolor 0 0
%%DocumentSuppliedProcSets: Adobe_customcolor 0 0
%%DocumentProcSets: Adobe_Illustrator881 0 0
%%DocumentSuppliedProcSets: Adobe_Illustrator881 0 0
%%ColorUsage: Black&White
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica-Narrow
%%BoundingBox:281 527 390 561
%%TemplateBox:306 396 306 396
%%TileBox:-522 761 30 1491
%%DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProcSet: Adobe_packedarray 0 0
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndProcSet
Adobe_packedarray /initialize get exec

%%BeginProcSet: Adobe_cmykcolor 0 0
% cmykcolor Operators
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0
% cshow Operator
% Version 1.1 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0
% Adobe Illustrator (TM) Prolog
% Version 1.19 1/23/1989
% Copyright (C) 1987, 1988, 1989
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss					% ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
% path operators
/sp					% ax ay length string sp -
{
exch pop
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
% path construction operators
/pl					% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c				% x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v				% x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y				% x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l				% x y l -
{
lineto
} def
/L
/l load def
/m				% x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf					% - cf flatness
currentflat def
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
newpath
} def
/n					% - n -
/N load def
/F					% - F -
{
_pf
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_ps
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
gsave F grestore
S
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
clip
} def
% text painting operators
/ta					% length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl					% - tl -
{
_tl aload pop translate
} def
/as					% - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z					% literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
	{
	0 _tt astore pop
	0 exch neg _tl astore pop
	}
	{
	0 exch neg _tt astore pop
	neg 0 _tl astore pop
	} ifelse
exch findfont exch scalefont setfont
} def
/tm					% matrix tm -
{
_tm currentmatrix pop
concat
} def
/I					% matrix I -
{
tm
/t
	{
	ta sp
	tl
	} ddef
} def
/o					% matrix o -
{
tm
/t
	{
	ta 4 npop
	tl
	newpath
	} ddef
} def
/e					% matrix e -
{
tm
/t
	{
	ta _psf
	tl
	newpath
	} ddef
} def
/r					% matrix r -
{
tm
/t
	{
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/a					% matrix a -
{
tm
/t
	{
	2 copy
	ta _psf
	newpath
	ta _tm _pss
	tl
	newpath
	} ddef
} def
/T					% - T -
{
_tm setmatrix
} def
% font operators
/Z					% array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
	{
	1 index /FID ne
		{
		def
		}
		{
		2 npop
		} ifelse
	} forall
/FontName exch def dup length 0 ne
	{
	/Encoding Encoding 256 array copy def
	0 exch
		{
		dup type /nametype eq
			{
			Encoding 2 index 2 index put pop
			1 add
			}
			{
			exch pop
			} ifelse
		} forall
	} if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
gsave
} def
/Q					% - Q -
{
grestore
} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndProcSet

%%EndProlog
%%BeginSetup

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
%%BeginEncoding: _Helvetica-Narrow Helvetica-Narrow
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
]/_Helvetica-Narrow/Helvetica-Narrow 0 Z
%%EndEncoding
%%EndSetup
0 A
u
0 O
0 0 0 1 k
0 i 0 J 0 j 1 w 3.863 M []0 d
%%Note:
312.717 551.687 m
312.637 547.556 317.28 545.612 317.199 541.994 c
317.199 540.995 316.443 538.403 313.798 538.457 c
312.474 538.484 311.205 539.375 311.233 541.67 C
311.233 543.29 L
311.205 543.425 311.205 543.587 311.097 543.722 c
311.016 543.803 310.854 543.857 310.72 543.803 c
310.477 543.668 310.423 543.398 310.314 543.182 c
310.179 542.48 310.018 541.751 309.882 541.049 c
309.855 540.995 309.936 540.995 309.882 540.995 c
309.774 540.482 309.693 539.942 309.667 539.429 c
309.639 539.105 309.855 538.835 310.125 538.673 c
311.125 538.134 312.393 537.755 313.798 537.729 c
317.227 537.675 320.034 540.671 320.088 543.587 c
320.115 545.936 318.792 547.286 317.334 549.041 c
316.605 549.959 315.147 551.228 315.201 552.902 c
315.201 554.252 316.308 555.764 318.334 555.737 c
321.06 555.683 320.628 552.794 320.682 551.471 c
320.682 551.336 320.682 551.201 320.79 551.147 c
320.899 551.039 321.06 551.012 321.195 551.066 c
321.276 551.147 321.33 551.201 321.358 551.282 C
322.032 553.82 L
322.14 554.279 322.357 554.738 322.357 555.278 c
322.357 555.413 322.248 555.548 322.114 555.656 c
320.682 556.412 319.818 556.52 318.495 556.547 c
315.147 556.601 312.744 554.225 312.717 551.687 c
f
U
u
320.804 546.665 m
320.804 546.557 320.885 546.422 321.047 546.422 c
321.398 546.422 321.614 547.097 322.451 548.258 c
322.937 549.014 323.558 549.554 323.909 549.554 c
324.125 549.554 324.152 549.392 324.152 549.23 c
324.152 548.393 321.074 541.94 321.074 539.402 c
321.074 538.592 321.398 537.837 322.397 537.837 c
324.8 537.837 327.365 540.86 329.201 543.56 c
329.255 543.614 329.309 543.641 329.282 543.479 c
328.931 542.399 328.364 540.293 328.364 538.997 c
328.364 538.457 328.472 537.783 329.336 537.783 c
331.145 537.783 333.791 541.346 333.791 542.156 c
333.791 542.318 333.71 542.48 333.548 542.48 c
333.305 542.48 333.224 542.183 332.954 541.805 c
332.36 540.995 331.523 539.726 330.929 539.726 c
330.74 539.726 330.74 539.942 330.74 540.077 c
330.74 541.481 334.034 550.472 334.034 550.742 c
334.034 550.931 334.007 551.066 333.683 551.066 c
333.467 551.066 333.143 551.12 332.63 551.12 c
331.739 551.12 331.685 550.985 331.604 550.823 c
331.172 549.959 330.524 547.313 329.228 544.964 c
327.473 541.913 325.097 539.51 324.125 539.51 c
323.747 539.51 323.531 539.753 323.531 540.158 c
323.531 541.535 326.825 548.528 326.825 550.229 c
326.825 550.634 326.582 551.417 325.61 551.417 c
322.991 551.417 320.804 547.178 320.804 546.665 c
f
U
u
345.266 551.39 m
342.593 551.39 339.839 547.232 338.895 545.801 c
338.813 545.693 338.787 545.747 338.813 545.828 c
339.272 547.556 339.839 549.068 339.839 550.148 c
339.839 550.823 339.515 551.471 338.624 551.471 c
336.761 551.471 334.116 547.853 334.116 546.962 c
334.116 546.773 334.169 546.638 334.305 546.638 c
334.601 546.638 334.872 547.259 335.357 547.907 c
335.979 548.69 336.735 549.662 337.193 549.662 c
337.274 549.662 337.383 549.608 337.383 549.365 c
337.383 548.177 335.033 541.778 334.088 538.565 c
334.008 538.241 334.196 538.16 335.223 538.16 c
335.925 538.16 336.248 538.052 336.41 538.592 c
337.004 540.725 338.165 543.128 339.354 545.207 c
340.487 547.151 342.836 549.986 344.159 549.986 c
344.484 549.986 344.672 549.77 344.672 549.338 c
344.672 547.934 341.189 541.454 341.297 538.997 c
341.324 538.322 341.568 537.783 342.458 537.783 c
344.267 537.783 345.887 539.861 346.752 541.4 c
346.86 541.643 346.967 541.643 346.967 541.994 c
346.967 542.264 346.806 542.399 346.616 542.399 c
346.535 542.399 346.455 542.318 346.401 542.237 c
345.806 541.238 344.835 539.726 344.159 539.726 c
343.997 539.726 343.943 539.888 343.943 540.023 c
343.943 540.995 346.967 547.313 346.967 549.473 c
346.967 550.904 346.184 551.39 345.266 551.39 c
f
U
u
350.946 551.687 m
350.865 547.556 355.509 545.612 355.428 541.994 c
355.428 540.995 354.672 538.403 352.026 538.457 c
350.703 538.484 349.434 539.375 349.461 541.67 C
349.461 543.29 L
349.434 543.425 349.434 543.587 349.326 543.722 c
349.245 543.803 349.083 543.857 348.948 543.803 c
348.705 543.668 348.651 543.398 348.543 543.182 c
348.408 542.48 348.246 541.751 348.111 541.049 c
348.084 540.995 348.165 540.995 348.111 540.995 c
348.003 540.482 347.922 539.942 347.895 539.429 c
347.868 539.105 348.084 538.835 348.354 538.673 c
349.353 538.134 350.622 537.755 352.026 537.729 c
355.455 537.675 358.263 540.671 358.317 543.587 c
358.344 545.936 357.021 547.286 355.563 549.041 c
354.834 549.959 353.376 551.228 353.43 552.902 c
353.43 554.252 354.537 555.764 356.562 555.737 c
359.289 555.683 358.857 552.794 358.911 551.471 c
358.911 551.336 358.911 551.201 359.019 551.147 c
359.127 551.039 359.289 551.012 359.424 551.066 c
359.505 551.147 359.559 551.201 359.586 551.282 C
360.261 553.82 L
360.369 554.279 360.585 554.738 360.585 555.278 c
360.585 555.413 360.477 555.548 360.342 555.656 c
358.911 556.412 358.047 556.52 356.724 556.547 c
353.376 556.601 350.973 554.225 350.946 551.687 c
f
U
359.754 542.723 m
359.781 540.806 360.672 537.675 363.885 537.729 c
367.719 537.783 371.256 542.291 371.175 546.638 c
371.094 550.931 368.044 551.66 366.801 551.633 c
364.128 551.579 359.646 548.555 359.754 542.723 c
f
1 g
368.826 548.447 m
368.853 545.666 367.071 538.565 363.858 538.511 c
362.346 538.484 362.022 539.78 361.995 540.941 c
361.941 544.208 364.02 550.796 366.909 550.85 c
368.097 550.877 368.8 550.013 368.826 548.447 c
f
u
0 0 0 1 k
381.346 557.573 m
378.916 557.573 376.162 554.954 375.028 551.255 c
375.001 551.201 374.973 551.093 374.893 551.093 c
374.434 551.093 373.705 551.093 372.949 551.093 c
372.787 551.093 372.598 550.688 372.598 550.31 c
372.598 550.202 372.733 550.094 372.922 550.094 c
373.57 550.094 374.002 550.094 374.542 550.094 c
374.568 550.094 374.596 550.013 374.596 549.959 c
374.596 549.716 372.841 543.749 372.517 542.777 c
371.086 538.457 370.33 533.085 368.737 533.085 c
368.656 533.085 368.332 533.139 368.332 533.814 c
368.332 534.111 368.386 534.408 368.386 534.759 c
368.386 535.596 367.792 535.947 367.171 535.947 c
366.253 535.947 365.848 534.974 365.848 534.354 c
365.848 532.842 366.928 532.221 367.954 532.221 c
369.709 532.221 371.788 533.679 372.922 536.189 c
374.677 539.996 375.675 544.802 377.134 549.959 c
377.161 550.013 377.215 550.094 377.323 550.094 c
378.268 550.094 382.571 550.094 383.516 550.094 C
383.732 551.093 L
383.273 551.093 378.457 551.093 377.674 551.093 c
377.62 551.093 377.538 551.093 377.566 551.228 c
378.025 553.334 378.943 556.331 380.077 556.331 c
381.076 556.331 379.996 553.82 381.723 553.82 c
382.75 553.82 383.29 554.954 383.29 555.791 c
383.29 557.465 381.643 557.573 381.346 557.573 c
f
U
u
384.765 554.981 m
384.603 554.954 384.522 554.792 384.522 554.765 c
384.225 553.793 383.523 551.741 383.307 551.174 c
383.253 551.093 383.226 551.093 383.118 551.093 c
383.037 551.066 382.281 551.039 381.714 551.039 c
381.336 551.039 381.093 550.715 381.093 550.256 c
381.093 550.175 381.255 550.094 381.39 550.094 c
381.849 550.094 382.659 550.094 382.713 550.094 c
382.767 550.094 382.902 550.094 382.902 549.959 c
382.902 549.473 379.932 541.4 379.932 539.375 c
379.932 538.754 380.148 537.864 381.147 537.864 c
383.253 537.864 385.98 542.021 385.98 542.858 c
385.98 543.155 385.818 543.209 385.683 543.209 c
385.44 543.209 385.305 542.804 385.035 542.372 c
384.468 541.4 383.469 539.834 382.767 539.834 c
382.605 539.834 382.525 539.942 382.525 540.104 c
382.525 541.265 384.279 546.287 385.44 550.04 C
385.44 550.067 385.494 550.094 385.575 550.094 c
385.872 550.094 386.682 550.121 387.303 550.121 c
387.519 550.121 387.708 550.148 387.843 550.31 c
388.005 550.472 388.086 550.688 388.086 550.796 c
388.086 550.85 388.059 550.985 387.924 551.066 c
387.735 551.093 386.736 551.093 385.845 551.093 c
385.791 551.093 385.764 551.147 385.764 551.228 c
385.764 551.336 386.79 554.414 386.79 554.846 c
386.79 554.954 386.736 554.981 386.682 554.981 c
386.574 555.008 386.277 555.035 386.196 555.035 c
385.872 555.035 385.116 555.008 384.765 554.981 c
f
U
u
0 g
0.771 w 4 M
295.144 537.672 m
295.227 537.59 295.108 537.339 295.027 537.257 c
294.944 537.174 294.693 537.057 294.612 537.139 C
294.604 537.148 L
289.867 541.885 L
288.686 540.704 L
293.423 535.967 L
293.434 535.96 L
294.233 535.161 295.527 535.161 296.326 535.96 c
297.125 536.759 297.125 538.054 296.326 538.853 C
296.317 538.861 L
291.58 543.598 L
290.398 542.416 L
295.135 537.679 L
295.144 537.672 L
f
U
295.142 544.287 m
295.06 544.37 294.809 544.253 294.727 544.17 c
294.645 544.088 294.527 543.837 294.609 543.755 C
294.619 543.748 L
299.356 539.011 L
298.173 537.829 L
293.436 542.566 L
293.43 542.578 L
292.632 543.377 292.632 544.672 293.43 545.47 c
294.229 546.269 295.524 546.269 296.322 545.47 C
296.331 545.46 L
301.068 540.723 L
299.886 539.542 L
295.149 544.279 L
295.142 544.287 L
f
291.274 547.549 m
291.357 547.631 291.608 547.513 291.689 547.432 c
291.772 547.349 291.889 547.098 291.807 547.016 C
291.798 547.009 L
287.061 542.272 L
288.243 541.09 L
292.98 545.827 L
292.987 545.839 L
293.785 546.638 293.785 547.932 292.987 548.731 c
292.188 549.53 290.892 549.53 290.094 548.731 C
290.085 548.722 L
285.348 543.985 L
286.53 542.803 L
291.267 547.54 L
291.274 547.549 L
f
u
284.659 547.547 m
284.577 547.465 284.694 547.214 284.776 547.131 c
284.858 547.05 285.109 546.932 285.192 547.014 C
285.199 547.023 L
289.936 551.76 L
291.118 550.578 L
286.381 545.841 L
286.369 545.835 L
285.57 545.036 284.275 545.036 283.476 545.835 c
282.678 546.634 282.678 547.929 283.476 548.727 C
283.486 548.736 L
288.223 553.473 L
289.405 552.291 L
284.668 547.554 L
284.659 547.547 L
f
U
u
294.57 556.926 m
294.488 557.009 294.605 557.26 294.687 557.342 c
294.77 557.424 295.021 557.541 295.103 557.46 C
295.11 557.45 L
299.847 552.713 L
301.029 553.895 L
296.291 558.632 L
296.28 558.638 L
295.481 559.437 294.186 559.437 293.388 558.638 c
292.589 557.84 292.589 556.545 293.388 555.746 C
293.397 555.737 L
298.135 551 L
299.316 552.183 L
294.579 556.92 L
294.57 556.926 L
f
U
294.572 550.311 m
294.655 550.229 294.905 550.346 294.987 550.429 c
295.07 550.51 295.187 550.761 295.105 550.844 C
295.096 550.851 L
290.358 555.588 L
291.541 556.77 L
296.278 552.033 L
296.284 552.02 L
297.082 551.222 297.082 549.927 296.284 549.128 c
295.485 548.33 294.19 548.33 293.392 549.128 C
293.383 549.138 L
288.646 553.875 L
289.828 555.057 L
294.565 550.32 L
294.572 550.311 L
f
298.393 547.02 m
298.311 546.938 298.06 547.055 297.977 547.138 c
297.895 547.22 297.778 547.471 297.86 547.553 C
297.869 547.56 L
302.606 552.297 L
301.424 553.479 L
296.687 548.742 L
296.681 548.73 L
295.882 547.932 295.882 546.637 296.681 545.838 c
297.48 545.04 298.774 545.04 299.573 545.838 C
299.582 545.847 L
304.319 550.584 L
303.137 551.767 L
298.399 547.03 L
298.393 547.02 L
f
u
305.008 547.023 m
305.09 547.104 304.973 547.355 304.89 547.438 c
304.809 547.52 304.558 547.638 304.475 547.555 C
304.468 547.546 L
299.731 542.809 L
298.549 543.991 L
303.287 548.728 L
303.299 548.734 L
304.097 549.533 305.392 549.533 306.191 548.734 c
306.989 547.935 306.989 546.641 306.191 545.842 C
306.181 545.834 L
301.444 541.097 L
300.262 542.278 L
304.999 547.015 L
305.008 547.023 L
f
U
1 w
/_Helvetica-Narrow 4.85 12 -0.25 0 z
[1 0 0 1 310.5 531]e
33 (A Sun Microsystems, Inc. Business)t
T
%%Trailer
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec


%%EndDocument
FMENDEPSF
1 9 Q
-0.13 0.09 (After considering many of the alternatives available on) 72 743 B
0.47 0.09 (the SP) 72 732 B
0.47 0.09 (ARC platform, DSS has chosen to use SunSoft) 97.07 732 B
0.47 0.09 (tools in all aspects of their development pr) 72 721 B
0.47 0.09 (ocess.) 248.51 721 B
0.47 0.09 (\322Ther) 72 710 B
0.47 0.09 (e ar) 95.41 710 B
0.47 0.09 (e DSSLIB users on Solaris 1.x and 2.x, single-) 110.69 710 B
0.47 0.09 (pr) 72 699 B
0.47 0.09 (ocessor and MP) 80.98 699 B
0.47 0.09 (, all of the f77 r) 145.02 699 B
0.47 0.09 (eleases with and) 208.01 699 B
0.47 0.09 (without iMPact\252, and on all types of SP) 72 688 B
0.47 0.09 (ARC) 239.01 688 B
-0.04 0.09 (pr) 72 677 B
-0.04 0.09 (ocessors,\323 noted Schmidt. \322W) 80.98 677 B
-0.04 0.09 (e also need to maintain) 200.81 677 B
0.47 0.09 (special con\336gurations for some of our licensees. Only) 72 666 B
-0.01 0.09 (SunSoft has the speed, \337exibility) 72 655 B
-0.01 0.09 (, and superior support) 203.33 655 B
0.47 0.09 (that we need for all of the envir) 72 644 B
0.47 0.09 (onments that ar) 203.02 644 B
0.47 0.09 (e) 267.7 644 B
0.47 0.09 (important to our customers. W) 72 633 B
0.47 0.09 (e have been very) 198.41 633 B
0.47 0.09 (pleased with the quality and selection of SunSoft) 72 622 B
0.47 0.09 (of) 72 611 B
0.47 0.09 (ferings, and we expect to continue using them to) 79.93 611 B
0.47 0.09 (meet our futur) 72 600 B
0.47 0.09 (e development needs.\323) 132.27 600 B
0 12 Q
0.69 0.12 (Combining Flexibility with) 72 559 B
0.12 (Performance) 72 545 S
1 9 Q
0.47 0.09 (The \337exibility of the Solaris thr) 72 526 B
0.47 0.09 (eads interface allowed) 200.15 526 B
0.17 0.09 (DSS to implement two models of parallel computation) 72 515 B
0.47 0.09 (within DSSLIB to meet two distinct needs. SunSoft\325s) 72 504 B
0.47 0.09 (FOR) 72 493 B
0.47 0.09 (TRAN MP model of parallelism is very CPU-) 90.03 493 B
0.47 0.09 (intensive but gives the highest possible performance.) 72 482 B
0.47 0.09 (DSS used dir) 72 471 B
0.47 0.09 (ect calls to the thr) 125.5 471 B
0.47 0.09 (eads library to) 198.85 471 B
0.47 0.09 (implement a second model of parallelism that allows) 72 460 B
0.47 0.09 (users to trade away a small amount of speed to gain) 72 449 B
0.47 0.09 (additional CPU r) 72 438 B
0.47 0.09 (esour) 142.03 438 B
0.47 0.09 (ces for other pr) 164.34 438 B
0.47 0.09 (ocesses. \322W) 227.27 438 B
0.47 0.09 (e) 274.88 438 B
0.27 0.09 (wer) 72 427 B
0.27 0.09 (e very impr) 87.48 427 B
0.27 0.09 (essed with the \337exibility of the thr) 135.14 427 B
0.27 0.09 (eads) 275.81 427 B
0.47 0.09 (interface. None of the other parallel systems that we) 72 416 B
-0.1 0.09 (consider) 72 405 B
-0.1 0.09 (ed allowed us to implement the two models of) 106.51 405 B
0.47 0.09 (parallelism that our customers need,\323 says Schmidt.) 72 394 B
0.47 0.09 (In addition to \337exibility) 72 376 B
0.47 0.09 (, the thr) 169.16 376 B
0.47 0.09 (eads deliver) 201.71 376 B
0.47 0.09 (ed the) 251.47 376 B
-0.02 0.09 (ef) 72 365 B
-0.02 0.09 (\336ciency and high speed that DSS customers demand.) 79.33 365 B
0.47 0.09 (\322Other parallelization schemes gave us only about) 72 354 B
-0.07 0.09 (70% CPU ef) 72 343 B
-0.07 0.09 (\336ciency on lar) 119.78 343 B
-0.07 0.09 (ge pr) 176.67 343 B
-0.07 0.09 (oblems and they simply) 197.41 343 B
-0.05 0.09 (wer) 72 332 B
-0.05 0.09 (e not ef) 87.48 332 B
-0.05 0.09 (\336cient enough to work at all on medium- or) 117.15 332 B
0.47 0.09 (small-sized pr) 72 321 B
0.47 0.09 (oblems. W) 130.02 321 B
0.47 0.09 (ith Solaris thr) 172.89 321 B
0.47 0.09 (eads, we get) 228.78 321 B
0.03 0.09 (ef) 72 310 B
0.03 0.09 (\336ciency ratings well over 90% on lar) 79.33 310 B
0.03 0.09 (ge pr) 226.68 310 B
0.03 0.09 (oblems and) 247.53 310 B
-0.12 0.09 (we ar) 72 299 B
-0.12 0.09 (e able to parallelize pr) 94.29 299 B
-0.12 0.09 (oblems of almost any size.\323) 183.88 299 B
0.42 0.09 (Although DSS\325s customers ar) 72 288 B
0.42 0.09 (e not concerned with the) 192.16 288 B
0.24 0.09 (details of thr) 72 277 B
0.24 0.09 (eads versus other methods, they certainly) 124.01 277 B
0.47 0.09 (like the r) 72 266 B
0.47 0.09 (esults. \322DSSLIB has tripled the speed of the) 108.76 266 B
0.2 0.09 (neural networks that we use in our work with satellite) 72 255 B
0.47 0.09 (r) 72 244 B
0.47 0.09 (emote sensing,\323 says Dr) 75.48 244 B
0.47 0.09 (. T) 173.91 244 B
0.47 0.09 (oni Logar) 183.83 244 B
0.47 0.09 (, a noted) 222.94 244 B
0.47 0.09 (r) 72 233 B
0.47 0.09 (esear) 75.48 233 B
0.47 0.09 (cher at the Institute for Atmospheric Sciences.) 96.26 233 B
0 12 Q
0.69 0.12 (SunSoft\325) 333 739 B
0.69 0.12 (s Compilers and T) 382.85 739 B
0.69 0.12 (ools) 490.1 739 B
1 9 Q
0.47 0.09 (SunSoft\325s Developer T) 333 720 B
0.47 0.09 (ools division pr) 423.77 720 B
0.47 0.09 (oduces a set of) 488.12 720 B
-0.06 0.09 (compilers and tools to assist in the writing, debugging, and) 333 709 B
0.47 0.09 (tuning of MT pr) 333 698 B
0.47 0.09 (ograms, known as SP) 399.71 698 B
0.47 0.09 (ARCworks\252) 487.11 698 B
0.09 (/iMPact.) 333 687 S
0.47 0.09 (SP) 333 669 B
0.47 0.09 (ARCompiler\252 FOR) 342.51 669 B
0.47 0.09 (TRAN MP is an industry standar) 423.92 669 B
0.47 0.09 (d) 560.31 669 B
0.47 0.09 (f77 compiler which can examine a standar) 333 658 B
0.47 0.09 (d FOR) 506.55 658 B
0.47 0.09 (TRAN) 532.98 658 B
0.47 0.09 (pr) 333 647 B
0.47 0.09 (ogram, and automatically cr) 341.98 647 B
0.47 0.09 (eate multiple thr) 457.87 647 B
0.47 0.09 (eads to r) 526.34 647 B
0.47 0.09 (un) 562.05 647 B
0.47 0.09 (independent sections of code simultaneously) 333 636 B
0.47 0.09 (. It detects) 516.81 636 B
0.47 0.09 (loops that can be parallelized and generates code that can) 333 625 B
0.47 0.09 (execute on multiple pr) 333 614 B
0.47 0.09 (ocessors. The number of pr) 425.91 614 B
0.47 0.09 (ocessors) 537.74 614 B
0.24 0.09 (to be used is determined by the user at r) 333 603 B
0.24 0.09 (un time. For loops) 498.45 603 B
0.37 0.09 (which ar) 333 592 B
0.37 0.09 (e not amenable to the analysis, the user can insert) 368.83 592 B
0.47 0.09 (explicit dir) 333 581 B
0.47 0.09 (ectives to tell the compiler that they can be) 377.46 581 B
0.47 0.09 (parallelized. The compiler will also pr) 333 570 B
0.47 0.09 (oduce output) 489.86 570 B
0.47 0.09 (indicating which loops wer) 333 559 B
0.47 0.09 (e parallelized, and why other) 445.24 559 B
0.47 0.09 (loops couldn\325t be.) 333 548 B
0.47 0.09 (SP) 333 530 B
0.47 0.09 (ARCworks Debugger MT extends the debugger to) 342.51 530 B
0.47 0.09 (support dynamic analysis and contr) 333 519 B
0.47 0.09 (ol of thr) 481.02 519 B
0.47 0.09 (eaded) 514.28 519 B
0.47 0.09 (pr) 333 508 B
0.47 0.09 (ograms. It will debug C, C++, and FOR) 341.98 508 B
0.47 0.09 (TRAN MT) 504.03 508 B
0.47 0.09 (applications, switching between the various languages as) 333 497 B
0.47 0.09 (necessary) 333 486 B
0.47 0.09 (. Setting br) 371.36 486 B
0.47 0.09 (eakpoints, inspecting data, navigating) 416.26 486 B
-0.01 0.09 (up and down the stack ar) 333 475 B
-0.01 0.09 (e all accomplished with r) 436.2 475 B
-0.01 0.09 (espect to) 538 475 B
0.47 0.09 (the individual thr) 333 464 B
0.47 0.09 (ead chosen. The pr) 405.83 464 B
0.47 0.09 (ogrammer can select) 483.54 464 B
0.47 0.09 (the thr) 333 453 B
0.47 0.09 (ead of inter) 360.4 453 B
0.47 0.09 (est with the Thr) 407.63 453 B
0.47 0.09 (eadInspector) 473.21 453 B
0.47 0.09 (, and work) 525.14 453 B
0.47 0.09 (with that one alone, or execute commands that will af) 333 442 B
0.47 0.09 (fect) 554.99 442 B
0.47 0.09 (all thr) 333 431 B
0.47 0.09 (eads.) 357.65 431 B
0.27 0.09 (All of this is in addition to the standar) 333 413 B
0.27 0.09 (d Debugger featur) 489.91 413 B
0.27 0.09 (es) 565.09 413 B
0.47 0.09 (which include \322Runtime Err) 333 402 B
0.47 0.09 (or Checking\323, \050which checks) 449.23 402 B
0.47 0.09 (for memory access violations and leaks\051, \322Fix and) 333 391 B
0.47 0.09 (Continue\323 \050which allows the pr) 333 380 B
0.47 0.09 (ogrammer to r) 462.98 380 B
0.47 0.09 (ecompile) 522.56 380 B
0.41 0.09 (only that code which has changed, and then incr) 333 369 B
0.41 0.09 (ementally) 532.96 369 B
-0.09 0.09 (link it back into the image being debugged\051, W) 333 358 B
-0.09 0.09 (atchpoints, a) 522.08 358 B
0.47 0.09 (scripting language, a graphical data inspector) 333 347 B
0.47 0.09 (, and all the) 520.27 347 B
0.47 0.09 (other normal debugger functionality) 333 336 B
0.47 0.09 (.) 482.15 336 B
0.47 0.09 (For mor) 333 318 B
0.47 0.09 (e information about how you can take advantage) 366.08 318 B
0.47 0.09 (of multithr) 333 307 B
0.47 0.09 (eading, please send email to) 377.73 307 B
0.47 0.09 (Thr) 333 296 B
0.47 0.09 (eads-Hotline@Sun.COM, or call 415 336-3032.) 347.42 296 B
1 6 Q
0.3 (\050c\051 1994 Sun Micr) 333 264 P
0.3 (osystems, Inc. Sun, Sun Micr) 379.67 264 P
0.3 (osystems, SunSoft, Solaris, and IPX ar) 456.79 264 P
0.3 (e) 558.2 264 P
0.3 (trademarks or r) 333 257 P
0.3 (egister) 374.92 257 P
0.3 (ed trademarks of Sun Micr) 392.51 257 P
0.3 (osystems, Inc. SP) 464.55 257 P
0.3 (ARC is a r) 509.92 257 P
0.3 (egister) 537.8 257 P
0.3 (ed) 555.4 257 P
0.3 (trademark of SP) 333 250 P
0.3 (ARC International, Inc. SP) 375.97 250 P
0.3 (ARCworks/iMPact, SP) 446.12 250 P
0.3 (ARCstation, and) 507.4 250 P
0.3 (SP) 333 243 P
0.3 (ARCcompiler ar) 339.22 243 P
0.3 (e licensed exclusively to Sun Micr) 382.79 243 P
0.3 (osystems, Inc. Pr) 473.75 243 P
0.3 (oducts bearing) 518.78 243 P
0.3 (SP) 333 236 P
0.3 (ARC trademarks ar) 339.22 236 P
0.3 (e based upon an ar) 391.43 236 P
0.3 (chitectur) 442.65 236 P
0.3 (e developed by Sun Micr) 465.88 236 P
0.3 (osystems, Inc.) 533.19 236 P
0.26 (All other pr) 333 229 P
0.26 (oducts or services mentioned her) 364.51 229 P
0.26 (ein ar) 453.23 229 P
0.26 (e trademarks of their r) 468.36 229 P
0.26 (espective owners.) 528.65 229 P
FMENDPAGE
%%EndPage: "2" 2
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 2
%%DocumentFonts: Helvetica-Bold
%%+ Palatino-Roman
%%+ Palatino-BoldItalic
%%+ ZapfDingbats
%%EOF
