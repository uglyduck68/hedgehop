The current covention is as follows :

  (1) Input format
     
     (a) If read from a file, a user-specified string (if any) or EOF delimits 
a classad instance input; The newline character delimits an expression; White
spaces before a new expression are ignored.
	 delimitor string should be on a seperate line.
	 1 is passed on to the calling procedure if EOF is reached. Otherwise, 
0 is passed on.

     (b) If read from a string, a user-specified character or the end 
of string delimits a expression; end of string delimits a classad input;

     In both cases, empty expressions are simply ignored, no parse error.

  (2) In the "Requirment" field, every variable has a prefix "MY." or
"TARGET.".

  (3) There should be "MyType" and "TargetType" in the input. If a type is 
missing, the name field of it will assign "" and the number field will be 
assigned -1.

  (4) Requirement appears in the file.

  (5) With a registration class implemented, each type has an associated unique
integer value. As mentioned above, for an undefined type, this number is -1. 
But this is an internal thing. A user only doesn't need to be aware of this 
registration class whether he is using the type number or not. 









