NAME=Chirp.jar
LIBNAME = libchirp_client.a
LIBOBJ = chirp_client.o

CFLAGS = $(STD_C_FLAGS) $(CONFIGURE_PCRE_CFLAGS)
C_PLUS_FLAGS = $(STD_C_PLUS_FLAGS) $(CONFIGURE_PCRE_CFLAGS)
LIB = $(LIBNAME) $(STD_LIBS) $(CONFIGURE_PCRE_LDFLAGS)

CONDOR_CHIRP_NAME=condor_chirp
CONDOR_CHIRP_OBJ=condor_chirp.o

all:: $(LIBNAME) $(CONDOR_CHIRP_NAME)

clean::

public_copy_target($(NAME),lib,$(NAME),EXECUTABLE_MODE)
public_copy_target($(CONDOR_CHIRP_NAME),libexec,$(CONDOR_CHIRP_NAME),EXECUTABLE_MODE)
public_copy_target(chirp_client.c,src/chirp,chirp_client.c,TEXT_MODE)
public_copy_target(chirp_client.h,src/chirp,chirp_client.h,TEXT_MODE)
public_copy_target(chirp_protocol.h,src/chirp,chirp_protocol.h,TEXT_MODE)

public_symlink_target(../src/chirp/chirp_client.h,include,chirp_client.h)

library_target($(LIBNAME),$(LIBOBJ))
public_library($(LIBNAME),lib)

html_target( ChirpClient.java ChirpInputStream.java ChirpOutputStream.java )

/* chirp isn't (for now) going to be linked with GCB, so we don't want
to include the --wrap options on the link-line for it */
public_c_plus_nowrap_target($(CONDOR_CHIRP_NAME),libexec,$(CONDOR_CHIRP_OBJ),$(LIB))

testbin:: all
