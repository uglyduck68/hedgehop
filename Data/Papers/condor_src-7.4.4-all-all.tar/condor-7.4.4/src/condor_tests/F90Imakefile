/***********************************************************************
 First, include common settings across all compiler-specific Imakefiles
************************************************************************/
#include "Imakefile.common"
#include "Imakefile.common.compiler"


/***********************************************************************
 Now, define make variables that are specific to this compiler
************************************************************************/
Fortran = F_COMPILER
FFLAGS = $(BUILD_FLAGS) $(INCLUDE_FLAGS)
CFLAGS = $(BUILD_FLAGS) $(INCLUDE_FLAGS)


/***********************************************************************
 Finally, define the Fortran-specific tests themselves
************************************************************************/

#if ! IS_CLIPPED

/****************************
 * Remote System Calls
 ***************************/

/*
DESC(job_rsc_f-direct-write_std,"Can Fortran jobs use direct access I/O?")
CBUILD($(Fortran),job_rsc_f-direct-write_std,f)
DEP_SYMLINK_EXT(job_rsc_f-direct-write_std,cmd)
RUN(job_rsc_f-direct-write_std)
DEPS(job_rsc_f-direct-write_std,x_hello.in)
TESTCLASS(job_rsc_f-direct-write_std,stduniv)
TESTCLASS(job_rsc_f-direct-write_std,long)
TESTCLASS(job_rsc_f-direct-write_std,full)
TESTCLASS(job_rsc_f-direct-write_std,rsc)
*/


/****************************
 * Checkpointing
 ***************************/

/*
DESC(job_ckpt_f-printer_std,"Can Fortran print output while ckpting?")
CBUILD($(Fortran),job_ckpt_f-printer_std,f)
DEP_SYMLINK_EXT(job_ckpt_f-printer_std,cmd)
RUN(job_ckpt_f-printer_std)
TESTCLASS(job_ckpt_f-printer_std,stduniv)
TESTCLASS(job_ckpt_f-printer_std,framework)
TESTCLASS(job_ckpt_f-printer_std,long)
TESTCLASS(job_ckpt_f-printer_std,full)
TESTCLASS(job_ckpt_f-printer_std,ckpt)
*/

/*
DESC(job_ckpt_f-reader_std,"Can Fortran read input while ckpting?")
CBUILD($(Fortran),job_ckpt_f-reader_std,f)
DEP_SYMLINK_EXT(job_ckpt_f-reader_std,cmd)
DEP_SYMLINK(job_ckpt_f-reader_std,job_ckpt_f-reader_std.in)
RUN(job_ckpt_f-reader_std)
TESTCLASS(job_ckpt_f-reader_std,stduniv)
TESTCLASS(job_ckpt_f-reader_std,long)
TESTCLASS(job_ckpt_f-reader_std,full)
TESTCLASS(job_ckpt_f-reader_std,ckpt)
*/

DESC(job_ckpt_fn-areauc_std,"Can Fortran compute the area under a curve?")
CBUILD($(Fortran),job_ckpt_fn-areauc_std,f90)
DEP_SYMLINK_EXT(job_ckpt_fn-areauc_std,cmd)
RUN(job_ckpt_fn-areauc_std)
TESTCLASS(job_ckpt_fn-areauc_std,stduniv)
TESTCLASS(job_ckpt_fn-areauc_std,quick)
TESTCLASS(job_ckpt_fn-areauc_std,full)
TESTCLASS(job_ckpt_fn-areauc_std,ckpt)

/*
DESC(job_ckpt_f-floats_std,"Do Fortran jobs ckpt/restore floating point nums?")
CBUILD($(Fortran),job_ckpt_f-floats_std,f)
DEP_SYMLINK_EXT(job_ckpt_f-floats_std,cmd)
RUN(job_ckpt_f-floats_std)
TESTCLASS(job_ckpt_f-floats_std,stduniv)
TESTCLASS(job_ckpt_f-floats_std,quick)
TESTCLASS(job_ckpt_f-floats_std,full)
TESTCLASS(job_ckpt_f-floats_std,ckpt)
*/

/*
DESC(job_ckpt_f-integers_std,"Do Fortran jobs ckpt/restore integers?")
CBUILD($(Fortran),job_ckpt_f-integers_std,f)
DEP_SYMLINK_EXT(job_ckpt_f-integers_std,cmd)
RUN(job_ckpt_f-integers_std)
TESTCLASS(job_ckpt_f-integers_std,stduniv)
TESTCLASS(job_ckpt_f-integers_std,quick)
TESTCLASS(job_ckpt_f-integers_std,full)
TESTCLASS(job_ckpt_f-integers_std,ckpt)
*/

#endif /* ! IS_CLIPPED */



