#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use strict;
use warnings;

my $cmd = 'cmd_q_shows-xml.cmd';
my $cmdout = $cmd . ".out";
my $testdesc =  'cmd_q_shows-xml  ';
my $testname = "cmd_q_shows-xml";
my $debuglevel = 2;
my $worked = 0;

my @adarray;

my $submit = sub {
	my %info = @_;
	my $cmd = "condor_q -xml ";

	print "ok\n";
	print "Get XML output via $cmd - ";
	my $cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$cmdstatus)
	{
		print "bad\n";
		CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",$debuglevel);
		exit(1)
	}
	print "ok\n";

	my $submitline = "";
	my $cluster = "";

	open(CMD, "<$cmdout") || die "Can not find submit output:$!\n";;
	while(<CMD>) {
		chomp($_);
		$submitline = $_;
		if($submitline =~ /^.*cluster\s+(\d+).*$/) {
			$cluster = $1;
			CondorTest::debug("Found my cluster which is $cluster!\n",$debuglevel);
		}
		CondorTest::debug("$_\n",$debuglevel);
	}

	$cmd = "condor_rm $cluster";

	print "Check for valid XML output - ";
	foreach my $line (@adarray) {
		chomp($line);
		if($line =~ /^\s*$/) {
				#print "Blank Line\n";
		} elsif($line =~ /^\s*<.*$/) {
				CondorTest::debug("XML<<	$line	>>\n",$debuglevel);
				$worked += 1;
		} elsif($line =~ /^.*Submitter:.*$/) {
				#print "Submit line\n";
		} else {
			print "bad\n";
			CondorTest::debug("Lines must be blank or start with <\n",$debuglevel);
			CondorTest::debug("<<<$line>>>\n",$debuglevel);
			$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,8);
			exit(1)
		}
	}
	if($worked > 0) {
		print "ok\n";
	} else {
		print "bad\n";
	}

	$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,8);
	return(0);
};

my $aborted = sub {
	CondorTest::debug("If all is good we abort our own job.......\n",$debuglevel);
};

my $ExitSuccess = sub {
	my %info = @_;
};

my $timed = sub
{
    die "Job should have ended by now. condor_q -xml broken!\n";
};

CondorTest::RegisterAbort($testname, $aborted);
CondorTest::RegisterSubmit($testname, $submit);
CondorTest::RegisterExitedSuccess( $testname, $ExitSuccess );

print "Submit a long running job on hold - ";

if( CondorTest::RunTest($testname, $cmd, 0) ) {
	CondorTest::debug("$testname: SUCCESS\n",$debuglevel);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}


