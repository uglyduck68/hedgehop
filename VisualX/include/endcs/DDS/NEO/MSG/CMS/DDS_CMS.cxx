
/*
  WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.

  This file was generated from DDS_CMS.idl using "rtiddsgen".
  The rtiddsgen tool is part of the RTI Data Distribution Service distribution.
  For more information, type 'rtiddsgen -help' at a command shell
  or consult the RTI Data Distribution Service manual.
*/


#ifndef NDDS_STANDALONE_TYPE
    #ifdef __cplusplus
        #ifndef ndds_cpp_h
            #include "ndds/ndds_cpp.h"
        #endif
        #ifndef dds_c_log_impl_h              
            #include "dds_c/dds_c_log_impl.h"                                
        #endif        
    #else
        #ifndef ndds_c_h
            #include "ndds/ndds_c.h"
        #endif
    #endif
    
    #ifndef cdr_type_h
        #include "cdr/cdr_type.h"
    #endif    

    #ifndef osapi_heap_h
        #include "osapi/osapi_heap.h" 
    #endif
#else
    #include "ndds_standalone_type.h"
#endif



#include "DDS_CMS.h"

/* ========================================================================= */
const char *TrkNoSysTYPENAME = "TrkNoSys";

DDS_TypeCode* TrkNoSys_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member TrkNoSys_g_tc_members[11]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoLINK",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoTDSR",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoTRR",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoEOTS",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoEW",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoPERI",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoOMS",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoNAVR",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoSONAR",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNoMAN",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode TrkNoSys_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"TrkNoSys", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        11, /* Number of members */
        TrkNoSys_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for TrkNoSys*/

    if (is_initialized) {
        return &TrkNoSys_g_tc;
    }


    TrkNoSys_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    TrkNoSys_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    TrkNoSys_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    TrkNoSys_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    TrkNoSys_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    TrkNoSys_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    TrkNoSys_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    TrkNoSys_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    TrkNoSys_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    TrkNoSys_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    TrkNoSys_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &TrkNoSys_g_tc;
}


RTIBool TrkNoSys_initialize(
    TrkNoSys* sample) {
  return TrkNoSys_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool TrkNoSys_initialize_ex(
    TrkNoSys* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedShort(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->trkNoLINK)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->trkNoTDSR)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->trkNoTRR)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->trkNoEOTS)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->trkNoEW)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->trkNoPERI)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->trkNoOMS)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->trkNoNAVR)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->trkNoSONAR)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->trkNoMAN)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void TrkNoSys_finalize(
    TrkNoSys* sample)
{
    TrkNoSys_finalize_ex(sample,RTI_TRUE);
}
        
void TrkNoSys_finalize_ex(
    TrkNoSys* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool TrkNoSys_copy(
    TrkNoSys* dst,
    const TrkNoSys* src)
{        

    if (!RTICdrType_copyUnsignedShort(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->trkNoLINK, &src->trkNoLINK)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->trkNoTDSR, &src->trkNoTDSR)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->trkNoTRR, &src->trkNoTRR)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->trkNoEOTS, &src->trkNoEOTS)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->trkNoEW, &src->trkNoEW)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->trkNoPERI, &src->trkNoPERI)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->trkNoOMS, &src->trkNoOMS)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->trkNoNAVR, &src->trkNoNAVR)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->trkNoSONAR, &src->trkNoSONAR)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->trkNoMAN, &src->trkNoMAN)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'TrkNoSys' sequence class.
 */
#define T TrkNoSys
#define TSeq TrkNoSysSeq
#define T_initialize_ex TrkNoSys_initialize_ex
#define T_finalize_ex   TrkNoSys_finalize_ex
#define T_copy       TrkNoSys_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *stDateTYPENAME = "stDate";

DDS_TypeCode* stDate_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member stDate_g_tc_members[3]=
    {
        {
            (char *)"yy",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"mm",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dd",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode stDate_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"stDate", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        stDate_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for stDate*/

    if (is_initialized) {
        return &stDate_g_tc;
    }


    stDate_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    stDate_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    stDate_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &stDate_g_tc;
}


RTIBool stDate_initialize(
    stDate* sample) {
  return stDate_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool stDate_initialize_ex(
    stDate* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedShort(&sample->yy)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->mm)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->dd)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void stDate_finalize(
    stDate* sample)
{
    stDate_finalize_ex(sample,RTI_TRUE);
}
        
void stDate_finalize_ex(
    stDate* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool stDate_copy(
    stDate* dst,
    const stDate* src)
{        

    if (!RTICdrType_copyUnsignedShort(
        &dst->yy, &src->yy)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->mm, &src->mm)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->dd, &src->dd)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'stDate' sequence class.
 */
#define T stDate
#define TSeq stDateSeq
#define T_initialize_ex stDate_initialize_ex
#define T_finalize_ex   stDate_finalize_ex
#define T_copy       stDate_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *stTimeTYPENAME = "stTime";

DDS_TypeCode* stTime_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member stTime_g_tc_members[2]=
    {
        {
            (char *)"hh",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"mm",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode stTime_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"stTime", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        stTime_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for stTime*/

    if (is_initialized) {
        return &stTime_g_tc;
    }


    stTime_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    stTime_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &stTime_g_tc;
}


RTIBool stTime_initialize(
    stTime* sample) {
  return stTime_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool stTime_initialize_ex(
    stTime* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->hh)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->mm)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void stTime_finalize(
    stTime* sample)
{
    stTime_finalize_ex(sample,RTI_TRUE);
}
        
void stTime_finalize_ex(
    stTime* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool stTime_copy(
    stTime* dst,
    const stTime* src)
{        

    if (!RTICdrType_copyChar(
        &dst->hh, &src->hh)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->mm, &src->mm)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'stTime' sequence class.
 */
#define T stTime
#define TSeq stTimeSeq
#define T_initialize_ex stTime_initialize_ex
#define T_finalize_ex   stTime_finalize_ex
#define T_copy       stTime_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *time1TYPENAME = "time1";

DDS_TypeCode* time1_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member time1_g_tc_members[3]=
    {
        {
            (char *)"hh",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"mm",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"ss",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode time1_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"time1", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        time1_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for time1*/

    if (is_initialized) {
        return &time1_g_tc;
    }


    time1_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    time1_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    time1_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &time1_g_tc;
}


RTIBool time1_initialize(
    time1* sample) {
  return time1_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool time1_initialize_ex(
    time1* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->hh)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->mm)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->ss)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void time1_finalize(
    time1* sample)
{
    time1_finalize_ex(sample,RTI_TRUE);
}
        
void time1_finalize_ex(
    time1* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool time1_copy(
    time1* dst,
    const time1* src)
{        

    if (!RTICdrType_copyChar(
        &dst->hh, &src->hh)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->mm, &src->mm)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->ss, &src->ss)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'time1' sequence class.
 */
#define T time1
#define TSeq time1Seq
#define T_initialize_ex time1_initialize_ex
#define T_finalize_ex   time1_finalize_ex
#define T_copy       time1_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *time2TYPENAME = "time2";

DDS_TypeCode* time2_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member time2_g_tc_members[4]=
    {
        {
            (char *)"hh",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"mm",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"ss",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"ms",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode time2_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"time2", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        4, /* Number of members */
        time2_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for time2*/

    if (is_initialized) {
        return &time2_g_tc;
    }


    time2_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    time2_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    time2_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    time2_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &time2_g_tc;
}


RTIBool time2_initialize(
    time2* sample) {
  return time2_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool time2_initialize_ex(
    time2* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->hh)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->mm)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->ss)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->ms)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void time2_finalize(
    time2* sample)
{
    time2_finalize_ex(sample,RTI_TRUE);
}
        
void time2_finalize_ex(
    time2* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool time2_copy(
    time2* dst,
    const time2* src)
{        

    if (!RTICdrType_copyChar(
        &dst->hh, &src->hh)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->mm, &src->mm)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->ss, &src->ss)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->ms, &src->ms)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'time2' sequence class.
 */
#define T time2
#define TSeq time2Seq
#define T_initialize_ex time2_initialize_ex
#define T_finalize_ex   time2_finalize_ex
#define T_copy       time2_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *coordiSysTYPENAME = "coordiSys";

DDS_TypeCode* coordiSys_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member coordiSys_g_tc_members[2]=
    {
        {
            (char *)"latitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"longitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode coordiSys_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"coordiSys", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        coordiSys_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for coordiSys*/

    if (is_initialized) {
        return &coordiSys_g_tc;
    }


    coordiSys_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    coordiSys_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &coordiSys_g_tc;
}


RTIBool coordiSys_initialize(
    coordiSys* sample) {
  return coordiSys_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool coordiSys_initialize_ex(
    coordiSys* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->latitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->longitude)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void coordiSys_finalize(
    coordiSys* sample)
{
    coordiSys_finalize_ex(sample,RTI_TRUE);
}
        
void coordiSys_finalize_ex(
    coordiSys* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool coordiSys_copy(
    coordiSys* dst,
    const coordiSys* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->latitude, &src->latitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->longitude, &src->longitude)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'coordiSys' sequence class.
 */
#define T coordiSys
#define TSeq coordiSysSeq
#define T_initialize_ex coordiSys_initialize_ex
#define T_finalize_ex   coordiSys_finalize_ex
#define T_copy       coordiSys_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *coordiHSysTYPENAME = "coordiHSys";

DDS_TypeCode* coordiHSys_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member coordiHSys_g_tc_members[3]=
    {
        {
            (char *)"latitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"longitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"hgt",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode coordiHSys_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"coordiHSys", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        coordiHSys_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for coordiHSys*/

    if (is_initialized) {
        return &coordiHSys_g_tc;
    }


    coordiHSys_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    coordiHSys_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    coordiHSys_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &coordiHSys_g_tc;
}


RTIBool coordiHSys_initialize(
    coordiHSys* sample) {
  return coordiHSys_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool coordiHSys_initialize_ex(
    coordiHSys* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->latitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->longitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->hgt)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void coordiHSys_finalize(
    coordiHSys* sample)
{
    coordiHSys_finalize_ex(sample,RTI_TRUE);
}
        
void coordiHSys_finalize_ex(
    coordiHSys* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool coordiHSys_copy(
    coordiHSys* dst,
    const coordiHSys* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->latitude, &src->latitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->longitude, &src->longitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->hgt, &src->hgt)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'coordiHSys' sequence class.
 */
#define T coordiHSys
#define TSeq coordiHSysSeq
#define T_initialize_ex coordiHSys_initialize_ex
#define T_finalize_ex   coordiHSys_finalize_ex
#define T_copy       coordiHSys_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *coordiRSysTYPENAME = "coordiRSys";

DDS_TypeCode* coordiRSys_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member coordiRSys_g_tc_members[3]=
    {
        {
            (char *)"latitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"longitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"radius",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode coordiRSys_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"coordiRSys", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        coordiRSys_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for coordiRSys*/

    if (is_initialized) {
        return &coordiRSys_g_tc;
    }


    coordiRSys_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    coordiRSys_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    coordiRSys_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

    is_initialized = RTI_TRUE;

    return &coordiRSys_g_tc;
}


RTIBool coordiRSys_initialize(
    coordiRSys* sample) {
  return coordiRSys_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool coordiRSys_initialize_ex(
    coordiRSys* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->latitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->longitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->radius)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void coordiRSys_finalize(
    coordiRSys* sample)
{
    coordiRSys_finalize_ex(sample,RTI_TRUE);
}
        
void coordiRSys_finalize_ex(
    coordiRSys* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool coordiRSys_copy(
    coordiRSys* dst,
    const coordiRSys* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->latitude, &src->latitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->longitude, &src->longitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->radius, &src->radius)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'coordiRSys' sequence class.
 */
#define T coordiRSys
#define TSeq coordiRSysSeq
#define T_initialize_ex coordiRSys_initialize_ex
#define T_finalize_ex   coordiRSys_finalize_ex
#define T_copy       coordiRSys_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *rectSysTYPENAME = "rectSys";

DDS_TypeCode* rectSys_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member rectSys_g_tc_members[2]=
    {
        {
            (char *)"x",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"z",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode rectSys_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"rectSys", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        rectSys_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for rectSys*/

    if (is_initialized) {
        return &rectSys_g_tc;
    }


    rectSys_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    rectSys_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &rectSys_g_tc;
}


RTIBool rectSys_initialize(
    rectSys* sample) {
  return rectSys_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool rectSys_initialize_ex(
    rectSys* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->x)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->z)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void rectSys_finalize(
    rectSys* sample)
{
    rectSys_finalize_ex(sample,RTI_TRUE);
}
        
void rectSys_finalize_ex(
    rectSys* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool rectSys_copy(
    rectSys* dst,
    const rectSys* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->x, &src->x)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->z, &src->z)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'rectSys' sequence class.
 */
#define T rectSys
#define TSeq rectSysSeq
#define T_initialize_ex rectSys_initialize_ex
#define T_finalize_ex   rectSys_finalize_ex
#define T_copy       rectSys_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *rectHSysTYPENAME = "rectHSys";

DDS_TypeCode* rectHSys_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member rectHSys_g_tc_members[3]=
    {
        {
            (char *)"x",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"y",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"z",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode rectHSys_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"rectHSys", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        rectHSys_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for rectHSys*/

    if (is_initialized) {
        return &rectHSys_g_tc;
    }


    rectHSys_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    rectHSys_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    rectHSys_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &rectHSys_g_tc;
}


RTIBool rectHSys_initialize(
    rectHSys* sample) {
  return rectHSys_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool rectHSys_initialize_ex(
    rectHSys* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->x)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->y)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->z)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void rectHSys_finalize(
    rectHSys* sample)
{
    rectHSys_finalize_ex(sample,RTI_TRUE);
}
        
void rectHSys_finalize_ex(
    rectHSys* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool rectHSys_copy(
    rectHSys* dst,
    const rectHSys* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->x, &src->x)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->y, &src->y)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->z, &src->z)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'rectHSys' sequence class.
 */
#define T rectHSys
#define TSeq rectHSysSeq
#define T_initialize_ex rectHSys_initialize_ex
#define T_finalize_ex   rectHSys_finalize_ex
#define T_copy       rectHSys_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *rectRSysTYPENAME = "rectRSys";

DDS_TypeCode* rectRSys_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member rectRSys_g_tc_members[3]=
    {
        {
            (char *)"x",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"z",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"radius",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode rectRSys_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"rectRSys", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        rectRSys_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for rectRSys*/

    if (is_initialized) {
        return &rectRSys_g_tc;
    }


    rectRSys_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    rectRSys_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    rectRSys_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

    is_initialized = RTI_TRUE;

    return &rectRSys_g_tc;
}


RTIBool rectRSys_initialize(
    rectRSys* sample) {
  return rectRSys_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool rectRSys_initialize_ex(
    rectRSys* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->x)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->z)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->radius)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void rectRSys_finalize(
    rectRSys* sample)
{
    rectRSys_finalize_ex(sample,RTI_TRUE);
}
        
void rectRSys_finalize_ex(
    rectRSys* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool rectRSys_copy(
    rectRSys* dst,
    const rectRSys* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->x, &src->x)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->z, &src->z)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->radius, &src->radius)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'rectRSys' sequence class.
 */
#define T rectRSys
#define TSeq rectRSysSeq
#define T_initialize_ex rectRSys_initialize_ex
#define T_finalize_ex   rectRSys_finalize_ex
#define T_copy       rectRSys_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *velocity3DTYPENAME = "velocity3D";

DDS_TypeCode* velocity3D_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member velocity3D_g_tc_members[2]=
    {
        {
            (char *)"hh",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"mm",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode velocity3D_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"velocity3D", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        velocity3D_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for velocity3D*/

    if (is_initialized) {
        return &velocity3D_g_tc;
    }


    velocity3D_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    velocity3D_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &velocity3D_g_tc;
}


RTIBool velocity3D_initialize(
    velocity3D* sample) {
  return velocity3D_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool velocity3D_initialize_ex(
    velocity3D* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->hh)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->mm)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void velocity3D_finalize(
    velocity3D* sample)
{
    velocity3D_finalize_ex(sample,RTI_TRUE);
}
        
void velocity3D_finalize_ex(
    velocity3D* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool velocity3D_copy(
    velocity3D* dst,
    const velocity3D* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->hh, &src->hh)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->mm, &src->mm)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'velocity3D' sequence class.
 */
#define T velocity3D
#define TSeq velocity3DSeq
#define T_initialize_ex velocity3D_initialize_ex
#define T_finalize_ex   velocity3D_finalize_ex
#define T_copy       velocity3D_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *SonarTrackTYPENAME = "SonarTrack";

DDS_TypeCode* SonarTrack_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member SonarTrack_g_tc_members[9]=
    {
        {
            (char *)"cSensor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTargetState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackingMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBearingRate",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSignalToNoiseRation",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fCourse",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode SonarTrack_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"SonarTrack", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        9, /* Number of members */
        SonarTrack_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for SonarTrack*/

    if (is_initialized) {
        return &SonarTrack_g_tc;
    }


    SonarTrack_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    SonarTrack_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    SonarTrack_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    SonarTrack_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    SonarTrack_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    SonarTrack_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    SonarTrack_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    SonarTrack_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    SonarTrack_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &SonarTrack_g_tc;
}


RTIBool SonarTrack_initialize(
    SonarTrack* sample) {
  return SonarTrack_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool SonarTrack_initialize_ex(
    SonarTrack* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cSensor)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTargetState)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackingMode)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fBearingRate)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSignalToNoiseRation)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fCourse)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSpeed)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void SonarTrack_finalize(
    SonarTrack* sample)
{
    SonarTrack_finalize_ex(sample,RTI_TRUE);
}
        
void SonarTrack_finalize_ex(
    SonarTrack* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool SonarTrack_copy(
    SonarTrack* dst,
    const SonarTrack* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cSensor, &src->cSensor)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTargetState, &src->cTargetState)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackingMode, &src->cTrackingMode)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBearing, &src->fBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBearingRate, &src->fBearingRate)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSignalToNoiseRation, &src->fSignalToNoiseRation)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fCourse, &src->fCourse)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSpeed, &src->fSpeed)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'SonarTrack' sequence class.
 */
#define T SonarTrack
#define TSeq SonarTrackSeq
#define T_initialize_ex SonarTrack_initialize_ex
#define T_finalize_ex   SonarTrack_finalize_ex
#define T_copy       SonarTrack_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *stWakeTYPENAME = "stWake";

DDS_TypeCode* stWake_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode stWake_g_tc_dLat_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,30,NULL,NULL);
    static DDS_TypeCode stWake_g_tc_dLon_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,30,NULL,NULL);

    static DDS_TypeCode_Member stWake_g_tc_members[4]=
    {
        {
            (char *)"dLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nLatIndex",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nLonIndex",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode stWake_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"stWake", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        4, /* Number of members */
        stWake_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for stWake*/

    if (is_initialized) {
        return &stWake_g_tc;
    }

    stWake_g_tc_dLat_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    stWake_g_tc_dLon_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    stWake_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&stWake_g_tc_dLat_array;
    stWake_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&stWake_g_tc_dLon_array;
    stWake_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    stWake_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &stWake_g_tc;
}


RTIBool stWake_initialize(
    stWake* sample) {
  return stWake_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool stWake_initialize_ex(
    stWake* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */

    
    if (!RTICdrType_initArray(
        sample->dLat, (30), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->dLon, (30), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initLong(&sample->nLatIndex)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nLonIndex)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void stWake_finalize(
    stWake* sample)
{
    stWake_finalize_ex(sample,RTI_TRUE);
}
        
void stWake_finalize_ex(
    stWake* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool stWake_copy(
    stWake* dst,
    const stWake* src)
{        

    if (!RTICdrType_copyArray(
        dst->dLat, src->dLat, (30), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->dLon, src->dLon, (30), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nLatIndex, &src->nLatIndex)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nLonIndex, &src->nLonIndex)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'stWake' sequence class.
 */
#define T stWake
#define TSeq stWakeSeq
#define T_initialize_ex stWake_initialize_ex
#define T_finalize_ex   stWake_finalize_ex
#define T_copy       stWake_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *stSubSysTrackIDTYPENAME = "stSubSysTrackID";

DDS_TypeCode* stSubSysTrackID_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member stSubSysTrackID_g_tc_members[15]=
    {
        {
            (char *)"nTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nPrsTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nCasBdtTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nFasBdtTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nCasDemTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nFasLdtTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nFasDemTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nNavrTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nPeriTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nOmsTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nManTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nIpsTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nEsmTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nLinkTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode stSubSysTrackID_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"stSubSysTrackID", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        15, /* Number of members */
        stSubSysTrackID_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for stSubSysTrackID*/

    if (is_initialized) {
        return &stSubSysTrackID_g_tc;
    }


    stSubSysTrackID_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    stSubSysTrackID_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;

    is_initialized = RTI_TRUE;

    return &stSubSysTrackID_g_tc;
}


RTIBool stSubSysTrackID_initialize(
    stSubSysTrackID* sample) {
  return stSubSysTrackID_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool stSubSysTrackID_initialize_ex(
    stSubSysTrackID* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->nTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nPrsTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nCasBdtTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nFasBdtTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nCasDemTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nFasLdtTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nFasDemTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nNavrTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nPeriTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nOmsTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nManTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nTorpTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nIpsTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nEsmTrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nLinkTrkNo)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void stSubSysTrackID_finalize(
    stSubSysTrackID* sample)
{
    stSubSysTrackID_finalize_ex(sample,RTI_TRUE);
}
        
void stSubSysTrackID_finalize_ex(
    stSubSysTrackID* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool stSubSysTrackID_copy(
    stSubSysTrackID* dst,
    const stSubSysTrackID* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->nTrkNo, &src->nTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nPrsTrkNo, &src->nPrsTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nCasBdtTrkNo, &src->nCasBdtTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nFasBdtTrkNo, &src->nFasBdtTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nCasDemTrkNo, &src->nCasDemTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nFasLdtTrkNo, &src->nFasLdtTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nFasDemTrkNo, &src->nFasDemTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nNavrTrkNo, &src->nNavrTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nPeriTrkNo, &src->nPeriTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nOmsTrkNo, &src->nOmsTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nManTrkNo, &src->nManTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nTorpTrkNo, &src->nTorpTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nIpsTrkNo, &src->nIpsTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nEsmTrkNo, &src->nEsmTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nLinkTrkNo, &src->nLinkTrkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'stSubSysTrackID' sequence class.
 */
#define T stSubSysTrackID
#define TSeq stSubSysTrackIDSeq
#define T_initialize_ex stSubSysTrackID_initialize_ex
#define T_finalize_ex   stSubSysTrackID_finalize_ex
#define T_copy       stSubSysTrackID_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *stFullTimeTYPENAME = "stFullTime";

DDS_TypeCode* stFullTime_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member stFullTime_g_tc_members[7]=
    {
        {
            (char *)"year",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"month",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"day",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"hour",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"minute",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sec",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"msec",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode stFullTime_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"stFullTime", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        7, /* Number of members */
        stFullTime_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for stFullTime*/

    if (is_initialized) {
        return &stFullTime_g_tc;
    }


    stFullTime_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    stFullTime_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    stFullTime_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    stFullTime_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    stFullTime_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    stFullTime_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    stFullTime_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &stFullTime_g_tc;
}


RTIBool stFullTime_initialize(
    stFullTime* sample) {
  return stFullTime_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool stFullTime_initialize_ex(
    stFullTime* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedShort(&sample->year)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->month)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->day)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->hour)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->minute)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->sec)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->msec)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void stFullTime_finalize(
    stFullTime* sample)
{
    stFullTime_finalize_ex(sample,RTI_TRUE);
}
        
void stFullTime_finalize_ex(
    stFullTime* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool stFullTime_copy(
    stFullTime* dst,
    const stFullTime* src)
{        

    if (!RTICdrType_copyUnsignedShort(
        &dst->year, &src->year)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->month, &src->month)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->day, &src->day)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->hour, &src->hour)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->minute, &src->minute)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->sec, &src->sec)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->msec, &src->msec)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'stFullTime' sequence class.
 */
#define T stFullTime
#define TSeq stFullTimeSeq
#define T_initialize_ex stFullTime_initialize_ex
#define T_finalize_ex   stFullTime_finalize_ex
#define T_copy       stFullTime_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_OSM_SENSORSTATETYPENAME = "DMSG_OSM_SENSORSTATE";

DDS_TypeCode* DMSG_OSM_SENSORSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_OSM_SENSORSTATE_g_tc_members[5]=
    {
        {
            (char *)"nTrackRadarID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bInterFaceInfo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bAvailable",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bCh1_available",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bCh2_available",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_OSM_SENSORSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_OSM_SENSORSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        5, /* Number of members */
        DMSG_OSM_SENSORSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_OSM_SENSORSTATE*/

    if (is_initialized) {
        return &DMSG_OSM_SENSORSTATE_g_tc;
    }


    DMSG_OSM_SENSORSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_OSM_SENSORSTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_OSM_SENSORSTATE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_OSM_SENSORSTATE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_OSM_SENSORSTATE_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;

    is_initialized = RTI_TRUE;

    return &DMSG_OSM_SENSORSTATE_g_tc;
}


RTIBool DMSG_OSM_SENSORSTATE_initialize(
    DMSG_OSM_SENSORSTATE* sample) {
  return DMSG_OSM_SENSORSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_OSM_SENSORSTATE_initialize_ex(
    DMSG_OSM_SENSORSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nTrackRadarID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bInterFaceInfo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bAvailable)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bCh1_available)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bCh2_available)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_OSM_SENSORSTATE_finalize(
    DMSG_OSM_SENSORSTATE* sample)
{
    DMSG_OSM_SENSORSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_OSM_SENSORSTATE_finalize_ex(
    DMSG_OSM_SENSORSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_OSM_SENSORSTATE_copy(
    DMSG_OSM_SENSORSTATE* dst,
    const DMSG_OSM_SENSORSTATE* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nTrackRadarID, &src->nTrackRadarID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bInterFaceInfo, &src->bInterFaceInfo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bAvailable, &src->bAvailable)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bCh1_available, &src->bCh1_available)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bCh2_available, &src->bCh2_available)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_OSM_SENSORSTATE' sequence class.
 */
#define T DMSG_OSM_SENSORSTATE
#define TSeq DMSG_OSM_SENSORSTATESeq
#define T_initialize_ex DMSG_OSM_SENSORSTATE_initialize_ex
#define T_finalize_ex   DMSG_OSM_SENSORSTATE_finalize_ex
#define T_copy       DMSG_OSM_SENSORSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_OSM_WEAPONSTATETYPENAME = "DMSG_OSM_WEAPONSTATE";

DDS_TypeCode* DMSG_OSM_WEAPONSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_OSM_WEAPONSTATE_g_tc_members[3]=
    {
        {
            (char *)"nWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bInterFace",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bAvailable",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_OSM_WEAPONSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_OSM_WEAPONSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_OSM_WEAPONSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_OSM_WEAPONSTATE*/

    if (is_initialized) {
        return &DMSG_OSM_WEAPONSTATE_g_tc;
    }


    DMSG_OSM_WEAPONSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_OSM_WEAPONSTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_OSM_WEAPONSTATE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;

    is_initialized = RTI_TRUE;

    return &DMSG_OSM_WEAPONSTATE_g_tc;
}


RTIBool DMSG_OSM_WEAPONSTATE_initialize(
    DMSG_OSM_WEAPONSTATE* sample) {
  return DMSG_OSM_WEAPONSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_OSM_WEAPONSTATE_initialize_ex(
    DMSG_OSM_WEAPONSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bInterFace)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bAvailable)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_OSM_WEAPONSTATE_finalize(
    DMSG_OSM_WEAPONSTATE* sample)
{
    DMSG_OSM_WEAPONSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_OSM_WEAPONSTATE_finalize_ex(
    DMSG_OSM_WEAPONSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_OSM_WEAPONSTATE_copy(
    DMSG_OSM_WEAPONSTATE* dst,
    const DMSG_OSM_WEAPONSTATE* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nWeaponID, &src->nWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bInterFace, &src->bInterFace)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bAvailable, &src->bAvailable)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_OSM_WEAPONSTATE' sequence class.
 */
#define T DMSG_OSM_WEAPONSTATE
#define TSeq DMSG_OSM_WEAPONSTATESeq
#define T_initialize_ex DMSG_OSM_WEAPONSTATE_initialize_ex
#define T_finalize_ex   DMSG_OSM_WEAPONSTATE_finalize_ex
#define T_copy       DMSG_OSM_WEAPONSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_REQMISSILEENGAGEPLANTYPENAME = "DMSG_HMI_REQMISSILEENGAGEPLAN";

DDS_TypeCode* DMSG_HMI_REQMISSILEENGAGEPLAN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_REQMISSILEENGAGEPLAN_g_tc_members[3]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_REQMISSILEENGAGEPLAN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_REQMISSILEENGAGEPLAN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_REQMISSILEENGAGEPLAN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_REQMISSILEENGAGEPLAN*/

    if (is_initialized) {
        return &DMSG_HMI_REQMISSILEENGAGEPLAN_g_tc;
    }


    DMSG_HMI_REQMISSILEENGAGEPLAN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_REQMISSILEENGAGEPLAN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_REQMISSILEENGAGEPLAN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_REQMISSILEENGAGEPLAN_g_tc;
}


RTIBool DMSG_HMI_REQMISSILEENGAGEPLAN_initialize(
    DMSG_HMI_REQMISSILEENGAGEPLAN* sample) {
  return DMSG_HMI_REQMISSILEENGAGEPLAN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_REQMISSILEENGAGEPLAN_initialize_ex(
    DMSG_HMI_REQMISSILEENGAGEPLAN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_REQMISSILEENGAGEPLAN_finalize(
    DMSG_HMI_REQMISSILEENGAGEPLAN* sample)
{
    DMSG_HMI_REQMISSILEENGAGEPLAN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_REQMISSILEENGAGEPLAN_finalize_ex(
    DMSG_HMI_REQMISSILEENGAGEPLAN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_REQMISSILEENGAGEPLAN_copy(
    DMSG_HMI_REQMISSILEENGAGEPLAN* dst,
    const DMSG_HMI_REQMISSILEENGAGEPLAN* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_REQMISSILEENGAGEPLAN' sequence class.
 */
#define T DMSG_HMI_REQMISSILEENGAGEPLAN
#define TSeq DMSG_HMI_REQMISSILEENGAGEPLANSeq
#define T_initialize_ex DMSG_HMI_REQMISSILEENGAGEPLAN_initialize_ex
#define T_finalize_ex   DMSG_HMI_REQMISSILEENGAGEPLAN_finalize_ex
#define T_copy       DMSG_HMI_REQMISSILEENGAGEPLAN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_SUBHMI_SYSCTRLMODETYPENAME = "DMSG_SUBHMI_SYSCTRLMODE";

DDS_TypeCode* DMSG_SUBHMI_SYSCTRLMODE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_SUBHMI_SYSCTRLMODE_g_tc_members[2]=
    {
        {
            (char *)"consoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"mode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_SUBHMI_SYSCTRLMODE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_SUBHMI_SYSCTRLMODE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_SUBHMI_SYSCTRLMODE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_SUBHMI_SYSCTRLMODE*/

    if (is_initialized) {
        return &DMSG_SUBHMI_SYSCTRLMODE_g_tc;
    }


    DMSG_SUBHMI_SYSCTRLMODE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_SUBHMI_SYSCTRLMODE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;

    is_initialized = RTI_TRUE;

    return &DMSG_SUBHMI_SYSCTRLMODE_g_tc;
}


RTIBool DMSG_SUBHMI_SYSCTRLMODE_initialize(
    DMSG_SUBHMI_SYSCTRLMODE* sample) {
  return DMSG_SUBHMI_SYSCTRLMODE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_SUBHMI_SYSCTRLMODE_initialize_ex(
    DMSG_SUBHMI_SYSCTRLMODE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->consoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->mode)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_SUBHMI_SYSCTRLMODE_finalize(
    DMSG_SUBHMI_SYSCTRLMODE* sample)
{
    DMSG_SUBHMI_SYSCTRLMODE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_SUBHMI_SYSCTRLMODE_finalize_ex(
    DMSG_SUBHMI_SYSCTRLMODE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_SUBHMI_SYSCTRLMODE_copy(
    DMSG_SUBHMI_SYSCTRLMODE* dst,
    const DMSG_SUBHMI_SYSCTRLMODE* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->consoleID, &src->consoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->mode, &src->mode)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_SUBHMI_SYSCTRLMODE' sequence class.
 */
#define T DMSG_SUBHMI_SYSCTRLMODE
#define TSeq DMSG_SUBHMI_SYSCTRLMODESeq
#define T_initialize_ex DMSG_SUBHMI_SYSCTRLMODE_initialize_ex
#define T_finalize_ex   DMSG_SUBHMI_SYSCTRLMODE_finalize_ex
#define T_copy       DMSG_SUBHMI_SYSCTRLMODE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_WEAPONLIMITSETTYPENAME = "DMSG_HMI_WEAPONLIMITSET";

DDS_TypeCode* DMSG_HMI_WEAPONLIMITSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_WEAPONLIMITSET_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponLimit",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_WEAPONLIMITSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_WEAPONLIMITSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_WEAPONLIMITSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_WEAPONLIMITSET*/

    if (is_initialized) {
        return &DMSG_HMI_WEAPONLIMITSET_g_tc;
    }


    DMSG_HMI_WEAPONLIMITSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_WEAPONLIMITSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_WEAPONLIMITSET_g_tc;
}


RTIBool DMSG_HMI_WEAPONLIMITSET_initialize(
    DMSG_HMI_WEAPONLIMITSET* sample) {
  return DMSG_HMI_WEAPONLIMITSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_WEAPONLIMITSET_initialize_ex(
    DMSG_HMI_WEAPONLIMITSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponLimit)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_WEAPONLIMITSET_finalize(
    DMSG_HMI_WEAPONLIMITSET* sample)
{
    DMSG_HMI_WEAPONLIMITSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_WEAPONLIMITSET_finalize_ex(
    DMSG_HMI_WEAPONLIMITSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_WEAPONLIMITSET_copy(
    DMSG_HMI_WEAPONLIMITSET* dst,
    const DMSG_HMI_WEAPONLIMITSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponLimit, &src->cWeaponLimit)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_WEAPONLIMITSET' sequence class.
 */
#define T DMSG_HMI_WEAPONLIMITSET
#define TSeq DMSG_HMI_WEAPONLIMITSETSeq
#define T_initialize_ex DMSG_HMI_WEAPONLIMITSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_WEAPONLIMITSET_finalize_ex
#define T_copy       DMSG_HMI_WEAPONLIMITSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_CREATEMANUALTRACKTYPENAME = "DMSG_HMI_CREATEMANUALTRACK";

DDS_TypeCode* DMSG_HMI_CREATEMANUALTRACK_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_CREATEMANUALTRACK_g_tc_members[10]=
    {
        {
            (char *)"cTrackForm",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackIdentity",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackCategory",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailMajor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailMinor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fCourse",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"positionCHSys",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_CREATEMANUALTRACK_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_CREATEMANUALTRACK", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        10, /* Number of members */
        DMSG_HMI_CREATEMANUALTRACK_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_CREATEMANUALTRACK*/

    if (is_initialized) {
        return &DMSG_HMI_CREATEMANUALTRACK_g_tc;
    }


    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_CREATEMANUALTRACK_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)coordiHSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_CREATEMANUALTRACK_g_tc;
}


RTIBool DMSG_HMI_CREATEMANUALTRACK_initialize(
    DMSG_HMI_CREATEMANUALTRACK* sample) {
  return DMSG_HMI_CREATEMANUALTRACK_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_CREATEMANUALTRACK_initialize_ex(
    DMSG_HMI_CREATEMANUALTRACK* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cTrackForm)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackIdentity)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackCategory)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailMajor)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailMinor)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fCourse)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSpeed)) {
        return RTI_FALSE;
    }                
            
    if (!coordiHSys_initialize_ex(&sample->positionCHSys,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_CREATEMANUALTRACK_finalize(
    DMSG_HMI_CREATEMANUALTRACK* sample)
{
    DMSG_HMI_CREATEMANUALTRACK_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_CREATEMANUALTRACK_finalize_ex(
    DMSG_HMI_CREATEMANUALTRACK* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    coordiHSys_finalize_ex(&sample->positionCHSys,deletePointers);
            
}

RTIBool DMSG_HMI_CREATEMANUALTRACK_copy(
    DMSG_HMI_CREATEMANUALTRACK* dst,
    const DMSG_HMI_CREATEMANUALTRACK* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cTrackForm, &src->cTrackForm)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackType, &src->cTrackType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackIdentity, &src->cTrackIdentity)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackCategory, &src->cTrackCategory)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailType, &src->sIdentificationDetailType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailMajor, &src->sIdentificationDetailMajor)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailMinor, &src->sIdentificationDetailMinor)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fCourse, &src->fCourse)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSpeed, &src->fSpeed)) {
        return RTI_FALSE;
    }
            
    if (!coordiHSys_copy(
        &dst->positionCHSys, &src->positionCHSys)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_CREATEMANUALTRACK' sequence class.
 */
#define T DMSG_HMI_CREATEMANUALTRACK
#define TSeq DMSG_HMI_CREATEMANUALTRACKSeq
#define T_initialize_ex DMSG_HMI_CREATEMANUALTRACK_initialize_ex
#define T_finalize_ex   DMSG_HMI_CREATEMANUALTRACK_finalize_ex
#define T_copy       DMSG_HMI_CREATEMANUALTRACK_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TARGETIDENTITYSETTYPENAME = "DMSG_HMI_TARGETIDENTITYSET";

DDS_TypeCode* DMSG_HMI_TARGETIDENTITYSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TARGETIDENTITYSET_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackIdentity",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TARGETIDENTITYSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TARGETIDENTITYSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_TARGETIDENTITYSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TARGETIDENTITYSET*/

    if (is_initialized) {
        return &DMSG_HMI_TARGETIDENTITYSET_g_tc;
    }


    DMSG_HMI_TARGETIDENTITYSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_TARGETIDENTITYSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TARGETIDENTITYSET_g_tc;
}


RTIBool DMSG_HMI_TARGETIDENTITYSET_initialize(
    DMSG_HMI_TARGETIDENTITYSET* sample) {
  return DMSG_HMI_TARGETIDENTITYSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TARGETIDENTITYSET_initialize_ex(
    DMSG_HMI_TARGETIDENTITYSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackIdentity)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TARGETIDENTITYSET_finalize(
    DMSG_HMI_TARGETIDENTITYSET* sample)
{
    DMSG_HMI_TARGETIDENTITYSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TARGETIDENTITYSET_finalize_ex(
    DMSG_HMI_TARGETIDENTITYSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_TARGETIDENTITYSET_copy(
    DMSG_HMI_TARGETIDENTITYSET* dst,
    const DMSG_HMI_TARGETIDENTITYSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackIdentity, &src->cTrackIdentity)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TARGETIDENTITYSET' sequence class.
 */
#define T DMSG_HMI_TARGETIDENTITYSET
#define TSeq DMSG_HMI_TARGETIDENTITYSETSeq
#define T_initialize_ex DMSG_HMI_TARGETIDENTITYSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_TARGETIDENTITYSET_finalize_ex
#define T_copy       DMSG_HMI_TARGETIDENTITYSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TARGETCATEGORYSETTYPENAME = "DMSG_HMI_TARGETCATEGORYSET";

DDS_TypeCode* DMSG_HMI_TARGETCATEGORYSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TARGETCATEGORYSET_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackCategory",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TARGETCATEGORYSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TARGETCATEGORYSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_TARGETCATEGORYSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TARGETCATEGORYSET*/

    if (is_initialized) {
        return &DMSG_HMI_TARGETCATEGORYSET_g_tc;
    }


    DMSG_HMI_TARGETCATEGORYSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_TARGETCATEGORYSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TARGETCATEGORYSET_g_tc;
}


RTIBool DMSG_HMI_TARGETCATEGORYSET_initialize(
    DMSG_HMI_TARGETCATEGORYSET* sample) {
  return DMSG_HMI_TARGETCATEGORYSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TARGETCATEGORYSET_initialize_ex(
    DMSG_HMI_TARGETCATEGORYSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackCategory)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TARGETCATEGORYSET_finalize(
    DMSG_HMI_TARGETCATEGORYSET* sample)
{
    DMSG_HMI_TARGETCATEGORYSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TARGETCATEGORYSET_finalize_ex(
    DMSG_HMI_TARGETCATEGORYSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_TARGETCATEGORYSET_copy(
    DMSG_HMI_TARGETCATEGORYSET* dst,
    const DMSG_HMI_TARGETCATEGORYSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackCategory, &src->cTrackCategory)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TARGETCATEGORYSET' sequence class.
 */
#define T DMSG_HMI_TARGETCATEGORYSET
#define TSeq DMSG_HMI_TARGETCATEGORYSETSeq
#define T_initialize_ex DMSG_HMI_TARGETCATEGORYSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_TARGETCATEGORYSET_finalize_ex
#define T_copy       DMSG_HMI_TARGETCATEGORYSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TARGETNAMESETTYPENAME = "DMSG_HMI_TARGETNAMESET";

DDS_TypeCode* DMSG_HMI_TARGETNAMESET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_HMI_TARGETNAMESET_g_tc_cTrackName_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,30,NULL,NULL);

    static DDS_TypeCode_Member DMSG_HMI_TARGETNAMESET_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackName",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TARGETNAMESET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TARGETNAMESET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_TARGETNAMESET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TARGETNAMESET*/

    if (is_initialized) {
        return &DMSG_HMI_TARGETNAMESET_g_tc;
    }

    DMSG_HMI_TARGETNAMESET_g_tc_cTrackName_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    DMSG_HMI_TARGETNAMESET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_TARGETNAMESET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DMSG_HMI_TARGETNAMESET_g_tc_cTrackName_array;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TARGETNAMESET_g_tc;
}


RTIBool DMSG_HMI_TARGETNAMESET_initialize(
    DMSG_HMI_TARGETNAMESET* sample) {
  return DMSG_HMI_TARGETNAMESET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TARGETNAMESET_initialize_ex(
    DMSG_HMI_TARGETNAMESET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->cTrackName, (30), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_TARGETNAMESET_finalize(
    DMSG_HMI_TARGETNAMESET* sample)
{
    DMSG_HMI_TARGETNAMESET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TARGETNAMESET_finalize_ex(
    DMSG_HMI_TARGETNAMESET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_TARGETNAMESET_copy(
    DMSG_HMI_TARGETNAMESET* dst,
    const DMSG_HMI_TARGETNAMESET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cTrackName, src->cTrackName, (30), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TARGETNAMESET' sequence class.
 */
#define T DMSG_HMI_TARGETNAMESET
#define TSeq DMSG_HMI_TARGETNAMESETSeq
#define T_initialize_ex DMSG_HMI_TARGETNAMESET_initialize_ex
#define T_finalize_ex   DMSG_HMI_TARGETNAMESET_finalize_ex
#define T_copy       DMSG_HMI_TARGETNAMESET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ENGAGESETTYPENAME = "DMSG_HMI_ENGAGESET";

DDS_TypeCode* DMSG_HMI_ENGAGESET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ENGAGESET_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ENGAGESET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ENGAGESET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_ENGAGESET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ENGAGESET*/

    if (is_initialized) {
        return &DMSG_HMI_ENGAGESET_g_tc;
    }


    DMSG_HMI_ENGAGESET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_ENGAGESET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ENGAGESET_g_tc;
}


RTIBool DMSG_HMI_ENGAGESET_initialize(
    DMSG_HMI_ENGAGESET* sample) {
  return DMSG_HMI_ENGAGESET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ENGAGESET_initialize_ex(
    DMSG_HMI_ENGAGESET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cEngageState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_ENGAGESET_finalize(
    DMSG_HMI_ENGAGESET* sample)
{
    DMSG_HMI_ENGAGESET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ENGAGESET_finalize_ex(
    DMSG_HMI_ENGAGESET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_ENGAGESET_copy(
    DMSG_HMI_ENGAGESET* dst,
    const DMSG_HMI_ENGAGESET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageState, &src->cEngageState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ENGAGESET' sequence class.
 */
#define T DMSG_HMI_ENGAGESET
#define TSeq DMSG_HMI_ENGAGESETSeq
#define T_initialize_ex DMSG_HMI_ENGAGESET_initialize_ex
#define T_finalize_ex   DMSG_HMI_ENGAGESET_finalize_ex
#define T_copy       DMSG_HMI_ENGAGESET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_MANUALSELECTSETTYPENAME = "DMSG_HMI_MANUALSELECTSET";

DDS_TypeCode* DMSG_HMI_MANUALSELECTSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_MANUALSELECTSET_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cThreatEvaluation",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_MANUALSELECTSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_MANUALSELECTSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_MANUALSELECTSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_MANUALSELECTSET*/

    if (is_initialized) {
        return &DMSG_HMI_MANUALSELECTSET_g_tc;
    }


    DMSG_HMI_MANUALSELECTSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_MANUALSELECTSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_MANUALSELECTSET_g_tc;
}


RTIBool DMSG_HMI_MANUALSELECTSET_initialize(
    DMSG_HMI_MANUALSELECTSET* sample) {
  return DMSG_HMI_MANUALSELECTSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_MANUALSELECTSET_initialize_ex(
    DMSG_HMI_MANUALSELECTSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cThreatEvaluation)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_MANUALSELECTSET_finalize(
    DMSG_HMI_MANUALSELECTSET* sample)
{
    DMSG_HMI_MANUALSELECTSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_MANUALSELECTSET_finalize_ex(
    DMSG_HMI_MANUALSELECTSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_MANUALSELECTSET_copy(
    DMSG_HMI_MANUALSELECTSET* dst,
    const DMSG_HMI_MANUALSELECTSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cThreatEvaluation, &src->cThreatEvaluation)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_MANUALSELECTSET' sequence class.
 */
#define T DMSG_HMI_MANUALSELECTSET
#define TSeq DMSG_HMI_MANUALSELECTSETSeq
#define T_initialize_ex DMSG_HMI_MANUALSELECTSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_MANUALSELECTSET_finalize_ex
#define T_copy       DMSG_HMI_MANUALSELECTSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_IDENTITYDETAILSETTYPENAME = "DMSG_HMI_IDENTITYDETAILSET";

DDS_TypeCode* DMSG_HMI_IDENTITYDETAILSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_IDENTITYDETAILSET_g_tc_members[4]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailMajor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailMinor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_IDENTITYDETAILSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_IDENTITYDETAILSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        4, /* Number of members */
        DMSG_HMI_IDENTITYDETAILSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_IDENTITYDETAILSET*/

    if (is_initialized) {
        return &DMSG_HMI_IDENTITYDETAILSET_g_tc;
    }


    DMSG_HMI_IDENTITYDETAILSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_IDENTITYDETAILSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_IDENTITYDETAILSET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_IDENTITYDETAILSET_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_IDENTITYDETAILSET_g_tc;
}


RTIBool DMSG_HMI_IDENTITYDETAILSET_initialize(
    DMSG_HMI_IDENTITYDETAILSET* sample) {
  return DMSG_HMI_IDENTITYDETAILSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_IDENTITYDETAILSET_initialize_ex(
    DMSG_HMI_IDENTITYDETAILSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailMajor)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailMinor)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_IDENTITYDETAILSET_finalize(
    DMSG_HMI_IDENTITYDETAILSET* sample)
{
    DMSG_HMI_IDENTITYDETAILSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_IDENTITYDETAILSET_finalize_ex(
    DMSG_HMI_IDENTITYDETAILSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_IDENTITYDETAILSET_copy(
    DMSG_HMI_IDENTITYDETAILSET* dst,
    const DMSG_HMI_IDENTITYDETAILSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailType, &src->sIdentificationDetailType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailMajor, &src->sIdentificationDetailMajor)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailMinor, &src->sIdentificationDetailMinor)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_IDENTITYDETAILSET' sequence class.
 */
#define T DMSG_HMI_IDENTITYDETAILSET
#define TSeq DMSG_HMI_IDENTITYDETAILSETSeq
#define T_initialize_ex DMSG_HMI_IDENTITYDETAILSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_IDENTITYDETAILSET_finalize_ex
#define T_copy       DMSG_HMI_IDENTITYDETAILSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_WEAPONCAPABILITYSETTYPENAME = "DMSG_HMI_WEAPONCAPABILITYSET";

DDS_TypeCode* DMSG_HMI_WEAPONCAPABILITYSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_WEAPONCAPABILITYSET_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sWeaponCapability",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fWeaponMaxRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_WEAPONCAPABILITYSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_WEAPONCAPABILITYSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_WEAPONCAPABILITYSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_WEAPONCAPABILITYSET*/

    if (is_initialized) {
        return &DMSG_HMI_WEAPONCAPABILITYSET_g_tc;
    }


    DMSG_HMI_WEAPONCAPABILITYSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_WEAPONCAPABILITYSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_WEAPONCAPABILITYSET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_WEAPONCAPABILITYSET_g_tc;
}


RTIBool DMSG_HMI_WEAPONCAPABILITYSET_initialize(
    DMSG_HMI_WEAPONCAPABILITYSET* sample) {
  return DMSG_HMI_WEAPONCAPABILITYSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_WEAPONCAPABILITYSET_initialize_ex(
    DMSG_HMI_WEAPONCAPABILITYSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sWeaponCapability)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fWeaponMaxRange)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_WEAPONCAPABILITYSET_finalize(
    DMSG_HMI_WEAPONCAPABILITYSET* sample)
{
    DMSG_HMI_WEAPONCAPABILITYSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_WEAPONCAPABILITYSET_finalize_ex(
    DMSG_HMI_WEAPONCAPABILITYSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_WEAPONCAPABILITYSET_copy(
    DMSG_HMI_WEAPONCAPABILITYSET* dst,
    const DMSG_HMI_WEAPONCAPABILITYSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sWeaponCapability, &src->sWeaponCapability)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fWeaponMaxRange, &src->fWeaponMaxRange)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_WEAPONCAPABILITYSET' sequence class.
 */
#define T DMSG_HMI_WEAPONCAPABILITYSET
#define TSeq DMSG_HMI_WEAPONCAPABILITYSETSeq
#define T_initialize_ex DMSG_HMI_WEAPONCAPABILITYSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_WEAPONCAPABILITYSET_finalize_ex
#define T_copy       DMSG_HMI_WEAPONCAPABILITYSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_DATUMSETTYPENAME = "DMSG_HMI_DATUMSET";

DDS_TypeCode* DMSG_HMI_DATUMSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_DATUMSET_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDatumSpd",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDatumErr",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_DATUMSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_DATUMSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_DATUMSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_DATUMSET*/

    if (is_initialized) {
        return &DMSG_HMI_DATUMSET_g_tc;
    }


    DMSG_HMI_DATUMSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_DATUMSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_DATUMSET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_DATUMSET_g_tc;
}


RTIBool DMSG_HMI_DATUMSET_initialize(
    DMSG_HMI_DATUMSET* sample) {
  return DMSG_HMI_DATUMSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_DATUMSET_initialize_ex(
    DMSG_HMI_DATUMSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDatumSpd)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDatumErr)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_DATUMSET_finalize(
    DMSG_HMI_DATUMSET* sample)
{
    DMSG_HMI_DATUMSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_DATUMSET_finalize_ex(
    DMSG_HMI_DATUMSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_DATUMSET_copy(
    DMSG_HMI_DATUMSET* dst,
    const DMSG_HMI_DATUMSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDatumSpd, &src->fDatumSpd)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDatumErr, &src->fDatumErr)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_DATUMSET' sequence class.
 */
#define T DMSG_HMI_DATUMSET
#define TSeq DMSG_HMI_DATUMSETSeq
#define T_initialize_ex DMSG_HMI_DATUMSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_DATUMSET_finalize_ex
#define T_copy       DMSG_HMI_DATUMSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SYSTRACKDELTYPENAME = "DMSG_HMI_SYSTRACKDEL";

DDS_TypeCode* DMSG_HMI_SYSTRACKDEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SYSTRACKDEL_g_tc_members[1]=
    {
        {
            (char *)"DelTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SYSTRACKDEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SYSTRACKDEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_SYSTRACKDEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SYSTRACKDEL*/

    if (is_initialized) {
        return &DMSG_HMI_SYSTRACKDEL_g_tc;
    }


    DMSG_HMI_SYSTRACKDEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SYSTRACKDEL_g_tc;
}


RTIBool DMSG_HMI_SYSTRACKDEL_initialize(
    DMSG_HMI_SYSTRACKDEL* sample) {
  return DMSG_HMI_SYSTRACKDEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SYSTRACKDEL_initialize_ex(
    DMSG_HMI_SYSTRACKDEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->DelTrkNo)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_SYSTRACKDEL_finalize(
    DMSG_HMI_SYSTRACKDEL* sample)
{
    DMSG_HMI_SYSTRACKDEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SYSTRACKDEL_finalize_ex(
    DMSG_HMI_SYSTRACKDEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SYSTRACKDEL_copy(
    DMSG_HMI_SYSTRACKDEL* dst,
    const DMSG_HMI_SYSTRACKDEL* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->DelTrkNo, &src->DelTrkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SYSTRACKDEL' sequence class.
 */
#define T DMSG_HMI_SYSTRACKDEL
#define TSeq DMSG_HMI_SYSTRACKDELSeq
#define T_initialize_ex DMSG_HMI_SYSTRACKDEL_initialize_ex
#define T_finalize_ex   DMSG_HMI_SYSTRACKDEL_finalize_ex
#define T_copy       DMSG_HMI_SYSTRACKDEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_PAIRINGSETTYPENAME = "DMSG_HMI_PAIRINGSET";

DDS_TypeCode* DMSG_HMI_PAIRINGSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_PAIRINGSET_g_tc_members[3]=
    {
        {
            (char *)"cPairingType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"PairingTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"NetTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_PAIRINGSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_PAIRINGSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_PAIRINGSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_PAIRINGSET*/

    if (is_initialized) {
        return &DMSG_HMI_PAIRINGSET_g_tc;
    }


    DMSG_HMI_PAIRINGSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_PAIRINGSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_PAIRINGSET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_PAIRINGSET_g_tc;
}


RTIBool DMSG_HMI_PAIRINGSET_initialize(
    DMSG_HMI_PAIRINGSET* sample) {
  return DMSG_HMI_PAIRINGSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_PAIRINGSET_initialize_ex(
    DMSG_HMI_PAIRINGSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cPairingType)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->PairingTrkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_initialize_ex(&sample->NetTrkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_PAIRINGSET_finalize(
    DMSG_HMI_PAIRINGSET* sample)
{
    DMSG_HMI_PAIRINGSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_PAIRINGSET_finalize_ex(
    DMSG_HMI_PAIRINGSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->PairingTrkNo,deletePointers);
            
    TrkNoSys_finalize_ex(&sample->NetTrkNo,deletePointers);
            
}

RTIBool DMSG_HMI_PAIRINGSET_copy(
    DMSG_HMI_PAIRINGSET* dst,
    const DMSG_HMI_PAIRINGSET* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cPairingType, &src->cPairingType)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->PairingTrkNo, &src->PairingTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->NetTrkNo, &src->NetTrkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_PAIRINGSET' sequence class.
 */
#define T DMSG_HMI_PAIRINGSET
#define TSeq DMSG_HMI_PAIRINGSETSeq
#define T_initialize_ex DMSG_HMI_PAIRINGSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_PAIRINGSET_finalize_ex
#define T_copy       DMSG_HMI_PAIRINGSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ASSOCIATIONSETTYPENAME = "DMSG_HMI_ASSOCIATIONSET";

DDS_TypeCode* DMSG_HMI_ASSOCIATIONSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ASSOCIATIONSET_g_tc_members[3]=
    {
        {
            (char *)"cAssociationType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"MainTrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"MinortrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ASSOCIATIONSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ASSOCIATIONSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_ASSOCIATIONSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ASSOCIATIONSET*/

    if (is_initialized) {
        return &DMSG_HMI_ASSOCIATIONSET_g_tc;
    }


    DMSG_HMI_ASSOCIATIONSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ASSOCIATIONSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_ASSOCIATIONSET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ASSOCIATIONSET_g_tc;
}


RTIBool DMSG_HMI_ASSOCIATIONSET_initialize(
    DMSG_HMI_ASSOCIATIONSET* sample) {
  return DMSG_HMI_ASSOCIATIONSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ASSOCIATIONSET_initialize_ex(
    DMSG_HMI_ASSOCIATIONSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cAssociationType)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->MainTrkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_initialize_ex(&sample->MinortrkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_ASSOCIATIONSET_finalize(
    DMSG_HMI_ASSOCIATIONSET* sample)
{
    DMSG_HMI_ASSOCIATIONSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ASSOCIATIONSET_finalize_ex(
    DMSG_HMI_ASSOCIATIONSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->MainTrkNo,deletePointers);
            
    TrkNoSys_finalize_ex(&sample->MinortrkNo,deletePointers);
            
}

RTIBool DMSG_HMI_ASSOCIATIONSET_copy(
    DMSG_HMI_ASSOCIATIONSET* dst,
    const DMSG_HMI_ASSOCIATIONSET* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cAssociationType, &src->cAssociationType)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->MainTrkNo, &src->MainTrkNo)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->MinortrkNo, &src->MinortrkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ASSOCIATIONSET' sequence class.
 */
#define T DMSG_HMI_ASSOCIATIONSET
#define TSeq DMSG_HMI_ASSOCIATIONSETSeq
#define T_initialize_ex DMSG_HMI_ASSOCIATIONSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_ASSOCIATIONSET_finalize_ex
#define T_copy       DMSG_HMI_ASSOCIATIONSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_CORRELATIONSETTYPENAME = "DMSG_HMI_CORRELATIONSET";

DDS_TypeCode* DMSG_HMI_CORRELATIONSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_CORRELATIONSET_g_tc_members[2]=
    {
        {
            (char *)"KeeptrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"DeltrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_CORRELATIONSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_CORRELATIONSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_CORRELATIONSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_CORRELATIONSET*/

    if (is_initialized) {
        return &DMSG_HMI_CORRELATIONSET_g_tc;
    }


    DMSG_HMI_CORRELATIONSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_CORRELATIONSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_CORRELATIONSET_g_tc;
}


RTIBool DMSG_HMI_CORRELATIONSET_initialize(
    DMSG_HMI_CORRELATIONSET* sample) {
  return DMSG_HMI_CORRELATIONSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_CORRELATIONSET_initialize_ex(
    DMSG_HMI_CORRELATIONSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->KeeptrkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_initialize_ex(&sample->DeltrkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_CORRELATIONSET_finalize(
    DMSG_HMI_CORRELATIONSET* sample)
{
    DMSG_HMI_CORRELATIONSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_CORRELATIONSET_finalize_ex(
    DMSG_HMI_CORRELATIONSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->KeeptrkNo,deletePointers);
            
    TrkNoSys_finalize_ex(&sample->DeltrkNo,deletePointers);
            
}

RTIBool DMSG_HMI_CORRELATIONSET_copy(
    DMSG_HMI_CORRELATIONSET* dst,
    const DMSG_HMI_CORRELATIONSET* src)
{        

    if (!TrkNoSys_copy(
        &dst->KeeptrkNo, &src->KeeptrkNo)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->DeltrkNo, &src->DeltrkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_CORRELATIONSET' sequence class.
 */
#define T DMSG_HMI_CORRELATIONSET
#define TSeq DMSG_HMI_CORRELATIONSETSeq
#define T_initialize_ex DMSG_HMI_CORRELATIONSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_CORRELATIONSET_finalize_ex
#define T_copy       DMSG_HMI_CORRELATIONSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_CORRELATIONCLEARTYPENAME = "DMSG_HMI_CORRELATIONCLEAR";

DDS_TypeCode* DMSG_HMI_CORRELATIONCLEAR_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_CORRELATIONCLEAR_g_tc_members[1]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_CORRELATIONCLEAR_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_CORRELATIONCLEAR", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_CORRELATIONCLEAR_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_CORRELATIONCLEAR*/

    if (is_initialized) {
        return &DMSG_HMI_CORRELATIONCLEAR_g_tc;
    }


    DMSG_HMI_CORRELATIONCLEAR_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_CORRELATIONCLEAR_g_tc;
}


RTIBool DMSG_HMI_CORRELATIONCLEAR_initialize(
    DMSG_HMI_CORRELATIONCLEAR* sample) {
  return DMSG_HMI_CORRELATIONCLEAR_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_CORRELATIONCLEAR_initialize_ex(
    DMSG_HMI_CORRELATIONCLEAR* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_CORRELATIONCLEAR_finalize(
    DMSG_HMI_CORRELATIONCLEAR* sample)
{
    DMSG_HMI_CORRELATIONCLEAR_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_CORRELATIONCLEAR_finalize_ex(
    DMSG_HMI_CORRELATIONCLEAR* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_CORRELATIONCLEAR_copy(
    DMSG_HMI_CORRELATIONCLEAR* dst,
    const DMSG_HMI_CORRELATIONCLEAR* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_CORRELATIONCLEAR' sequence class.
 */
#define T DMSG_HMI_CORRELATIONCLEAR
#define TSeq DMSG_HMI_CORRELATIONCLEARSeq
#define T_initialize_ex DMSG_HMI_CORRELATIONCLEAR_initialize_ex
#define T_finalize_ex   DMSG_HMI_CORRELATIONCLEAR_finalize_ex
#define T_copy       DMSG_HMI_CORRELATIONCLEAR_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TRACECHANGETYPENAME = "DMSG_HMI_TRACECHANGE";

DDS_TypeCode* DMSG_HMI_TRACECHANGE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TRACECHANGE_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nSensorType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TRACECHANGE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TRACECHANGE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_TRACECHANGE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TRACECHANGE*/

    if (is_initialized) {
        return &DMSG_HMI_TRACECHANGE_g_tc;
    }


    DMSG_HMI_TRACECHANGE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_TRACECHANGE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TRACECHANGE_g_tc;
}


RTIBool DMSG_HMI_TRACECHANGE_initialize(
    DMSG_HMI_TRACECHANGE* sample) {
  return DMSG_HMI_TRACECHANGE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TRACECHANGE_initialize_ex(
    DMSG_HMI_TRACECHANGE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nSensorType)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TRACECHANGE_finalize(
    DMSG_HMI_TRACECHANGE* sample)
{
    DMSG_HMI_TRACECHANGE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TRACECHANGE_finalize_ex(
    DMSG_HMI_TRACECHANGE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_TRACECHANGE_copy(
    DMSG_HMI_TRACECHANGE* dst,
    const DMSG_HMI_TRACECHANGE* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nSensorType, &src->nSensorType)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TRACECHANGE' sequence class.
 */
#define T DMSG_HMI_TRACECHANGE
#define TSeq DMSG_HMI_TRACECHANGESeq
#define T_initialize_ex DMSG_HMI_TRACECHANGE_initialize_ex
#define T_finalize_ex   DMSG_HMI_TRACECHANGE_finalize_ex
#define T_copy       DMSG_HMI_TRACECHANGE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TRACKWEAPONRANGETYPENAME = "DMSG_HMI_TRACKWEAPONRANGE";

DDS_TypeCode* DMSG_HMI_TRACKWEAPONRANGE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TRACKWEAPONRANGE_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TRACKWEAPONRANGE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TRACKWEAPONRANGE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_TRACKWEAPONRANGE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TRACKWEAPONRANGE*/

    if (is_initialized) {
        return &DMSG_HMI_TRACKWEAPONRANGE_g_tc;
    }


    DMSG_HMI_TRACKWEAPONRANGE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_TRACKWEAPONRANGE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TRACKWEAPONRANGE_g_tc;
}


RTIBool DMSG_HMI_TRACKWEAPONRANGE_initialize(
    DMSG_HMI_TRACKWEAPONRANGE* sample) {
  return DMSG_HMI_TRACKWEAPONRANGE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TRACKWEAPONRANGE_initialize_ex(
    DMSG_HMI_TRACKWEAPONRANGE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TRACKWEAPONRANGE_finalize(
    DMSG_HMI_TRACKWEAPONRANGE* sample)
{
    DMSG_HMI_TRACKWEAPONRANGE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TRACKWEAPONRANGE_finalize_ex(
    DMSG_HMI_TRACKWEAPONRANGE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_TRACKWEAPONRANGE_copy(
    DMSG_HMI_TRACKWEAPONRANGE* dst,
    const DMSG_HMI_TRACKWEAPONRANGE* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TRACKWEAPONRANGE' sequence class.
 */
#define T DMSG_HMI_TRACKWEAPONRANGE
#define TSeq DMSG_HMI_TRACKWEAPONRANGESeq
#define T_initialize_ex DMSG_HMI_TRACKWEAPONRANGE_initialize_ex
#define T_finalize_ex   DMSG_HMI_TRACKWEAPONRANGE_finalize_ex
#define T_copy       DMSG_HMI_TRACKWEAPONRANGE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TRACKSENSORRANGETYPENAME = "DMSG_HMI_TRACKSENSORRANGE";

DDS_TypeCode* DMSG_HMI_TRACKSENSORRANGE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TRACKSENSORRANGE_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TRACKSENSORRANGE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TRACKSENSORRANGE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_TRACKSENSORRANGE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TRACKSENSORRANGE*/

    if (is_initialized) {
        return &DMSG_HMI_TRACKSENSORRANGE_g_tc;
    }


    DMSG_HMI_TRACKSENSORRANGE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_TRACKSENSORRANGE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TRACKSENSORRANGE_g_tc;
}


RTIBool DMSG_HMI_TRACKSENSORRANGE_initialize(
    DMSG_HMI_TRACKSENSORRANGE* sample) {
  return DMSG_HMI_TRACKSENSORRANGE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TRACKSENSORRANGE_initialize_ex(
    DMSG_HMI_TRACKSENSORRANGE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TRACKSENSORRANGE_finalize(
    DMSG_HMI_TRACKSENSORRANGE* sample)
{
    DMSG_HMI_TRACKSENSORRANGE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TRACKSENSORRANGE_finalize_ex(
    DMSG_HMI_TRACKSENSORRANGE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_TRACKSENSORRANGE_copy(
    DMSG_HMI_TRACKSENSORRANGE* dst,
    const DMSG_HMI_TRACKSENSORRANGE* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TRACKSENSORRANGE' sequence class.
 */
#define T DMSG_HMI_TRACKSENSORRANGE
#define TSeq DMSG_HMI_TRACKSENSORRANGESeq
#define T_initialize_ex DMSG_HMI_TRACKSENSORRANGE_initialize_ex
#define T_finalize_ex   DMSG_HMI_TRACKSENSORRANGE_finalize_ex
#define T_copy       DMSG_HMI_TRACKSENSORRANGE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ANTIWEAPONWEIGHTTYPENAME = "DMSG_HMI_ANTIWEAPONWEIGHT";

DDS_TypeCode* DMSG_HMI_ANTIWEAPONWEIGHT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ANTIWEAPONWEIGHT_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nWeight",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ANTIWEAPONWEIGHT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ANTIWEAPONWEIGHT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_ANTIWEAPONWEIGHT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ANTIWEAPONWEIGHT*/

    if (is_initialized) {
        return &DMSG_HMI_ANTIWEAPONWEIGHT_g_tc;
    }


    DMSG_HMI_ANTIWEAPONWEIGHT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_ANTIWEAPONWEIGHT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ANTIWEAPONWEIGHT_g_tc;
}


RTIBool DMSG_HMI_ANTIWEAPONWEIGHT_initialize(
    DMSG_HMI_ANTIWEAPONWEIGHT* sample) {
  return DMSG_HMI_ANTIWEAPONWEIGHT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ANTIWEAPONWEIGHT_initialize_ex(
    DMSG_HMI_ANTIWEAPONWEIGHT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initLong(&sample->nWeight)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_ANTIWEAPONWEIGHT_finalize(
    DMSG_HMI_ANTIWEAPONWEIGHT* sample)
{
    DMSG_HMI_ANTIWEAPONWEIGHT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ANTIWEAPONWEIGHT_finalize_ex(
    DMSG_HMI_ANTIWEAPONWEIGHT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_ANTIWEAPONWEIGHT_copy(
    DMSG_HMI_ANTIWEAPONWEIGHT* dst,
    const DMSG_HMI_ANTIWEAPONWEIGHT* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nWeight, &src->nWeight)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ANTIWEAPONWEIGHT' sequence class.
 */
#define T DMSG_HMI_ANTIWEAPONWEIGHT
#define TSeq DMSG_HMI_ANTIWEAPONWEIGHTSeq
#define T_initialize_ex DMSG_HMI_ANTIWEAPONWEIGHT_initialize_ex
#define T_finalize_ex   DMSG_HMI_ANTIWEAPONWEIGHT_finalize_ex
#define T_copy       DMSG_HMI_ANTIWEAPONWEIGHT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TAGSETTYPENAME = "DMSG_HMI_TAGSET";

DDS_TypeCode* DMSG_HMI_TAGSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_HMI_TAGSET_g_tc_cTagSet_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,6,NULL,NULL);

    static DDS_TypeCode_Member DMSG_HMI_TAGSET_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTagSet",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TAGSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TAGSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_TAGSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TAGSET*/

    if (is_initialized) {
        return &DMSG_HMI_TAGSET_g_tc;
    }

    DMSG_HMI_TAGSET_g_tc_cTagSet_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    DMSG_HMI_TAGSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_TAGSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DMSG_HMI_TAGSET_g_tc_cTagSet_array;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TAGSET_g_tc;
}


RTIBool DMSG_HMI_TAGSET_initialize(
    DMSG_HMI_TAGSET* sample) {
  return DMSG_HMI_TAGSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TAGSET_initialize_ex(
    DMSG_HMI_TAGSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->cTagSet, (6), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_TAGSET_finalize(
    DMSG_HMI_TAGSET* sample)
{
    DMSG_HMI_TAGSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TAGSET_finalize_ex(
    DMSG_HMI_TAGSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_TAGSET_copy(
    DMSG_HMI_TAGSET* dst,
    const DMSG_HMI_TAGSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cTagSet, src->cTagSet, (6), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TAGSET' sequence class.
 */
#define T DMSG_HMI_TAGSET
#define TSeq DMSG_HMI_TAGSETSeq
#define T_initialize_ex DMSG_HMI_TAGSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_TAGSET_finalize_ex
#define T_copy       DMSG_HMI_TAGSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SONARSETTYPENAME = "DMSG_HMI_SONARSET";

DDS_TypeCode* DMSG_HMI_SONARSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SONARSET_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cValid",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SONARSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SONARSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_SONARSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SONARSET*/

    if (is_initialized) {
        return &DMSG_HMI_SONARSET_g_tc;
    }


    DMSG_HMI_SONARSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_SONARSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SONARSET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SONARSET_g_tc;
}


RTIBool DMSG_HMI_SONARSET_initialize(
    DMSG_HMI_SONARSET* sample) {
  return DMSG_HMI_SONARSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SONARSET_initialize_ex(
    DMSG_HMI_SONARSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cValid)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_SONARSET_finalize(
    DMSG_HMI_SONARSET* sample)
{
    DMSG_HMI_SONARSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SONARSET_finalize_ex(
    DMSG_HMI_SONARSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SONARSET_copy(
    DMSG_HMI_SONARSET* dst,
    const DMSG_HMI_SONARSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cValid, &src->cValid)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SONARSET' sequence class.
 */
#define T DMSG_HMI_SONARSET
#define TSeq DMSG_HMI_SONARSETSeq
#define T_initialize_ex DMSG_HMI_SONARSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_SONARSET_finalize_ex
#define T_copy       DMSG_HMI_SONARSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_WEAPONSETTYPENAME = "DMSG_HMI_WEAPONSET";

DDS_TypeCode* DMSG_HMI_WEAPONSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_WEAPONSET_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cValid",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_WEAPONSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_WEAPONSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_WEAPONSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_WEAPONSET*/

    if (is_initialized) {
        return &DMSG_HMI_WEAPONSET_g_tc;
    }


    DMSG_HMI_WEAPONSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_WEAPONSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_WEAPONSET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_WEAPONSET_g_tc;
}


RTIBool DMSG_HMI_WEAPONSET_initialize(
    DMSG_HMI_WEAPONSET* sample) {
  return DMSG_HMI_WEAPONSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_WEAPONSET_initialize_ex(
    DMSG_HMI_WEAPONSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cValid)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_WEAPONSET_finalize(
    DMSG_HMI_WEAPONSET* sample)
{
    DMSG_HMI_WEAPONSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_WEAPONSET_finalize_ex(
    DMSG_HMI_WEAPONSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_WEAPONSET_copy(
    DMSG_HMI_WEAPONSET* dst,
    const DMSG_HMI_WEAPONSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cValid, &src->cValid)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_WEAPONSET' sequence class.
 */
#define T DMSG_HMI_WEAPONSET
#define TSeq DMSG_HMI_WEAPONSETSeq
#define T_initialize_ex DMSG_HMI_WEAPONSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_WEAPONSET_finalize_ex
#define T_copy       DMSG_HMI_WEAPONSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SUBCORRELATIONSETTYPENAME = "DMSG_HMI_SUBCORRELATIONSET";

DDS_TypeCode* DMSG_HMI_SUBCORRELATIONSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SUBCORRELATIONSET_g_tc_members[2]=
    {
        {
            (char *)"KeeptrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"DeltrkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SUBCORRELATIONSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SUBCORRELATIONSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_SUBCORRELATIONSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SUBCORRELATIONSET*/

    if (is_initialized) {
        return &DMSG_HMI_SUBCORRELATIONSET_g_tc;
    }


    DMSG_HMI_SUBCORRELATIONSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_SUBCORRELATIONSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SUBCORRELATIONSET_g_tc;
}


RTIBool DMSG_HMI_SUBCORRELATIONSET_initialize(
    DMSG_HMI_SUBCORRELATIONSET* sample) {
  return DMSG_HMI_SUBCORRELATIONSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SUBCORRELATIONSET_initialize_ex(
    DMSG_HMI_SUBCORRELATIONSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->KeeptrkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->DeltrkNo)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_SUBCORRELATIONSET_finalize(
    DMSG_HMI_SUBCORRELATIONSET* sample)
{
    DMSG_HMI_SUBCORRELATIONSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SUBCORRELATIONSET_finalize_ex(
    DMSG_HMI_SUBCORRELATIONSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SUBCORRELATIONSET_copy(
    DMSG_HMI_SUBCORRELATIONSET* dst,
    const DMSG_HMI_SUBCORRELATIONSET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->KeeptrkNo, &src->KeeptrkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->DeltrkNo, &src->DeltrkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SUBCORRELATIONSET' sequence class.
 */
#define T DMSG_HMI_SUBCORRELATIONSET
#define TSeq DMSG_HMI_SUBCORRELATIONSETSeq
#define T_initialize_ex DMSG_HMI_SUBCORRELATIONSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_SUBCORRELATIONSET_finalize_ex
#define T_copy       DMSG_HMI_SUBCORRELATIONSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SUBCORRELATIONCLEARTYPENAME = "DMSG_HMI_SUBCORRELATIONCLEAR";

DDS_TypeCode* DMSG_HMI_SUBCORRELATIONCLEAR_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SUBCORRELATIONCLEAR_g_tc_members[1]=
    {
        {
            (char *)"sSysTrkID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SUBCORRELATIONCLEAR_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SUBCORRELATIONCLEAR", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_SUBCORRELATIONCLEAR_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SUBCORRELATIONCLEAR*/

    if (is_initialized) {
        return &DMSG_HMI_SUBCORRELATIONCLEAR_g_tc;
    }


    DMSG_HMI_SUBCORRELATIONCLEAR_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)stSubSysTrackID_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SUBCORRELATIONCLEAR_g_tc;
}


RTIBool DMSG_HMI_SUBCORRELATIONCLEAR_initialize(
    DMSG_HMI_SUBCORRELATIONCLEAR* sample) {
  return DMSG_HMI_SUBCORRELATIONCLEAR_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SUBCORRELATIONCLEAR_initialize_ex(
    DMSG_HMI_SUBCORRELATIONCLEAR* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!stSubSysTrackID_initialize_ex(&sample->sSysTrkID,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_SUBCORRELATIONCLEAR_finalize(
    DMSG_HMI_SUBCORRELATIONCLEAR* sample)
{
    DMSG_HMI_SUBCORRELATIONCLEAR_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SUBCORRELATIONCLEAR_finalize_ex(
    DMSG_HMI_SUBCORRELATIONCLEAR* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    stSubSysTrackID_finalize_ex(&sample->sSysTrkID,deletePointers);
            
}

RTIBool DMSG_HMI_SUBCORRELATIONCLEAR_copy(
    DMSG_HMI_SUBCORRELATIONCLEAR* dst,
    const DMSG_HMI_SUBCORRELATIONCLEAR* src)
{        

    if (!stSubSysTrackID_copy(
        &dst->sSysTrkID, &src->sSysTrkID)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SUBCORRELATIONCLEAR' sequence class.
 */
#define T DMSG_HMI_SUBCORRELATIONCLEAR
#define TSeq DMSG_HMI_SUBCORRELATIONCLEARSeq
#define T_initialize_ex DMSG_HMI_SUBCORRELATIONCLEAR_initialize_ex
#define T_finalize_ex   DMSG_HMI_SUBCORRELATIONCLEAR_finalize_ex
#define T_copy       DMSG_HMI_SUBCORRELATIONCLEAR_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TM_SYSTRACKDELTYPENAME = "DMSG_TM_SYSTRACKDEL";

DDS_TypeCode* DMSG_TM_SYSTRACKDEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TM_SYSTRACKDEL_g_tc_members[1]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TM_SYSTRACKDEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TM_SYSTRACKDEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_TM_SYSTRACKDEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TM_SYSTRACKDEL*/

    if (is_initialized) {
        return &DMSG_TM_SYSTRACKDEL_g_tc;
    }


    DMSG_TM_SYSTRACKDEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_TM_SYSTRACKDEL_g_tc;
}


RTIBool DMSG_TM_SYSTRACKDEL_initialize(
    DMSG_TM_SYSTRACKDEL* sample) {
  return DMSG_TM_SYSTRACKDEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TM_SYSTRACKDEL_initialize_ex(
    DMSG_TM_SYSTRACKDEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_TM_SYSTRACKDEL_finalize(
    DMSG_TM_SYSTRACKDEL* sample)
{
    DMSG_TM_SYSTRACKDEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TM_SYSTRACKDEL_finalize_ex(
    DMSG_TM_SYSTRACKDEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_TM_SYSTRACKDEL_copy(
    DMSG_TM_SYSTRACKDEL* dst,
    const DMSG_TM_SYSTRACKDEL* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TM_SYSTRACKDEL' sequence class.
 */
#define T DMSG_TM_SYSTRACKDEL
#define TSeq DMSG_TM_SYSTRACKDELSeq
#define T_initialize_ex DMSG_TM_SYSTRACKDEL_initialize_ex
#define T_finalize_ex   DMSG_TM_SYSTRACKDEL_finalize_ex
#define T_copy       DMSG_TM_SYSTRACKDEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TM_SYSTRACKTYPENAME = "DMSG_TM_SYSTRACK";

DDS_TypeCode* DMSG_TM_SYSTRACK_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_TM_SYSTRACK_g_tc_cTrackName_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,30,NULL,NULL);
    static DDS_TypeCode DMSG_TM_SYSTRACK_g_tc_ctag_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,6,NULL,NULL);
    static DDS_TypeCode DMSG_TM_SYSTRACK_g_tc_pairingTrk_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,4,NULL,NULL);
    static DDS_TypeCode DMSG_TM_SYSTRACK_g_tc_associationTrk_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,4,NULL,NULL);

    static DDS_TypeCode_Member DMSG_TM_SYSTRACK_g_tc_members[42]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponLimit",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cThreatEvaluation",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageResult",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nCreatedTimeTag",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nUpdatedTimeTag",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackCategory",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackIdentity",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cIFFMode1",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIFFMode2",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIFFMode3",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIFFModeC",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cIFFMode4",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackName",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sTrackNationality",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackForm",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"position",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"positionCHSys",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackQuality",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponCapability",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fWeaponMaxRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDatumSpd",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDatumErr",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailMajor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailMinor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fCourse",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"ctag",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cLinkAlert",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cMissleCheck",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fElevation",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBearingRate",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cSensorType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fROC",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cLinkState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"pairingTrk",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"associationTrk",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TM_SYSTRACK_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TM_SYSTRACK", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        42, /* Number of members */
        DMSG_TM_SYSTRACK_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TM_SYSTRACK*/

    if (is_initialized) {
        return &DMSG_TM_SYSTRACK_g_tc;
    }

    DMSG_TM_SYSTRACK_g_tc_cTrackName_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_ctag_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_pairingTrk_array._data._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_TM_SYSTRACK_g_tc_associationTrk_array._data._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    DMSG_TM_SYSTRACK_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_TM_SYSTRACK_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_TM_SYSTRACK_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_TM_SYSTRACK_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SYSTRACK_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SYSTRACK_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SYSTRACK_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TM_SYSTRACK_g_tc_cTrackName_array;
    DMSG_TM_SYSTRACK_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SYSTRACK_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)rectHSys_get_typecode();
    DMSG_TM_SYSTRACK_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)coordiHSys_get_typecode();
    DMSG_TM_SYSTRACK_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[25]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SYSTRACK_g_tc_members[26]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SYSTRACK_g_tc_members[27]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SYSTRACK_g_tc_members[28]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[29]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[30]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[31]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[32]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TM_SYSTRACK_g_tc_ctag_array;
    DMSG_TM_SYSTRACK_g_tc_members[33]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[34]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[35]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[36]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[37]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[38]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SYSTRACK_g_tc_members[39]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SYSTRACK_g_tc_members[40]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TM_SYSTRACK_g_tc_pairingTrk_array;
    DMSG_TM_SYSTRACK_g_tc_members[41]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TM_SYSTRACK_g_tc_associationTrk_array;

    is_initialized = RTI_TRUE;

    return &DMSG_TM_SYSTRACK_g_tc;
}


RTIBool DMSG_TM_SYSTRACK_initialize(
    DMSG_TM_SYSTRACK* sample) {
  return DMSG_TM_SYSTRACK_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TM_SYSTRACK_initialize_ex(
    DMSG_TM_SYSTRACK* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cWeaponLimit)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cEngageState)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cThreatEvaluation)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cEngageResult)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nCreatedTimeTag)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nUpdatedTimeTag)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackCategory)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackIdentity)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cIFFMode1)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIFFMode2)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIFFMode3)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIFFModeC)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cIFFMode4)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->cTrackName, (30), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initUnsignedShort(&sample->sTrackNationality)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackForm)) {
        return RTI_FALSE;
    }                
            
    if (!rectHSys_initialize_ex(&sample->position,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!coordiHSys_initialize_ex(&sample->positionCHSys,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cTrackQuality)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponCapability)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fWeaponMaxRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDatumSpd)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDatumErr)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailMajor)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailMinor)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fCourse)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSpeed)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->ctag, (6), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cLinkAlert)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cMissleCheck)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fElevation)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fBearingRate)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cSensorType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fROC)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cLinkState)) {
        return RTI_FALSE;
    }                
            
    
    {
        int i = 0;
        TrkNoSys* elem =
            (TrkNoSys*) &sample->pairingTrk[0];

        for (i = 0; i < (int)((4)); ++i, ++elem) {
            if (!TrkNoSys_initialize_ex(elem,allocatePointers)) {
                return RTI_FALSE;
            }
        }
    }
            
    
    {
        int i = 0;
        TrkNoSys* elem =
            (TrkNoSys*) &sample->associationTrk[0];

        for (i = 0; i < (int)((4)); ++i, ++elem) {
            if (!TrkNoSys_initialize_ex(elem,allocatePointers)) {
                return RTI_FALSE;
            }
        }
    }
            

    return RTI_TRUE;
}

void DMSG_TM_SYSTRACK_finalize(
    DMSG_TM_SYSTRACK* sample)
{
    DMSG_TM_SYSTRACK_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TM_SYSTRACK_finalize_ex(
    DMSG_TM_SYSTRACK* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
    rectHSys_finalize_ex(&sample->position,deletePointers);
            
    coordiHSys_finalize_ex(&sample->positionCHSys,deletePointers);
            
    
    {
        int i = 0;
        TrkNoSys* elem =
            (TrkNoSys*) &sample->pairingTrk[0];

        for (i = 0; i < (int)((4)); ++i, ++elem) {
            TrkNoSys_finalize_ex(elem,deletePointers);
        }
    }
            
    
    {
        int i = 0;
        TrkNoSys* elem =
            (TrkNoSys*) &sample->associationTrk[0];

        for (i = 0; i < (int)((4)); ++i, ++elem) {
            TrkNoSys_finalize_ex(elem,deletePointers);
        }
    }
            
}

RTIBool DMSG_TM_SYSTRACK_copy(
    DMSG_TM_SYSTRACK* dst,
    const DMSG_TM_SYSTRACK* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponLimit, &src->cWeaponLimit)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageState, &src->cEngageState)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cThreatEvaluation, &src->cThreatEvaluation)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageResult, &src->cEngageResult)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nCreatedTimeTag, &src->nCreatedTimeTag)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nUpdatedTimeTag, &src->nUpdatedTimeTag)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackType, &src->cTrackType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackCategory, &src->cTrackCategory)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackIdentity, &src->cTrackIdentity)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cIFFMode1, &src->cIFFMode1)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIFFMode2, &src->sIFFMode2)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIFFMode3, &src->sIFFMode3)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIFFModeC, &src->sIFFModeC)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cIFFMode4, &src->cIFFMode4)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cTrackName, src->cTrackName, (30), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sTrackNationality, &src->sTrackNationality)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackForm, &src->cTrackForm)) {
        return RTI_FALSE;
    }
            
    if (!rectHSys_copy(
        &dst->position, &src->position)) {
        return RTI_FALSE;
    }
            
    if (!coordiHSys_copy(
        &dst->positionCHSys, &src->positionCHSys)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackQuality, &src->cTrackQuality)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponCapability, &src->cWeaponCapability)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fWeaponMaxRange, &src->fWeaponMaxRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDatumSpd, &src->fDatumSpd)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDatumErr, &src->fDatumErr)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailType, &src->sIdentificationDetailType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailMajor, &src->sIdentificationDetailMajor)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailMinor, &src->sIdentificationDetailMinor)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBearing, &src->fBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fCourse, &src->fCourse)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSpeed, &src->fSpeed)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->ctag, src->ctag, (6), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cLinkAlert, &src->cLinkAlert)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cMissleCheck, &src->cMissleCheck)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fElevation, &src->fElevation)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBearingRate, &src->fBearingRate)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cSensorType, &src->cSensorType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fROC, &src->fROC)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cLinkState, &src->cLinkState)) {
        return RTI_FALSE;
    }
            
    
    {
        int i = 0;
        TrkNoSys* elemOut = (TrkNoSys*) &dst->pairingTrk[0];
        const TrkNoSys* elemIn = (const TrkNoSys*) &src->pairingTrk[0];

        for (i = 0; i < (int)((4));
             ++i, ++elemOut, ++elemIn) {
            if (!TrkNoSys_copy(elemOut,(const TrkNoSys*)elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            
    
    {
        int i = 0;
        TrkNoSys* elemOut = (TrkNoSys*) &dst->associationTrk[0];
        const TrkNoSys* elemIn = (const TrkNoSys*) &src->associationTrk[0];

        for (i = 0; i < (int)((4));
             ++i, ++elemOut, ++elemIn) {
            if (!TrkNoSys_copy(elemOut,(const TrkNoSys*)elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TM_SYSTRACK' sequence class.
 */
#define T DMSG_TM_SYSTRACK
#define TSeq DMSG_TM_SYSTRACKSeq
#define T_initialize_ex DMSG_TM_SYSTRACK_initialize_ex
#define T_finalize_ex   DMSG_TM_SYSTRACK_finalize_ex
#define T_copy       DMSG_TM_SYSTRACK_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TM_SWSTATETYPENAME = "DMSG_TM_SWSTATE";

DDS_TypeCode* DMSG_TM_SWSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TM_SWSTATE_g_tc_members[1]=
    {
        {
            (char *)"cSoftwareState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TM_SWSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TM_SWSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_TM_SWSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TM_SWSTATE*/

    if (is_initialized) {
        return &DMSG_TM_SWSTATE_g_tc;
    }


    DMSG_TM_SWSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TM_SWSTATE_g_tc;
}


RTIBool DMSG_TM_SWSTATE_initialize(
    DMSG_TM_SWSTATE* sample) {
  return DMSG_TM_SWSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TM_SWSTATE_initialize_ex(
    DMSG_TM_SWSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cSoftwareState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TM_SWSTATE_finalize(
    DMSG_TM_SWSTATE* sample)
{
    DMSG_TM_SWSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TM_SWSTATE_finalize_ex(
    DMSG_TM_SWSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TM_SWSTATE_copy(
    DMSG_TM_SWSTATE* dst,
    const DMSG_TM_SWSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cSoftwareState, &src->cSoftwareState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TM_SWSTATE' sequence class.
 */
#define T DMSG_TM_SWSTATE
#define TSeq DMSG_TM_SWSTATESeq
#define T_initialize_ex DMSG_TM_SWSTATE_initialize_ex
#define T_finalize_ex   DMSG_TM_SWSTATE_finalize_ex
#define T_copy       DMSG_TM_SWSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TM_SUBSYSTEMTRACKTYPENAME = "DMSG_TM_SUBSYSTEMTRACK";

DDS_TypeCode* DMSG_TM_SUBSYSTEMTRACK_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_TM_SUBSYSTEMTRACK_g_tc_cTrackName_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,30,NULL,NULL);
    static DDS_TypeCode DMSG_TM_SUBSYSTEMTRACK_g_tc_cTag_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,6,NULL,NULL);

    static DDS_TypeCode_Member DMSG_TM_SUBSYSTEMTRACK_g_tc_members[27]=
    {
        {
            (char *)"sSysTrkID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nRepresentativeSensor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cLinkState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sCreatedTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sUpdatedTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTrackSource",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTrackType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackCategory",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackIdentity",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackName",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailMajor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentificationDetailMinor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTag",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBearingRate",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fCourse",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"positionCHSys",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cSNRatio",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPulseLv",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fAOB",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cSonarValid",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSonarRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponValid",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fWeaponRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TM_SUBSYSTEMTRACK_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TM_SUBSYSTEMTRACK", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        27, /* Number of members */
        DMSG_TM_SUBSYSTEMTRACK_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TM_SUBSYSTEMTRACK*/

    if (is_initialized) {
        return &DMSG_TM_SUBSYSTEMTRACK_g_tc;
    }

    DMSG_TM_SUBSYSTEMTRACK_g_tc_cTrackName_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_cTag_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)stSubSysTrackID_get_typecode();
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)stFullTime_get_typecode();
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)stFullTime_get_typecode();
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TM_SUBSYSTEMTRACK_g_tc_cTrackName_array;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TM_SUBSYSTEMTRACK_g_tc_cTag_array;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)coordiHSys_get_typecode();
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[25]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TM_SUBSYSTEMTRACK_g_tc_members[26]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_TM_SUBSYSTEMTRACK_g_tc;
}


RTIBool DMSG_TM_SUBSYSTEMTRACK_initialize(
    DMSG_TM_SUBSYSTEMTRACK* sample) {
  return DMSG_TM_SUBSYSTEMTRACK_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TM_SUBSYSTEMTRACK_initialize_ex(
    DMSG_TM_SUBSYSTEMTRACK* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!stSubSysTrackID_initialize_ex(&sample->sSysTrkID,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initLong(&sample->nRepresentativeSensor)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cLinkState)) {
        return RTI_FALSE;
    }                
            
    if (!stFullTime_initialize_ex(&sample->sCreatedTime,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!stFullTime_initialize_ex(&sample->sUpdatedTime,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->nTrackSource)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->nTrackType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackCategory)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackIdentity)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->cTrackName, (30), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailMajor)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentificationDetailMinor)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->cTag, (6), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initFloat(&sample->fBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fBearingRate)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fCourse)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSpeed)) {
        return RTI_FALSE;
    }                
            
    if (!coordiHSys_initialize_ex(&sample->positionCHSys,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cSNRatio)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cPulseLv)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fAOB)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cSonarValid)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSonarRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponValid)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fWeaponRange)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TM_SUBSYSTEMTRACK_finalize(
    DMSG_TM_SUBSYSTEMTRACK* sample)
{
    DMSG_TM_SUBSYSTEMTRACK_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TM_SUBSYSTEMTRACK_finalize_ex(
    DMSG_TM_SUBSYSTEMTRACK* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    stSubSysTrackID_finalize_ex(&sample->sSysTrkID,deletePointers);
            
    stFullTime_finalize_ex(&sample->sCreatedTime,deletePointers);
            
    stFullTime_finalize_ex(&sample->sUpdatedTime,deletePointers);
            
    coordiHSys_finalize_ex(&sample->positionCHSys,deletePointers);
            
}

RTIBool DMSG_TM_SUBSYSTEMTRACK_copy(
    DMSG_TM_SUBSYSTEMTRACK* dst,
    const DMSG_TM_SUBSYSTEMTRACK* src)
{        

    if (!stSubSysTrackID_copy(
        &dst->sSysTrkID, &src->sSysTrkID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nRepresentativeSensor, &src->nRepresentativeSensor)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cLinkState, &src->cLinkState)) {
        return RTI_FALSE;
    }
            
    if (!stFullTime_copy(
        &dst->sCreatedTime, &src->sCreatedTime)) {
        return RTI_FALSE;
    }
            
    if (!stFullTime_copy(
        &dst->sUpdatedTime, &src->sUpdatedTime)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->nTrackSource, &src->nTrackSource)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->nTrackType, &src->nTrackType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackCategory, &src->cTrackCategory)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackIdentity, &src->cTrackIdentity)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cTrackName, src->cTrackName, (30), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailType, &src->sIdentificationDetailType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailMajor, &src->sIdentificationDetailMajor)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentificationDetailMinor, &src->sIdentificationDetailMinor)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cTag, src->cTag, (6), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBearing, &src->fBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBearingRate, &src->fBearingRate)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fCourse, &src->fCourse)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSpeed, &src->fSpeed)) {
        return RTI_FALSE;
    }
            
    if (!coordiHSys_copy(
        &dst->positionCHSys, &src->positionCHSys)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cSNRatio, &src->cSNRatio)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cPulseLv, &src->cPulseLv)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fAOB, &src->fAOB)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cSonarValid, &src->cSonarValid)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSonarRange, &src->fSonarRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponValid, &src->cWeaponValid)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fWeaponRange, &src->fWeaponRange)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TM_SUBSYSTEMTRACK' sequence class.
 */
#define T DMSG_TM_SUBSYSTEMTRACK
#define TSeq DMSG_TM_SUBSYSTEMTRACKSeq
#define T_initialize_ex DMSG_TM_SUBSYSTEMTRACK_initialize_ex
#define T_finalize_ex   DMSG_TM_SUBSYSTEMTRACK_finalize_ex
#define T_copy       DMSG_TM_SUBSYSTEMTRACK_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TM_SUBSYSTRACKDELTYPENAME = "DMSG_TM_SUBSYSTRACKDEL";

DDS_TypeCode* DMSG_TM_SUBSYSTRACKDEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TM_SUBSYSTRACKDEL_g_tc_members[1]=
    {
        {
            (char *)"sSysTrkID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TM_SUBSYSTRACKDEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TM_SUBSYSTRACKDEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_TM_SUBSYSTRACKDEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TM_SUBSYSTRACKDEL*/

    if (is_initialized) {
        return &DMSG_TM_SUBSYSTRACKDEL_g_tc;
    }


    DMSG_TM_SUBSYSTRACKDEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)stSubSysTrackID_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_TM_SUBSYSTRACKDEL_g_tc;
}


RTIBool DMSG_TM_SUBSYSTRACKDEL_initialize(
    DMSG_TM_SUBSYSTRACKDEL* sample) {
  return DMSG_TM_SUBSYSTRACKDEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TM_SUBSYSTRACKDEL_initialize_ex(
    DMSG_TM_SUBSYSTRACKDEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!stSubSysTrackID_initialize_ex(&sample->sSysTrkID,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_TM_SUBSYSTRACKDEL_finalize(
    DMSG_TM_SUBSYSTRACKDEL* sample)
{
    DMSG_TM_SUBSYSTRACKDEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TM_SUBSYSTRACKDEL_finalize_ex(
    DMSG_TM_SUBSYSTRACKDEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    stSubSysTrackID_finalize_ex(&sample->sSysTrkID,deletePointers);
            
}

RTIBool DMSG_TM_SUBSYSTRACKDEL_copy(
    DMSG_TM_SUBSYSTRACKDEL* dst,
    const DMSG_TM_SUBSYSTRACKDEL* src)
{        

    if (!stSubSysTrackID_copy(
        &dst->sSysTrkID, &src->sSysTrkID)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TM_SUBSYSTRACKDEL' sequence class.
 */
#define T DMSG_TM_SUBSYSTRACKDEL
#define TSeq DMSG_TM_SUBSYSTRACKDELSeq
#define T_initialize_ex DMSG_TM_SUBSYSTRACKDEL_initialize_ex
#define T_finalize_ex   DMSG_TM_SUBSYSTRACKDEL_finalize_ex
#define T_copy       DMSG_TM_SUBSYSTRACKDEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_WEAPONCTRLTYPENAME = "DMSG_HMI_WEAPONCTRL";

DDS_TypeCode* DMSG_HMI_WEAPONCTRL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_WEAPONCTRL_g_tc_members[1]=
    {
        {
            (char *)"cWeaponCtrl",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_WEAPONCTRL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_WEAPONCTRL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_WEAPONCTRL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_WEAPONCTRL*/

    if (is_initialized) {
        return &DMSG_HMI_WEAPONCTRL_g_tc;
    }


    DMSG_HMI_WEAPONCTRL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_WEAPONCTRL_g_tc;
}


RTIBool DMSG_HMI_WEAPONCTRL_initialize(
    DMSG_HMI_WEAPONCTRL* sample) {
  return DMSG_HMI_WEAPONCTRL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_WEAPONCTRL_initialize_ex(
    DMSG_HMI_WEAPONCTRL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cWeaponCtrl)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_WEAPONCTRL_finalize(
    DMSG_HMI_WEAPONCTRL* sample)
{
    DMSG_HMI_WEAPONCTRL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_WEAPONCTRL_finalize_ex(
    DMSG_HMI_WEAPONCTRL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_WEAPONCTRL_copy(
    DMSG_HMI_WEAPONCTRL* dst,
    const DMSG_HMI_WEAPONCTRL* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cWeaponCtrl, &src->cWeaponCtrl)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_WEAPONCTRL' sequence class.
 */
#define T DMSG_HMI_WEAPONCTRL
#define TSeq DMSG_HMI_WEAPONCTRLSeq
#define T_initialize_ex DMSG_HMI_WEAPONCTRL_initialize_ex
#define T_finalize_ex   DMSG_HMI_WEAPONCTRL_finalize_ex
#define T_copy       DMSG_HMI_WEAPONCTRL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_FASTRESPONSEMODETYPENAME = "DMSG_HMI_FASTRESPONSEMODE";

DDS_TypeCode* DMSG_HMI_FASTRESPONSEMODE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_FASTRESPONSEMODE_g_tc_members[1]=
    {
        {
            (char *)"cFastResponseMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_FASTRESPONSEMODE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_FASTRESPONSEMODE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_FASTRESPONSEMODE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_FASTRESPONSEMODE*/

    if (is_initialized) {
        return &DMSG_HMI_FASTRESPONSEMODE_g_tc;
    }


    DMSG_HMI_FASTRESPONSEMODE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_FASTRESPONSEMODE_g_tc;
}


RTIBool DMSG_HMI_FASTRESPONSEMODE_initialize(
    DMSG_HMI_FASTRESPONSEMODE* sample) {
  return DMSG_HMI_FASTRESPONSEMODE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_FASTRESPONSEMODE_initialize_ex(
    DMSG_HMI_FASTRESPONSEMODE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cFastResponseMode)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_FASTRESPONSEMODE_finalize(
    DMSG_HMI_FASTRESPONSEMODE* sample)
{
    DMSG_HMI_FASTRESPONSEMODE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_FASTRESPONSEMODE_finalize_ex(
    DMSG_HMI_FASTRESPONSEMODE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_FASTRESPONSEMODE_copy(
    DMSG_HMI_FASTRESPONSEMODE* dst,
    const DMSG_HMI_FASTRESPONSEMODE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cFastResponseMode, &src->cFastResponseMode)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_FASTRESPONSEMODE' sequence class.
 */
#define T DMSG_HMI_FASTRESPONSEMODE
#define TSeq DMSG_HMI_FASTRESPONSEMODESeq
#define T_initialize_ex DMSG_HMI_FASTRESPONSEMODE_initialize_ex
#define T_finalize_ex   DMSG_HMI_FASTRESPONSEMODE_finalize_ex
#define T_copy       DMSG_HMI_FASTRESPONSEMODE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_WEAPONUSELIMITTYPENAME = "DMSG_HMI_WEAPONUSELIMIT";

DDS_TypeCode* DMSG_HMI_WEAPONUSELIMIT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_WEAPONUSELIMIT_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponLimit",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_WEAPONUSELIMIT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_WEAPONUSELIMIT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_WEAPONUSELIMIT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_WEAPONUSELIMIT*/

    if (is_initialized) {
        return &DMSG_HMI_WEAPONUSELIMIT_g_tc;
    }


    DMSG_HMI_WEAPONUSELIMIT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_WEAPONUSELIMIT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_WEAPONUSELIMIT_g_tc;
}


RTIBool DMSG_HMI_WEAPONUSELIMIT_initialize(
    DMSG_HMI_WEAPONUSELIMIT* sample) {
  return DMSG_HMI_WEAPONUSELIMIT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_WEAPONUSELIMIT_initialize_ex(
    DMSG_HMI_WEAPONUSELIMIT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cWeaponLimit)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_WEAPONUSELIMIT_finalize(
    DMSG_HMI_WEAPONUSELIMIT* sample)
{
    DMSG_HMI_WEAPONUSELIMIT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_WEAPONUSELIMIT_finalize_ex(
    DMSG_HMI_WEAPONUSELIMIT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_WEAPONUSELIMIT_copy(
    DMSG_HMI_WEAPONUSELIMIT* dst,
    const DMSG_HMI_WEAPONUSELIMIT* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponLimit, &src->cWeaponLimit)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_WEAPONUSELIMIT' sequence class.
 */
#define T DMSG_HMI_WEAPONUSELIMIT
#define TSeq DMSG_HMI_WEAPONUSELIMITSeq
#define T_initialize_ex DMSG_HMI_WEAPONUSELIMIT_initialize_ex
#define T_finalize_ex   DMSG_HMI_WEAPONUSELIMIT_finalize_ex
#define T_copy       DMSG_HMI_WEAPONUSELIMIT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ENGAGEMODESETTYPENAME = "DMSG_HMI_ENGAGEMODESET";

DDS_TypeCode* DMSG_HMI_ENGAGEMODESET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ENGAGEMODESET_g_tc_members[1]=
    {
        {
            (char *)"cMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ENGAGEMODESET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ENGAGEMODESET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_ENGAGEMODESET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ENGAGEMODESET*/

    if (is_initialized) {
        return &DMSG_HMI_ENGAGEMODESET_g_tc;
    }


    DMSG_HMI_ENGAGEMODESET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ENGAGEMODESET_g_tc;
}


RTIBool DMSG_HMI_ENGAGEMODESET_initialize(
    DMSG_HMI_ENGAGEMODESET* sample) {
  return DMSG_HMI_ENGAGEMODESET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ENGAGEMODESET_initialize_ex(
    DMSG_HMI_ENGAGEMODESET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cMode)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_ENGAGEMODESET_finalize(
    DMSG_HMI_ENGAGEMODESET* sample)
{
    DMSG_HMI_ENGAGEMODESET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ENGAGEMODESET_finalize_ex(
    DMSG_HMI_ENGAGEMODESET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_ENGAGEMODESET_copy(
    DMSG_HMI_ENGAGEMODESET* dst,
    const DMSG_HMI_ENGAGEMODESET* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cMode, &src->cMode)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ENGAGEMODESET' sequence class.
 */
#define T DMSG_HMI_ENGAGEMODESET
#define TSeq DMSG_HMI_ENGAGEMODESETSeq
#define T_initialize_ex DMSG_HMI_ENGAGEMODESET_initialize_ex
#define T_finalize_ex   DMSG_HMI_ENGAGEMODESET_finalize_ex
#define T_copy       DMSG_HMI_ENGAGEMODESET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ENGAGEADVICEREQTYPENAME = "DMSG_HMI_ENGAGEADVICEREQ";

DDS_TypeCode* DMSG_HMI_ENGAGEADVICEREQ_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ENGAGEADVICEREQ_g_tc_members[2]=
    {
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ENGAGEADVICEREQ_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ENGAGEADVICEREQ", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_ENGAGEADVICEREQ_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ENGAGEADVICEREQ*/

    if (is_initialized) {
        return &DMSG_HMI_ENGAGEADVICEREQ_g_tc;
    }


    DMSG_HMI_ENGAGEADVICEREQ_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ENGAGEADVICEREQ_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ENGAGEADVICEREQ_g_tc;
}


RTIBool DMSG_HMI_ENGAGEADVICEREQ_initialize(
    DMSG_HMI_ENGAGEADVICEREQ* sample) {
  return DMSG_HMI_ENGAGEADVICEREQ_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ENGAGEADVICEREQ_initialize_ex(
    DMSG_HMI_ENGAGEADVICEREQ* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_ENGAGEADVICEREQ_finalize(
    DMSG_HMI_ENGAGEADVICEREQ* sample)
{
    DMSG_HMI_ENGAGEADVICEREQ_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ENGAGEADVICEREQ_finalize_ex(
    DMSG_HMI_ENGAGEADVICEREQ* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_ENGAGEADVICEREQ_copy(
    DMSG_HMI_ENGAGEADVICEREQ* dst,
    const DMSG_HMI_ENGAGEADVICEREQ* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ENGAGEADVICEREQ' sequence class.
 */
#define T DMSG_HMI_ENGAGEADVICEREQ
#define TSeq DMSG_HMI_ENGAGEADVICEREQSeq
#define T_initialize_ex DMSG_HMI_ENGAGEADVICEREQ_initialize_ex
#define T_finalize_ex   DMSG_HMI_ENGAGEADVICEREQ_finalize_ex
#define T_copy       DMSG_HMI_ENGAGEADVICEREQ_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_THREATDICISIONTYPENAME = "DMSG_HMI_THREATDICISION";

DDS_TypeCode* DMSG_HMI_THREATDICISION_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_THREATDICISION_g_tc_members[9]=
    {
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackIdentity",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fMinRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fMaxRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fMinBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fMaxBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fMinSpd",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fMaxSpd",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fElevation",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_THREATDICISION_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_THREATDICISION", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        9, /* Number of members */
        DMSG_HMI_THREATDICISION_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_THREATDICISION*/

    if (is_initialized) {
        return &DMSG_HMI_THREATDICISION_g_tc;
    }


    DMSG_HMI_THREATDICISION_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_THREATDICISION_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_THREATDICISION_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_THREATDICISION_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_THREATDICISION_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_THREATDICISION_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_THREATDICISION_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_THREATDICISION_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_THREATDICISION_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_THREATDICISION_g_tc;
}


RTIBool DMSG_HMI_THREATDICISION_initialize(
    DMSG_HMI_THREATDICISION* sample) {
  return DMSG_HMI_THREATDICISION_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_THREATDICISION_initialize_ex(
    DMSG_HMI_THREATDICISION* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackIdentity)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fMinRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fMaxRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fMinBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fMaxBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fMinSpd)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fMaxSpd)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fElevation)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_THREATDICISION_finalize(
    DMSG_HMI_THREATDICISION* sample)
{
    DMSG_HMI_THREATDICISION_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_THREATDICISION_finalize_ex(
    DMSG_HMI_THREATDICISION* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_THREATDICISION_copy(
    DMSG_HMI_THREATDICISION* dst,
    const DMSG_HMI_THREATDICISION* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackIdentity, &src->cTrackIdentity)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fMinRange, &src->fMinRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fMaxRange, &src->fMaxRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fMinBearing, &src->fMinBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fMaxBearing, &src->fMaxBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fMinSpd, &src->fMinSpd)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fMaxSpd, &src->fMaxSpd)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fElevation, &src->fElevation)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_THREATDICISION' sequence class.
 */
#define T DMSG_HMI_THREATDICISION
#define TSeq DMSG_HMI_THREATDICISIONSeq
#define T_initialize_ex DMSG_HMI_THREATDICISION_initialize_ex
#define T_finalize_ex   DMSG_HMI_THREATDICISION_finalize_ex
#define T_copy       DMSG_HMI_THREATDICISION_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_WEAPONRANGETYPENAME = "DMSG_HMI_WEAPONRANGE";

DDS_TypeCode* DMSG_HMI_WEAPONRANGE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_WEAPONRANGE_g_tc_members[7]=
    {
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sAirMinRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sAirMaxRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sMinRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sMaxRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sMaxFireRate",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sMaxInventory",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_WEAPONRANGE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_WEAPONRANGE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        7, /* Number of members */
        DMSG_HMI_WEAPONRANGE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_WEAPONRANGE*/

    if (is_initialized) {
        return &DMSG_HMI_WEAPONRANGE_g_tc;
    }


    DMSG_HMI_WEAPONRANGE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_WEAPONRANGE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_WEAPONRANGE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_WEAPONRANGE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_WEAPONRANGE_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_WEAPONRANGE_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_WEAPONRANGE_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_WEAPONRANGE_g_tc;
}


RTIBool DMSG_HMI_WEAPONRANGE_initialize(
    DMSG_HMI_WEAPONRANGE* sample) {
  return DMSG_HMI_WEAPONRANGE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_WEAPONRANGE_initialize_ex(
    DMSG_HMI_WEAPONRANGE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sAirMinRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sAirMaxRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sMinRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sMaxRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sMaxFireRate)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sMaxInventory)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_WEAPONRANGE_finalize(
    DMSG_HMI_WEAPONRANGE* sample)
{
    DMSG_HMI_WEAPONRANGE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_WEAPONRANGE_finalize_ex(
    DMSG_HMI_WEAPONRANGE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_WEAPONRANGE_copy(
    DMSG_HMI_WEAPONRANGE* dst,
    const DMSG_HMI_WEAPONRANGE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sAirMinRange, &src->sAirMinRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sAirMaxRange, &src->sAirMaxRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sMinRange, &src->sMinRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sMaxRange, &src->sMaxRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sMaxFireRate, &src->sMaxFireRate)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sMaxInventory, &src->sMaxInventory)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_WEAPONRANGE' sequence class.
 */
#define T DMSG_HMI_WEAPONRANGE
#define TSeq DMSG_HMI_WEAPONRANGESeq
#define T_initialize_ex DMSG_HMI_WEAPONRANGE_initialize_ex
#define T_finalize_ex   DMSG_HMI_WEAPONRANGE_finalize_ex
#define T_copy       DMSG_HMI_WEAPONRANGE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SENSORRANGETYPENAME = "DMSG_HMI_SENSORRANGE";

DDS_TypeCode* DMSG_HMI_SENSORRANGE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SENSORRANGE_g_tc_members[9]=
    {
        {
            (char *)"cSensorID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sAirMinRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sAirMaxRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sMinRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sMaxRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sAntenna",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sFrequency",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sPulsePeriod",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sPulseWidth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SENSORRANGE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SENSORRANGE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        9, /* Number of members */
        DMSG_HMI_SENSORRANGE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SENSORRANGE*/

    if (is_initialized) {
        return &DMSG_HMI_SENSORRANGE_g_tc;
    }


    DMSG_HMI_SENSORRANGE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SENSORRANGE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_SENSORRANGE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_SENSORRANGE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_SENSORRANGE_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_SENSORRANGE_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_SENSORRANGE_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_SENSORRANGE_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_SENSORRANGE_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SENSORRANGE_g_tc;
}


RTIBool DMSG_HMI_SENSORRANGE_initialize(
    DMSG_HMI_SENSORRANGE* sample) {
  return DMSG_HMI_SENSORRANGE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SENSORRANGE_initialize_ex(
    DMSG_HMI_SENSORRANGE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cSensorID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sAirMinRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sAirMaxRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sMinRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sMaxRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sAntenna)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sFrequency)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sPulsePeriod)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sPulseWidth)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_SENSORRANGE_finalize(
    DMSG_HMI_SENSORRANGE* sample)
{
    DMSG_HMI_SENSORRANGE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SENSORRANGE_finalize_ex(
    DMSG_HMI_SENSORRANGE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SENSORRANGE_copy(
    DMSG_HMI_SENSORRANGE* dst,
    const DMSG_HMI_SENSORRANGE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cSensorID, &src->cSensorID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sAirMinRange, &src->sAirMinRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sAirMaxRange, &src->sAirMaxRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sMinRange, &src->sMinRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sMaxRange, &src->sMaxRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sAntenna, &src->sAntenna)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sFrequency, &src->sFrequency)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sPulsePeriod, &src->sPulsePeriod)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sPulseWidth, &src->sPulseWidth)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SENSORRANGE' sequence class.
 */
#define T DMSG_HMI_SENSORRANGE
#define TSeq DMSG_HMI_SENSORRANGESeq
#define T_initialize_ex DMSG_HMI_SENSORRANGE_initialize_ex
#define T_finalize_ex   DMSG_HMI_SENSORRANGE_finalize_ex
#define T_copy       DMSG_HMI_SENSORRANGE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ENGAGEADVICEMODIFYTYPENAME = "DMSG_HMI_ENGAGEADVICEMODIFY";

DDS_TypeCode* DMSG_HMI_ENGAGEADVICEMODIFY_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ENGAGEADVICEMODIFY_g_tc_members[7]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackRdrID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cRdrType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cChannelID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ENGAGEADVICEMODIFY_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ENGAGEADVICEMODIFY", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        7, /* Number of members */
        DMSG_HMI_ENGAGEADVICEMODIFY_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ENGAGEADVICEMODIFY*/

    if (is_initialized) {
        return &DMSG_HMI_ENGAGEADVICEMODIFY_g_tc;
    }


    DMSG_HMI_ENGAGEADVICEMODIFY_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_ENGAGEADVICEMODIFY_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ENGAGEADVICEMODIFY_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ENGAGEADVICEMODIFY_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ENGAGEADVICEMODIFY_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ENGAGEADVICEMODIFY_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ENGAGEADVICEMODIFY_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ENGAGEADVICEMODIFY_g_tc;
}


RTIBool DMSG_HMI_ENGAGEADVICEMODIFY_initialize(
    DMSG_HMI_ENGAGEADVICEMODIFY* sample) {
  return DMSG_HMI_ENGAGEADVICEMODIFY_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ENGAGEADVICEMODIFY_initialize_ex(
    DMSG_HMI_ENGAGEADVICEMODIFY* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackRdrID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cRdrType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cChannelID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_ENGAGEADVICEMODIFY_finalize(
    DMSG_HMI_ENGAGEADVICEMODIFY* sample)
{
    DMSG_HMI_ENGAGEADVICEMODIFY_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ENGAGEADVICEMODIFY_finalize_ex(
    DMSG_HMI_ENGAGEADVICEMODIFY* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_ENGAGEADVICEMODIFY_copy(
    DMSG_HMI_ENGAGEADVICEMODIFY* dst,
    const DMSG_HMI_ENGAGEADVICEMODIFY* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackRdrID, &src->cTrackRdrID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cRdrType, &src->cRdrType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cChannelID, &src->cChannelID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ENGAGEADVICEMODIFY' sequence class.
 */
#define T DMSG_HMI_ENGAGEADVICEMODIFY
#define TSeq DMSG_HMI_ENGAGEADVICEMODIFYSeq
#define T_initialize_ex DMSG_HMI_ENGAGEADVICEMODIFY_initialize_ex
#define T_finalize_ex   DMSG_HMI_ENGAGEADVICEMODIFY_finalize_ex
#define T_copy       DMSG_HMI_ENGAGEADVICEMODIFY_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_CLEARENGAGEASSIGNTYPENAME = "DMSG_HMI_CLEARENGAGEASSIGN";

DDS_TypeCode* DMSG_HMI_CLEARENGAGEASSIGN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[10]=
    {
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cReleaseType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackRdrID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cRdrType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cChannelID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bUnit",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cUnitID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_CLEARENGAGEASSIGN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_CLEARENGAGEASSIGN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        10, /* Number of members */
        DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_CLEARENGAGEASSIGN*/

    if (is_initialized) {
        return &DMSG_HMI_CLEARENGAGEASSIGN_g_tc;
    }


    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_CLEARENGAGEASSIGN_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_CLEARENGAGEASSIGN_g_tc;
}


RTIBool DMSG_HMI_CLEARENGAGEASSIGN_initialize(
    DMSG_HMI_CLEARENGAGEASSIGN* sample) {
  return DMSG_HMI_CLEARENGAGEASSIGN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_CLEARENGAGEASSIGN_initialize_ex(
    DMSG_HMI_CLEARENGAGEASSIGN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cReleaseType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackRdrID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cRdrType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cChannelID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bUnit)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cUnitID)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_CLEARENGAGEASSIGN_finalize(
    DMSG_HMI_CLEARENGAGEASSIGN* sample)
{
    DMSG_HMI_CLEARENGAGEASSIGN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_CLEARENGAGEASSIGN_finalize_ex(
    DMSG_HMI_CLEARENGAGEASSIGN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_CLEARENGAGEASSIGN_copy(
    DMSG_HMI_CLEARENGAGEASSIGN* dst,
    const DMSG_HMI_CLEARENGAGEASSIGN* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cReleaseType, &src->cReleaseType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackRdrID, &src->cTrackRdrID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cRdrType, &src->cRdrType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cChannelID, &src->cChannelID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bUnit, &src->bUnit)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cUnitID, &src->cUnitID)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_CLEARENGAGEASSIGN' sequence class.
 */
#define T DMSG_HMI_CLEARENGAGEASSIGN
#define TSeq DMSG_HMI_CLEARENGAGEASSIGNSeq
#define T_initialize_ex DMSG_HMI_CLEARENGAGEASSIGN_initialize_ex
#define T_finalize_ex   DMSG_HMI_CLEARENGAGEASSIGN_finalize_ex
#define T_copy       DMSG_HMI_CLEARENGAGEASSIGN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_THREATWEIGHTTYPENAME = "DMSG_HMI_THREATWEIGHT";

DDS_TypeCode* DMSG_HMI_THREATWEIGHT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_THREATWEIGHT_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeight",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_THREATWEIGHT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_THREATWEIGHT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_THREATWEIGHT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_THREATWEIGHT*/

    if (is_initialized) {
        return &DMSG_HMI_THREATWEIGHT_g_tc;
    }


    DMSG_HMI_THREATWEIGHT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_THREATWEIGHT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_THREATWEIGHT_g_tc;
}


RTIBool DMSG_HMI_THREATWEIGHT_initialize(
    DMSG_HMI_THREATWEIGHT* sample) {
  return DMSG_HMI_THREATWEIGHT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_THREATWEIGHT_initialize_ex(
    DMSG_HMI_THREATWEIGHT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cWeight)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_THREATWEIGHT_finalize(
    DMSG_HMI_THREATWEIGHT* sample)
{
    DMSG_HMI_THREATWEIGHT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_THREATWEIGHT_finalize_ex(
    DMSG_HMI_THREATWEIGHT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_THREATWEIGHT_copy(
    DMSG_HMI_THREATWEIGHT* dst,
    const DMSG_HMI_THREATWEIGHT* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeight, &src->cWeight)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_THREATWEIGHT' sequence class.
 */
#define T DMSG_HMI_THREATWEIGHT
#define TSeq DMSG_HMI_THREATWEIGHTSeq
#define T_initialize_ex DMSG_HMI_THREATWEIGHT_initialize_ex
#define T_finalize_ex   DMSG_HMI_THREATWEIGHT_finalize_ex
#define T_copy       DMSG_HMI_THREATWEIGHT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_DEFENSEMODETYPENAME = "DMSG_HMI_DEFENSEMODE";

DDS_TypeCode* DMSG_HMI_DEFENSEMODE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_DEFENSEMODE_g_tc_members[1]=
    {
        {
            (char *)"cDefenseMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_DEFENSEMODE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_DEFENSEMODE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_DEFENSEMODE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_DEFENSEMODE*/

    if (is_initialized) {
        return &DMSG_HMI_DEFENSEMODE_g_tc;
    }


    DMSG_HMI_DEFENSEMODE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_DEFENSEMODE_g_tc;
}


RTIBool DMSG_HMI_DEFENSEMODE_initialize(
    DMSG_HMI_DEFENSEMODE* sample) {
  return DMSG_HMI_DEFENSEMODE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_DEFENSEMODE_initialize_ex(
    DMSG_HMI_DEFENSEMODE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cDefenseMode)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_DEFENSEMODE_finalize(
    DMSG_HMI_DEFENSEMODE* sample)
{
    DMSG_HMI_DEFENSEMODE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_DEFENSEMODE_finalize_ex(
    DMSG_HMI_DEFENSEMODE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_DEFENSEMODE_copy(
    DMSG_HMI_DEFENSEMODE* dst,
    const DMSG_HMI_DEFENSEMODE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cDefenseMode, &src->cDefenseMode)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_DEFENSEMODE' sequence class.
 */
#define T DMSG_HMI_DEFENSEMODE
#define TSeq DMSG_HMI_DEFENSEMODESeq
#define T_initialize_ex DMSG_HMI_DEFENSEMODE_initialize_ex
#define T_finalize_ex   DMSG_HMI_DEFENSEMODE_finalize_ex
#define T_copy       DMSG_HMI_DEFENSEMODE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_FIREPERMITTYPENAME = "DMSG_HMI_FIREPERMIT";

DDS_TypeCode* DMSG_HMI_FIREPERMIT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_FIREPERMIT_g_tc_members[2]=
    {
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFire",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_FIREPERMIT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_FIREPERMIT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_FIREPERMIT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_FIREPERMIT*/

    if (is_initialized) {
        return &DMSG_HMI_FIREPERMIT_g_tc;
    }


    DMSG_HMI_FIREPERMIT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_FIREPERMIT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_FIREPERMIT_g_tc;
}


RTIBool DMSG_HMI_FIREPERMIT_initialize(
    DMSG_HMI_FIREPERMIT* sample) {
  return DMSG_HMI_FIREPERMIT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_FIREPERMIT_initialize_ex(
    DMSG_HMI_FIREPERMIT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFire)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_FIREPERMIT_finalize(
    DMSG_HMI_FIREPERMIT* sample)
{
    DMSG_HMI_FIREPERMIT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_FIREPERMIT_finalize_ex(
    DMSG_HMI_FIREPERMIT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_FIREPERMIT_copy(
    DMSG_HMI_FIREPERMIT* dst,
    const DMSG_HMI_FIREPERMIT* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFire, &src->cFire)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_FIREPERMIT' sequence class.
 */
#define T DMSG_HMI_FIREPERMIT
#define TSeq DMSG_HMI_FIREPERMITSeq
#define T_initialize_ex DMSG_HMI_FIREPERMIT_initialize_ex
#define T_finalize_ex   DMSG_HMI_FIREPERMIT_finalize_ex
#define T_copy       DMSG_HMI_FIREPERMIT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ENGAGECANCELTYPENAME = "DMSG_HMI_ENGAGECANCEL";

DDS_TypeCode* DMSG_HMI_ENGAGECANCEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ENGAGECANCEL_g_tc_members[1]=
    {
        {
            (char *)"AssignNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ENGAGECANCEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ENGAGECANCEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_ENGAGECANCEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ENGAGECANCEL*/

    if (is_initialized) {
        return &DMSG_HMI_ENGAGECANCEL_g_tc;
    }


    DMSG_HMI_ENGAGECANCEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ENGAGECANCEL_g_tc;
}


RTIBool DMSG_HMI_ENGAGECANCEL_initialize(
    DMSG_HMI_ENGAGECANCEL* sample) {
  return DMSG_HMI_ENGAGECANCEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ENGAGECANCEL_initialize_ex(
    DMSG_HMI_ENGAGECANCEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedShort(&sample->AssignNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_ENGAGECANCEL_finalize(
    DMSG_HMI_ENGAGECANCEL* sample)
{
    DMSG_HMI_ENGAGECANCEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ENGAGECANCEL_finalize_ex(
    DMSG_HMI_ENGAGECANCEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_ENGAGECANCEL_copy(
    DMSG_HMI_ENGAGECANCEL* dst,
    const DMSG_HMI_ENGAGECANCEL* src)
{        

    if (!RTICdrType_copyUnsignedShort(
        &dst->AssignNum, &src->AssignNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ENGAGECANCEL' sequence class.
 */
#define T DMSG_HMI_ENGAGECANCEL
#define TSeq DMSG_HMI_ENGAGECANCELSeq
#define T_initialize_ex DMSG_HMI_ENGAGECANCEL_initialize_ex
#define T_finalize_ex   DMSG_HMI_ENGAGECANCEL_finalize_ex
#define T_copy       DMSG_HMI_ENGAGECANCEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_HITEVALUATIONSETTYPENAME = "DMSG_HMI_HITEVALUATIONSET";

DDS_TypeCode* DMSG_HMI_HITEVALUATIONSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_HITEVALUATIONSET_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"AssignNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cKillResult",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_HITEVALUATIONSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_HITEVALUATIONSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_HITEVALUATIONSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_HITEVALUATIONSET*/

    if (is_initialized) {
        return &DMSG_HMI_HITEVALUATIONSET_g_tc;
    }


    DMSG_HMI_HITEVALUATIONSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_HITEVALUATIONSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_HMI_HITEVALUATIONSET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_HITEVALUATIONSET_g_tc;
}


RTIBool DMSG_HMI_HITEVALUATIONSET_initialize(
    DMSG_HMI_HITEVALUATIONSET* sample) {
  return DMSG_HMI_HITEVALUATIONSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_HITEVALUATIONSET_initialize_ex(
    DMSG_HMI_HITEVALUATIONSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initUnsignedShort(&sample->AssignNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cKillResult)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_HITEVALUATIONSET_finalize(
    DMSG_HMI_HITEVALUATIONSET* sample)
{
    DMSG_HMI_HITEVALUATIONSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_HITEVALUATIONSET_finalize_ex(
    DMSG_HMI_HITEVALUATIONSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_HITEVALUATIONSET_copy(
    DMSG_HMI_HITEVALUATIONSET* dst,
    const DMSG_HMI_HITEVALUATIONSET* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->AssignNum, &src->AssignNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cKillResult, &src->cKillResult)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_HITEVALUATIONSET' sequence class.
 */
#define T DMSG_HMI_HITEVALUATIONSET
#define TSeq DMSG_HMI_HITEVALUATIONSETSeq
#define T_initialize_ex DMSG_HMI_HITEVALUATIONSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_HITEVALUATIONSET_finalize_ex
#define T_copy       DMSG_HMI_HITEVALUATIONSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ASSIGNCONSOLETYPENAME = "DMSG_HMI_ASSIGNCONSOLE";

DDS_TypeCode* DMSG_HMI_ASSIGNCONSOLE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ASSIGNCONSOLE_g_tc_members[3]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTube",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ASSIGNCONSOLE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ASSIGNCONSOLE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_ASSIGNCONSOLE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ASSIGNCONSOLE*/

    if (is_initialized) {
        return &DMSG_HMI_ASSIGNCONSOLE_g_tc;
    }


    DMSG_HMI_ASSIGNCONSOLE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ASSIGNCONSOLE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ASSIGNCONSOLE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ASSIGNCONSOLE_g_tc;
}


RTIBool DMSG_HMI_ASSIGNCONSOLE_initialize(
    DMSG_HMI_ASSIGNCONSOLE* sample) {
  return DMSG_HMI_ASSIGNCONSOLE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ASSIGNCONSOLE_initialize_ex(
    DMSG_HMI_ASSIGNCONSOLE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTube)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTubeNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_ASSIGNCONSOLE_finalize(
    DMSG_HMI_ASSIGNCONSOLE* sample)
{
    DMSG_HMI_ASSIGNCONSOLE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ASSIGNCONSOLE_finalize_ex(
    DMSG_HMI_ASSIGNCONSOLE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_ASSIGNCONSOLE_copy(
    DMSG_HMI_ASSIGNCONSOLE* dst,
    const DMSG_HMI_ASSIGNCONSOLE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTube, &src->byTube)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTubeNum, &src->byTubeNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ASSIGNCONSOLE' sequence class.
 */
#define T DMSG_HMI_ASSIGNCONSOLE
#define TSeq DMSG_HMI_ASSIGNCONSOLESeq
#define T_initialize_ex DMSG_HMI_ASSIGNCONSOLE_initialize_ex
#define T_finalize_ex   DMSG_HMI_ASSIGNCONSOLE_finalize_ex
#define T_copy       DMSG_HMI_ASSIGNCONSOLE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_GUIDEDWEAPONPERMITTYPENAME = "DMSG_HMI_GUIDEDWEAPONPERMIT";

DDS_TypeCode* DMSG_HMI_GUIDEDWEAPONPERMIT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_GUIDEDWEAPONPERMIT_g_tc_members[3]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byFireOk",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_GUIDEDWEAPONPERMIT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_GUIDEDWEAPONPERMIT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_GUIDEDWEAPONPERMIT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_GUIDEDWEAPONPERMIT*/

    if (is_initialized) {
        return &DMSG_HMI_GUIDEDWEAPONPERMIT_g_tc;
    }


    DMSG_HMI_GUIDEDWEAPONPERMIT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_GUIDEDWEAPONPERMIT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_GUIDEDWEAPONPERMIT_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_GUIDEDWEAPONPERMIT_g_tc;
}


RTIBool DMSG_HMI_GUIDEDWEAPONPERMIT_initialize(
    DMSG_HMI_GUIDEDWEAPONPERMIT* sample) {
  return DMSG_HMI_GUIDEDWEAPONPERMIT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_GUIDEDWEAPONPERMIT_initialize_ex(
    DMSG_HMI_GUIDEDWEAPONPERMIT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byFireOk)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_GUIDEDWEAPONPERMIT_finalize(
    DMSG_HMI_GUIDEDWEAPONPERMIT* sample)
{
    DMSG_HMI_GUIDEDWEAPONPERMIT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_GUIDEDWEAPONPERMIT_finalize_ex(
    DMSG_HMI_GUIDEDWEAPONPERMIT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_GUIDEDWEAPONPERMIT_copy(
    DMSG_HMI_GUIDEDWEAPONPERMIT* dst,
    const DMSG_HMI_GUIDEDWEAPONPERMIT* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byFireOk, &src->byFireOk)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_GUIDEDWEAPONPERMIT' sequence class.
 */
#define T DMSG_HMI_GUIDEDWEAPONPERMIT
#define TSeq DMSG_HMI_GUIDEDWEAPONPERMITSeq
#define T_initialize_ex DMSG_HMI_GUIDEDWEAPONPERMIT_initialize_ex
#define T_finalize_ex   DMSG_HMI_GUIDEDWEAPONPERMIT_finalize_ex
#define T_copy       DMSG_HMI_GUIDEDWEAPONPERMIT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ASSIGNTUBETYPENAME = "DMSG_HMI_ASSIGNTUBE";

DDS_TypeCode* DMSG_HMI_ASSIGNTUBE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ASSIGNTUBE_g_tc_members[4]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTube",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ASSIGNTUBE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ASSIGNTUBE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        4, /* Number of members */
        DMSG_HMI_ASSIGNTUBE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ASSIGNTUBE*/

    if (is_initialized) {
        return &DMSG_HMI_ASSIGNTUBE_g_tc;
    }


    DMSG_HMI_ASSIGNTUBE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ASSIGNTUBE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_ASSIGNTUBE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ASSIGNTUBE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ASSIGNTUBE_g_tc;
}


RTIBool DMSG_HMI_ASSIGNTUBE_initialize(
    DMSG_HMI_ASSIGNTUBE* sample) {
  return DMSG_HMI_ASSIGNTUBE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ASSIGNTUBE_initialize_ex(
    DMSG_HMI_ASSIGNTUBE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->byTube)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTubeNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_ASSIGNTUBE_finalize(
    DMSG_HMI_ASSIGNTUBE* sample)
{
    DMSG_HMI_ASSIGNTUBE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ASSIGNTUBE_finalize_ex(
    DMSG_HMI_ASSIGNTUBE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_ASSIGNTUBE_copy(
    DMSG_HMI_ASSIGNTUBE* dst,
    const DMSG_HMI_ASSIGNTUBE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTube, &src->byTube)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTubeNum, &src->byTubeNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ASSIGNTUBE' sequence class.
 */
#define T DMSG_HMI_ASSIGNTUBE
#define TSeq DMSG_HMI_ASSIGNTUBESeq
#define T_initialize_ex DMSG_HMI_ASSIGNTUBE_initialize_ex
#define T_finalize_ex   DMSG_HMI_ASSIGNTUBE_finalize_ex
#define T_copy       DMSG_HMI_ASSIGNTUBE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ENGAGEPLANSETTYPENAME = "DMSG_HMI_ENGAGEPLANSET";

DDS_TypeCode* DMSG_HMI_ENGAGEPLANSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ENGAGEPLANSET_g_tc_members[2]=
    {
        {
            (char *)"cEngagePlanCtrl",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ENGAGEPLANSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ENGAGEPLANSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_ENGAGEPLANSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ENGAGEPLANSET*/

    if (is_initialized) {
        return &DMSG_HMI_ENGAGEPLANSET_g_tc;
    }


    DMSG_HMI_ENGAGEPLANSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ENGAGEPLANSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ENGAGEPLANSET_g_tc;
}


RTIBool DMSG_HMI_ENGAGEPLANSET_initialize(
    DMSG_HMI_ENGAGEPLANSET* sample) {
  return DMSG_HMI_ENGAGEPLANSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ENGAGEPLANSET_initialize_ex(
    DMSG_HMI_ENGAGEPLANSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngagePlanCtrl)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_ENGAGEPLANSET_finalize(
    DMSG_HMI_ENGAGEPLANSET* sample)
{
    DMSG_HMI_ENGAGEPLANSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ENGAGEPLANSET_finalize_ex(
    DMSG_HMI_ENGAGEPLANSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_ENGAGEPLANSET_copy(
    DMSG_HMI_ENGAGEPLANSET* dst,
    const DMSG_HMI_ENGAGEPLANSET* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngagePlanCtrl, &src->cEngagePlanCtrl)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ENGAGEPLANSET' sequence class.
 */
#define T DMSG_HMI_ENGAGEPLANSET
#define TSeq DMSG_HMI_ENGAGEPLANSETSeq
#define T_initialize_ex DMSG_HMI_ENGAGEPLANSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_ENGAGEPLANSET_finalize_ex
#define T_copy       DMSG_HMI_ENGAGEPLANSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_FIREPERMITKEYSTATETYPENAME = "DMSG_HMI_FIREPERMITKEYSTATE";

DDS_TypeCode* DMSG_HMI_FIREPERMITKEYSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_FIREPERMITKEYSTATE_g_tc_members[1]=
    {
        {
            (char *)"cFirePermitKey",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_FIREPERMITKEYSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_FIREPERMITKEYSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_FIREPERMITKEYSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_FIREPERMITKEYSTATE*/

    if (is_initialized) {
        return &DMSG_HMI_FIREPERMITKEYSTATE_g_tc;
    }


    DMSG_HMI_FIREPERMITKEYSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_FIREPERMITKEYSTATE_g_tc;
}


RTIBool DMSG_HMI_FIREPERMITKEYSTATE_initialize(
    DMSG_HMI_FIREPERMITKEYSTATE* sample) {
  return DMSG_HMI_FIREPERMITKEYSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_FIREPERMITKEYSTATE_initialize_ex(
    DMSG_HMI_FIREPERMITKEYSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cFirePermitKey)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_FIREPERMITKEYSTATE_finalize(
    DMSG_HMI_FIREPERMITKEYSTATE* sample)
{
    DMSG_HMI_FIREPERMITKEYSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_FIREPERMITKEYSTATE_finalize_ex(
    DMSG_HMI_FIREPERMITKEYSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_FIREPERMITKEYSTATE_copy(
    DMSG_HMI_FIREPERMITKEYSTATE* dst,
    const DMSG_HMI_FIREPERMITKEYSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cFirePermitKey, &src->cFirePermitKey)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_FIREPERMITKEYSTATE' sequence class.
 */
#define T DMSG_HMI_FIREPERMITKEYSTATE
#define TSeq DMSG_HMI_FIREPERMITKEYSTATESeq
#define T_initialize_ex DMSG_HMI_FIREPERMITKEYSTATE_initialize_ex
#define T_finalize_ex   DMSG_HMI_FIREPERMITKEYSTATE_finalize_ex
#define T_copy       DMSG_HMI_FIREPERMITKEYSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_FIREPERMITBTNSTATETYPENAME = "DMSG_HMI_FIREPERMITBTNSTATE";

DDS_TypeCode* DMSG_HMI_FIREPERMITBTNSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_FIREPERMITBTNSTATE_g_tc_members[1]=
    {
        {
            (char *)"cFirePermitBtn",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_FIREPERMITBTNSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_FIREPERMITBTNSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_FIREPERMITBTNSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_FIREPERMITBTNSTATE*/

    if (is_initialized) {
        return &DMSG_HMI_FIREPERMITBTNSTATE_g_tc;
    }


    DMSG_HMI_FIREPERMITBTNSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_FIREPERMITBTNSTATE_g_tc;
}


RTIBool DMSG_HMI_FIREPERMITBTNSTATE_initialize(
    DMSG_HMI_FIREPERMITBTNSTATE* sample) {
  return DMSG_HMI_FIREPERMITBTNSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_FIREPERMITBTNSTATE_initialize_ex(
    DMSG_HMI_FIREPERMITBTNSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cFirePermitBtn)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_FIREPERMITBTNSTATE_finalize(
    DMSG_HMI_FIREPERMITBTNSTATE* sample)
{
    DMSG_HMI_FIREPERMITBTNSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_FIREPERMITBTNSTATE_finalize_ex(
    DMSG_HMI_FIREPERMITBTNSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_FIREPERMITBTNSTATE_copy(
    DMSG_HMI_FIREPERMITBTNSTATE* dst,
    const DMSG_HMI_FIREPERMITBTNSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cFirePermitBtn, &src->cFirePermitBtn)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_FIREPERMITBTNSTATE' sequence class.
 */
#define T DMSG_HMI_FIREPERMITBTNSTATE
#define TSeq DMSG_HMI_FIREPERMITBTNSTATESeq
#define T_initialize_ex DMSG_HMI_FIREPERMITBTNSTATE_initialize_ex
#define T_finalize_ex   DMSG_HMI_FIREPERMITBTNSTATE_finalize_ex
#define T_copy       DMSG_HMI_FIREPERMITBTNSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_FIRECMDTYPENAME = "DMSG_HMI_FIRECMD";

DDS_TypeCode* DMSG_HMI_FIRECMD_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_FIRECMD_g_tc_members[5]=
    {
        {
            (char *)"byConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byLinkTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTubeType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byFirectrl",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_FIRECMD_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_FIRECMD", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        5, /* Number of members */
        DMSG_HMI_FIRECMD_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_FIRECMD*/

    if (is_initialized) {
        return &DMSG_HMI_FIRECMD_g_tc;
    }


    DMSG_HMI_FIRECMD_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_FIRECMD_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_FIRECMD_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_FIRECMD_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_FIRECMD_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_FIRECMD_g_tc;
}


RTIBool DMSG_HMI_FIRECMD_initialize(
    DMSG_HMI_FIRECMD* sample) {
  return DMSG_HMI_FIRECMD_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_FIRECMD_initialize_ex(
    DMSG_HMI_FIRECMD* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTubeNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byLinkTubeNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTubeType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byFirectrl)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_FIRECMD_finalize(
    DMSG_HMI_FIRECMD* sample)
{
    DMSG_HMI_FIRECMD_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_FIRECMD_finalize_ex(
    DMSG_HMI_FIRECMD* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_FIRECMD_copy(
    DMSG_HMI_FIRECMD* dst,
    const DMSG_HMI_FIRECMD* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byConsoleID, &src->byConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTubeNum, &src->byTubeNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byLinkTubeNum, &src->byLinkTubeNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTubeType, &src->byTubeType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byFirectrl, &src->byFirectrl)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_FIRECMD' sequence class.
 */
#define T DMSG_HMI_FIRECMD
#define TSeq DMSG_HMI_FIRECMDSeq
#define T_initialize_ex DMSG_HMI_FIRECMD_initialize_ex
#define T_finalize_ex   DMSG_HMI_FIRECMD_finalize_ex
#define T_copy       DMSG_HMI_FIRECMD_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ENGAGEASSIGNCMDTYPENAME = "DMSG_HMI_ENGAGEASSIGNCMD";

DDS_TypeCode* DMSG_HMI_ENGAGEASSIGNCMD_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ENGAGEASSIGNCMD_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nAssignmentPlanID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ENGAGEASSIGNCMD_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ENGAGEASSIGNCMD", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_ENGAGEASSIGNCMD_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ENGAGEASSIGNCMD*/

    if (is_initialized) {
        return &DMSG_HMI_ENGAGEASSIGNCMD_g_tc;
    }


    DMSG_HMI_ENGAGEASSIGNCMD_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_ENGAGEASSIGNCMD_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ENGAGEASSIGNCMD_g_tc;
}


RTIBool DMSG_HMI_ENGAGEASSIGNCMD_initialize(
    DMSG_HMI_ENGAGEASSIGNCMD* sample) {
  return DMSG_HMI_ENGAGEASSIGNCMD_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ENGAGEASSIGNCMD_initialize_ex(
    DMSG_HMI_ENGAGEASSIGNCMD* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initLong(&sample->nAssignmentPlanID)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_ENGAGEASSIGNCMD_finalize(
    DMSG_HMI_ENGAGEASSIGNCMD* sample)
{
    DMSG_HMI_ENGAGEASSIGNCMD_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ENGAGEASSIGNCMD_finalize_ex(
    DMSG_HMI_ENGAGEASSIGNCMD* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_ENGAGEASSIGNCMD_copy(
    DMSG_HMI_ENGAGEASSIGNCMD* dst,
    const DMSG_HMI_ENGAGEASSIGNCMD* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nAssignmentPlanID, &src->nAssignmentPlanID)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ENGAGEASSIGNCMD' sequence class.
 */
#define T DMSG_HMI_ENGAGEASSIGNCMD
#define TSeq DMSG_HMI_ENGAGEASSIGNCMDSeq
#define T_initialize_ex DMSG_HMI_ENGAGEASSIGNCMD_initialize_ex
#define T_finalize_ex   DMSG_HMI_ENGAGEASSIGNCMD_finalize_ex
#define T_copy       DMSG_HMI_ENGAGEASSIGNCMD_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_FIRINGCMDTYPENAME = "DMSG_HMI_FIRINGCMD";

DDS_TypeCode* DMSG_HMI_FIRINGCMD_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_FIRINGCMD_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFireCommand",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_FIRINGCMD_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_FIRINGCMD", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_FIRINGCMD_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_FIRINGCMD*/

    if (is_initialized) {
        return &DMSG_HMI_FIRINGCMD_g_tc;
    }


    DMSG_HMI_FIRINGCMD_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
    DMSG_HMI_FIRINGCMD_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_FIRINGCMD_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_FIRINGCMD_g_tc;
}


RTIBool DMSG_HMI_FIRINGCMD_initialize(
    DMSG_HMI_FIRINGCMD* sample) {
  return DMSG_HMI_FIRINGCMD_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_FIRINGCMD_initialize_ex(
    DMSG_HMI_FIRINGCMD* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->trkNo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFireCommand)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_FIRINGCMD_finalize(
    DMSG_HMI_FIRINGCMD* sample)
{
    DMSG_HMI_FIRINGCMD_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_FIRINGCMD_finalize_ex(
    DMSG_HMI_FIRINGCMD* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_FIRINGCMD_copy(
    DMSG_HMI_FIRINGCMD* dst,
    const DMSG_HMI_FIRINGCMD* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFireCommand, &src->cFireCommand)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_FIRINGCMD' sequence class.
 */
#define T DMSG_HMI_FIRINGCMD
#define TSeq DMSG_HMI_FIRINGCMDSeq
#define T_initialize_ex DMSG_HMI_FIRINGCMD_initialize_ex
#define T_finalize_ex   DMSG_HMI_FIRINGCMD_finalize_ex
#define T_copy       DMSG_HMI_FIRINGCMD_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_ENGAGEDELTYPENAME = "DMSG_EC_ENGAGEDEL";

DDS_TypeCode* DMSG_EC_ENGAGEDEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_ENGAGEDEL_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"AssignNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_ENGAGEDEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_ENGAGEDEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_EC_ENGAGEDEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_ENGAGEDEL*/

    if (is_initialized) {
        return &DMSG_EC_ENGAGEDEL_g_tc;
    }


    DMSG_EC_ENGAGEDEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_EC_ENGAGEDEL_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_ENGAGEDEL_g_tc;
}


RTIBool DMSG_EC_ENGAGEDEL_initialize(
    DMSG_EC_ENGAGEDEL* sample) {
  return DMSG_EC_ENGAGEDEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_ENGAGEDEL_initialize_ex(
    DMSG_EC_ENGAGEDEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initUnsignedShort(&sample->AssignNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_ENGAGEDEL_finalize(
    DMSG_EC_ENGAGEDEL* sample)
{
    DMSG_EC_ENGAGEDEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_ENGAGEDEL_finalize_ex(
    DMSG_EC_ENGAGEDEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_EC_ENGAGEDEL_copy(
    DMSG_EC_ENGAGEDEL* dst,
    const DMSG_EC_ENGAGEDEL* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->AssignNum, &src->AssignNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_ENGAGEDEL' sequence class.
 */
#define T DMSG_EC_ENGAGEDEL
#define TSeq DMSG_EC_ENGAGEDELSeq
#define T_initialize_ex DMSG_EC_ENGAGEDEL_initialize_ex
#define T_finalize_ex   DMSG_EC_ENGAGEDEL_finalize_ex
#define T_copy       DMSG_EC_ENGAGEDEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_MANUALENGAGEASSIGNTYPENAME = "DMSG_HMI_MANUALENGAGEASSIGN";

DDS_TypeCode* DMSG_HMI_MANUALENGAGEASSIGN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_HMI_MANUALENGAGEASSIGN_g_tc_EngageTime_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,6,NULL,NULL);

    static DDS_TypeCode_Member DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members[8]=
    {
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackRdrID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cRdrType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cChannelID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"EngageTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_MANUALENGAGEASSIGN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_MANUALENGAGEASSIGN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        8, /* Number of members */
        DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_MANUALENGAGEASSIGN*/

    if (is_initialized) {
        return &DMSG_HMI_MANUALENGAGEASSIGN_g_tc;
    }

    DMSG_HMI_MANUALENGAGEASSIGN_g_tc_EngageTime_array._data._typeCode = (RTICdrTypeCode *)time1_get_typecode();

    DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MANUALENGAGEASSIGN_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DMSG_HMI_MANUALENGAGEASSIGN_g_tc_EngageTime_array;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_MANUALENGAGEASSIGN_g_tc;
}


RTIBool DMSG_HMI_MANUALENGAGEASSIGN_initialize(
    DMSG_HMI_MANUALENGAGEASSIGN* sample) {
  return DMSG_HMI_MANUALENGAGEASSIGN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_MANUALENGAGEASSIGN_initialize_ex(
    DMSG_HMI_MANUALENGAGEASSIGN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cTrackRdrID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cRdrType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cChannelID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    
    {
        int i = 0;
        time1* elem =
            (time1*) &sample->EngageTime[0];

        for (i = 0; i < (int)((6)); ++i, ++elem) {
            if (!time1_initialize_ex(elem,allocatePointers)) {
                return RTI_FALSE;
            }
        }
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_MANUALENGAGEASSIGN_finalize(
    DMSG_HMI_MANUALENGAGEASSIGN* sample)
{
    DMSG_HMI_MANUALENGAGEASSIGN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_MANUALENGAGEASSIGN_finalize_ex(
    DMSG_HMI_MANUALENGAGEASSIGN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
    
    {
        int i = 0;
        time1* elem =
            (time1*) &sample->EngageTime[0];

        for (i = 0; i < (int)((6)); ++i, ++elem) {
            time1_finalize_ex(elem,deletePointers);
        }
    }
            
}

RTIBool DMSG_HMI_MANUALENGAGEASSIGN_copy(
    DMSG_HMI_MANUALENGAGEASSIGN* dst,
    const DMSG_HMI_MANUALENGAGEASSIGN* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackRdrID, &src->cTrackRdrID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cRdrType, &src->cRdrType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cChannelID, &src->cChannelID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    
    {
        int i = 0;
        time1* elemOut = (time1*) &dst->EngageTime[0];
        const time1* elemIn = (const time1*) &src->EngageTime[0];

        for (i = 0; i < (int)((6));
             ++i, ++elemOut, ++elemIn) {
            if (!time1_copy(elemOut,(const time1*)elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_MANUALENGAGEASSIGN' sequence class.
 */
#define T DMSG_HMI_MANUALENGAGEASSIGN
#define TSeq DMSG_HMI_MANUALENGAGEASSIGNSeq
#define T_initialize_ex DMSG_HMI_MANUALENGAGEASSIGN_initialize_ex
#define T_finalize_ex   DMSG_HMI_MANUALENGAGEASSIGN_finalize_ex
#define T_copy       DMSG_HMI_MANUALENGAGEASSIGN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_EMERGENCYFIRETYPENAME = "DMSG_HMI_EMERGENCYFIRE";

DDS_TypeCode* DMSG_HMI_EMERGENCYFIRE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_EMERGENCYFIRE_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"weapon_id",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_EMERGENCYFIRE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_EMERGENCYFIRE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_EMERGENCYFIRE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_EMERGENCYFIRE*/

    if (is_initialized) {
        return &DMSG_HMI_EMERGENCYFIRE_g_tc;
    }


    DMSG_HMI_EMERGENCYFIRE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_EMERGENCYFIRE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_EMERGENCYFIRE_g_tc;
}


RTIBool DMSG_HMI_EMERGENCYFIRE_initialize(
    DMSG_HMI_EMERGENCYFIRE* sample) {
  return DMSG_HMI_EMERGENCYFIRE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_EMERGENCYFIRE_initialize_ex(
    DMSG_HMI_EMERGENCYFIRE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->weapon_id)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_EMERGENCYFIRE_finalize(
    DMSG_HMI_EMERGENCYFIRE* sample)
{
    DMSG_HMI_EMERGENCYFIRE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_EMERGENCYFIRE_finalize_ex(
    DMSG_HMI_EMERGENCYFIRE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_EMERGENCYFIRE_copy(
    DMSG_HMI_EMERGENCYFIRE* dst,
    const DMSG_HMI_EMERGENCYFIRE* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->weapon_id, &src->weapon_id)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_EMERGENCYFIRE' sequence class.
 */
#define T DMSG_HMI_EMERGENCYFIRE
#define TSeq DMSG_HMI_EMERGENCYFIRESeq
#define T_initialize_ex DMSG_HMI_EMERGENCYFIRE_initialize_ex
#define T_finalize_ex   DMSG_HMI_EMERGENCYFIRE_finalize_ex
#define T_copy       DMSG_HMI_EMERGENCYFIRE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SAMTARGETDESIGTYPENAME = "DMSG_HMI_SAMTARGETDESIG";

DDS_TypeCode* DMSG_HMI_SAMTARGETDESIG_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_HMI_SAMTARGETDESIG_g_tc_byPlatform_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,10,NULL,NULL);

    static DDS_TypeCode_Member DMSG_HMI_SAMTARGETDESIG_g_tc_members[25]=
    {
        {
            (char *)"nSysTrackNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byMissileCnt",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byAttackMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byLaunchMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byAttackType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byAttackTimeType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byAttackTimeHour",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byAttackTimeMin",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byEngagementMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byEngagementCommand",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byPositionValid",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byBearingValid",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byRangeValid",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCourseValid",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fCourse",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bySpeedValid",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTargetForm",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTargetType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byDetectSource",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byPlatform",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SAMTARGETDESIG_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SAMTARGETDESIG", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        25, /* Number of members */
        DMSG_HMI_SAMTARGETDESIG_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SAMTARGETDESIG*/

    if (is_initialized) {
        return &DMSG_HMI_SAMTARGETDESIG_g_tc;
    }

    DMSG_HMI_SAMTARGETDESIG_g_tc_byPlatform_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    DMSG_HMI_SAMTARGETDESIG_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SAMTARGETDESIG_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DMSG_HMI_SAMTARGETDESIG_g_tc_byPlatform_array;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SAMTARGETDESIG_g_tc;
}


RTIBool DMSG_HMI_SAMTARGETDESIG_initialize(
    DMSG_HMI_SAMTARGETDESIG* sample) {
  return DMSG_HMI_SAMTARGETDESIG_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SAMTARGETDESIG_initialize_ex(
    DMSG_HMI_SAMTARGETDESIG* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nSysTrackNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byMissileCnt)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byAttackMode)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byLaunchMode)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byAttackType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byAttackTimeType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byAttackTimeHour)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byAttackTimeMin)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byEngagementMode)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byEngagementCommand)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byPositionValid)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dLon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byBearingValid)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byRangeValid)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCourseValid)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fCourse)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->bySpeedValid)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSpeed)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTargetForm)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTargetType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byDetectSource)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->byPlatform, (10), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_HMI_SAMTARGETDESIG_finalize(
    DMSG_HMI_SAMTARGETDESIG* sample)
{
    DMSG_HMI_SAMTARGETDESIG_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SAMTARGETDESIG_finalize_ex(
    DMSG_HMI_SAMTARGETDESIG* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SAMTARGETDESIG_copy(
    DMSG_HMI_SAMTARGETDESIG* dst,
    const DMSG_HMI_SAMTARGETDESIG* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nSysTrackNum, &src->nSysTrackNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byMissileCnt, &src->byMissileCnt)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byAttackMode, &src->byAttackMode)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byLaunchMode, &src->byLaunchMode)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byAttackType, &src->byAttackType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byAttackTimeType, &src->byAttackTimeType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byAttackTimeHour, &src->byAttackTimeHour)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byAttackTimeMin, &src->byAttackTimeMin)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byEngagementMode, &src->byEngagementMode)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byEngagementCommand, &src->byEngagementCommand)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byPositionValid, &src->byPositionValid)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dLat, &src->dLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dLon, &src->dLon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byBearingValid, &src->byBearingValid)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBearing, &src->fBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byRangeValid, &src->byRangeValid)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCourseValid, &src->byCourseValid)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fCourse, &src->fCourse)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->bySpeedValid, &src->bySpeedValid)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSpeed, &src->fSpeed)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTargetForm, &src->byTargetForm)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTargetType, &src->byTargetType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byDetectSource, &src->byDetectSource)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->byPlatform, src->byPlatform, (10), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SAMTARGETDESIG' sequence class.
 */
#define T DMSG_HMI_SAMTARGETDESIG
#define TSeq DMSG_HMI_SAMTARGETDESIGSeq
#define T_initialize_ex DMSG_HMI_SAMTARGETDESIG_initialize_ex
#define T_finalize_ex   DMSG_HMI_SAMTARGETDESIG_finalize_ex
#define T_copy       DMSG_HMI_SAMTARGETDESIG_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_GUIDEDWEAPONPERMITTYPENAME = "DMSG_EC_GUIDEDWEAPONPERMIT";

DDS_TypeCode* DMSG_EC_GUIDEDWEAPONPERMIT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_GUIDEDWEAPONPERMIT_g_tc_members[2]=
    {
        {
            (char *)"byTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byFireOk",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_GUIDEDWEAPONPERMIT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_GUIDEDWEAPONPERMIT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_EC_GUIDEDWEAPONPERMIT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_GUIDEDWEAPONPERMIT*/

    if (is_initialized) {
        return &DMSG_EC_GUIDEDWEAPONPERMIT_g_tc;
    }


    DMSG_EC_GUIDEDWEAPONPERMIT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_GUIDEDWEAPONPERMIT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_GUIDEDWEAPONPERMIT_g_tc;
}


RTIBool DMSG_EC_GUIDEDWEAPONPERMIT_initialize(
    DMSG_EC_GUIDEDWEAPONPERMIT* sample) {
  return DMSG_EC_GUIDEDWEAPONPERMIT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_GUIDEDWEAPONPERMIT_initialize_ex(
    DMSG_EC_GUIDEDWEAPONPERMIT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byTubeNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byFireOk)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_GUIDEDWEAPONPERMIT_finalize(
    DMSG_EC_GUIDEDWEAPONPERMIT* sample)
{
    DMSG_EC_GUIDEDWEAPONPERMIT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_GUIDEDWEAPONPERMIT_finalize_ex(
    DMSG_EC_GUIDEDWEAPONPERMIT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_EC_GUIDEDWEAPONPERMIT_copy(
    DMSG_EC_GUIDEDWEAPONPERMIT* dst,
    const DMSG_EC_GUIDEDWEAPONPERMIT* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byTubeNum, &src->byTubeNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byFireOk, &src->byFireOk)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_GUIDEDWEAPONPERMIT' sequence class.
 */
#define T DMSG_EC_GUIDEDWEAPONPERMIT
#define TSeq DMSG_EC_GUIDEDWEAPONPERMITSeq
#define T_initialize_ex DMSG_EC_GUIDEDWEAPONPERMIT_initialize_ex
#define T_finalize_ex   DMSG_EC_GUIDEDWEAPONPERMIT_finalize_ex
#define T_copy       DMSG_EC_GUIDEDWEAPONPERMIT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TRRTRACKINGCMDTYPENAME = "DMSG_HMI_TRRTRACKINGCMD";

DDS_TypeCode* DMSG_HMI_TRRTRACKINGCMD_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TRRTRACKINGCMD_g_tc_members[5]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTrackingStatus",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dElevation",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dDistance",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TRRTRACKINGCMD_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TRRTRACKINGCMD", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        5, /* Number of members */
        DMSG_HMI_TRRTRACKINGCMD_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TRRTRACKINGCMD*/

    if (is_initialized) {
        return &DMSG_HMI_TRRTRACKINGCMD_g_tc;
    }


    DMSG_HMI_TRRTRACKINGCMD_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_TRRTRACKINGCMD_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TRRTRACKINGCMD_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TRRTRACKINGCMD_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TRRTRACKINGCMD_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TRRTRACKINGCMD_g_tc;
}


RTIBool DMSG_HMI_TRRTRACKINGCMD_initialize(
    DMSG_HMI_TRRTRACKINGCMD* sample) {
  return DMSG_HMI_TRRTRACKINGCMD_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TRRTRACKINGCMD_initialize_ex(
    DMSG_HMI_TRRTRACKINGCMD* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->byTrackingStatus)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dElevation)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dDistance)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TRRTRACKINGCMD_finalize(
    DMSG_HMI_TRRTRACKINGCMD* sample)
{
    DMSG_HMI_TRRTRACKINGCMD_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TRRTRACKINGCMD_finalize_ex(
    DMSG_HMI_TRRTRACKINGCMD* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_TRRTRACKINGCMD_copy(
    DMSG_HMI_TRRTRACKINGCMD* dst,
    const DMSG_HMI_TRRTRACKINGCMD* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTrackingStatus, &src->byTrackingStatus)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dBearing, &src->dBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dElevation, &src->dElevation)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dDistance, &src->dDistance)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TRRTRACKINGCMD' sequence class.
 */
#define T DMSG_HMI_TRRTRACKINGCMD
#define TSeq DMSG_HMI_TRRTRACKINGCMDSeq
#define T_initialize_ex DMSG_HMI_TRRTRACKINGCMD_initialize_ex
#define T_finalize_ex   DMSG_HMI_TRRTRACKINGCMD_finalize_ex
#define T_copy       DMSG_HMI_TRRTRACKINGCMD_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_EOTSSUBTRACKINGSETTYPENAME = "DMSG_HMI_EOTSSUBTRACKINGSET";

DDS_TypeCode* DMSG_HMI_EOTSSUBTRACKINGSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_EOTSSUBTRACKINGSET_g_tc_members[5]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bySubTracking",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dAltitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bySubTrackingSensor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_EOTSSUBTRACKINGSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_EOTSSUBTRACKINGSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        5, /* Number of members */
        DMSG_HMI_EOTSSUBTRACKINGSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_EOTSSUBTRACKINGSET*/

    if (is_initialized) {
        return &DMSG_HMI_EOTSSUBTRACKINGSET_g_tc;
    }


    DMSG_HMI_EOTSSUBTRACKINGSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_EOTSSUBTRACKINGSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_EOTSSUBTRACKINGSET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_EOTSSUBTRACKINGSET_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_EOTSSUBTRACKINGSET_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_EOTSSUBTRACKINGSET_g_tc;
}


RTIBool DMSG_HMI_EOTSSUBTRACKINGSET_initialize(
    DMSG_HMI_EOTSSUBTRACKINGSET* sample) {
  return DMSG_HMI_EOTSSUBTRACKINGSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_EOTSSUBTRACKINGSET_initialize_ex(
    DMSG_HMI_EOTSSUBTRACKINGSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->bySubTracking)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dAltitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->bySubTrackingSensor)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_EOTSSUBTRACKINGSET_finalize(
    DMSG_HMI_EOTSSUBTRACKINGSET* sample)
{
    DMSG_HMI_EOTSSUBTRACKINGSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_EOTSSUBTRACKINGSET_finalize_ex(
    DMSG_HMI_EOTSSUBTRACKINGSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_EOTSSUBTRACKINGSET_copy(
    DMSG_HMI_EOTSSUBTRACKINGSET* dst,
    const DMSG_HMI_EOTSSUBTRACKINGSET* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->bySubTracking, &src->bySubTracking)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dBearing, &src->dBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dAltitude, &src->dAltitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->bySubTrackingSensor, &src->bySubTrackingSensor)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_EOTSSUBTRACKINGSET' sequence class.
 */
#define T DMSG_HMI_EOTSSUBTRACKINGSET
#define TSeq DMSG_HMI_EOTSSUBTRACKINGSETSeq
#define T_initialize_ex DMSG_HMI_EOTSSUBTRACKINGSET_initialize_ex
#define T_finalize_ex   DMSG_HMI_EOTSSUBTRACKINGSET_finalize_ex
#define T_copy       DMSG_HMI_EOTSSUBTRACKINGSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TDSRTWSTARGETDESIGTYPENAME = "DMSG_HMI_TDSRTWSTARGETDESIG";

DDS_TypeCode* DMSG_HMI_TDSRTWSTARGETDESIG_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TDSRTWSTARGETDESIG_g_tc_members[6]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTrackingStatus",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"TrackingChannel",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dPosX",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dPosY",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dPosZ",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TDSRTWSTARGETDESIG_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TDSRTWSTARGETDESIG", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        6, /* Number of members */
        DMSG_HMI_TDSRTWSTARGETDESIG_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TDSRTWSTARGETDESIG*/

    if (is_initialized) {
        return &DMSG_HMI_TDSRTWSTARGETDESIG_g_tc;
    }


    DMSG_HMI_TDSRTWSTARGETDESIG_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_TDSRTWSTARGETDESIG_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TDSRTWSTARGETDESIG_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TDSRTWSTARGETDESIG_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TDSRTWSTARGETDESIG_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TDSRTWSTARGETDESIG_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TDSRTWSTARGETDESIG_g_tc;
}


RTIBool DMSG_HMI_TDSRTWSTARGETDESIG_initialize(
    DMSG_HMI_TDSRTWSTARGETDESIG* sample) {
  return DMSG_HMI_TDSRTWSTARGETDESIG_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TDSRTWSTARGETDESIG_initialize_ex(
    DMSG_HMI_TDSRTWSTARGETDESIG* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->byTrackingStatus)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->TrackingChannel)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dPosX)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dPosY)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dPosZ)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TDSRTWSTARGETDESIG_finalize(
    DMSG_HMI_TDSRTWSTARGETDESIG* sample)
{
    DMSG_HMI_TDSRTWSTARGETDESIG_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TDSRTWSTARGETDESIG_finalize_ex(
    DMSG_HMI_TDSRTWSTARGETDESIG* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_TDSRTWSTARGETDESIG_copy(
    DMSG_HMI_TDSRTWSTARGETDESIG* dst,
    const DMSG_HMI_TDSRTWSTARGETDESIG* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTrackingStatus, &src->byTrackingStatus)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->TrackingChannel, &src->TrackingChannel)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dPosX, &src->dPosX)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dPosY, &src->dPosY)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dPosZ, &src->dPosZ)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TDSRTWSTARGETDESIG' sequence class.
 */
#define T DMSG_HMI_TDSRTWSTARGETDESIG
#define TSeq DMSG_HMI_TDSRTWSTARGETDESIGSeq
#define T_initialize_ex DMSG_HMI_TDSRTWSTARGETDESIG_initialize_ex
#define T_finalize_ex   DMSG_HMI_TDSRTWSTARGETDESIG_finalize_ex
#define T_copy       DMSG_HMI_TDSRTWSTARGETDESIG_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMISUB_ENGAGECANCELTYPENAME = "DMSG_HMISUB_ENGAGECANCEL";

DDS_TypeCode* DMSG_HMISUB_ENGAGECANCEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMISUB_ENGAGECANCEL_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTube",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMISUB_ENGAGECANCEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMISUB_ENGAGECANCEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMISUB_ENGAGECANCEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMISUB_ENGAGECANCEL*/

    if (is_initialized) {
        return &DMSG_HMISUB_ENGAGECANCEL_g_tc;
    }


    DMSG_HMISUB_ENGAGECANCEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMISUB_ENGAGECANCEL_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMISUB_ENGAGECANCEL_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMISUB_ENGAGECANCEL_g_tc;
}


RTIBool DMSG_HMISUB_ENGAGECANCEL_initialize(
    DMSG_HMISUB_ENGAGECANCEL* sample) {
  return DMSG_HMISUB_ENGAGECANCEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMISUB_ENGAGECANCEL_initialize_ex(
    DMSG_HMISUB_ENGAGECANCEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->byTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTube)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMISUB_ENGAGECANCEL_finalize(
    DMSG_HMISUB_ENGAGECANCEL* sample)
{
    DMSG_HMISUB_ENGAGECANCEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMISUB_ENGAGECANCEL_finalize_ex(
    DMSG_HMISUB_ENGAGECANCEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMISUB_ENGAGECANCEL_copy(
    DMSG_HMISUB_ENGAGECANCEL* dst,
    const DMSG_HMISUB_ENGAGECANCEL* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTubeID, &src->byTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTube, &src->byTube)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMISUB_ENGAGECANCEL' sequence class.
 */
#define T DMSG_HMISUB_ENGAGECANCEL
#define TSeq DMSG_HMISUB_ENGAGECANCELSeq
#define T_initialize_ex DMSG_HMISUB_ENGAGECANCEL_initialize_ex
#define T_finalize_ex   DMSG_HMISUB_ENGAGECANCEL_finalize_ex
#define T_copy       DMSG_HMISUB_ENGAGECANCEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_SUBENGAGEDELTYPENAME = "DMSG_EC_SUBENGAGEDEL";

DDS_TypeCode* DMSG_EC_SUBENGAGEDEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_SUBENGAGEDEL_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTube",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_SUBENGAGEDEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_SUBENGAGEDEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_EC_SUBENGAGEDEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_SUBENGAGEDEL*/

    if (is_initialized) {
        return &DMSG_EC_SUBENGAGEDEL_g_tc;
    }


    DMSG_EC_SUBENGAGEDEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_EC_SUBENGAGEDEL_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_SUBENGAGEDEL_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_SUBENGAGEDEL_g_tc;
}


RTIBool DMSG_EC_SUBENGAGEDEL_initialize(
    DMSG_EC_SUBENGAGEDEL* sample) {
  return DMSG_EC_SUBENGAGEDEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_SUBENGAGEDEL_initialize_ex(
    DMSG_EC_SUBENGAGEDEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->byTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTube)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_SUBENGAGEDEL_finalize(
    DMSG_EC_SUBENGAGEDEL* sample)
{
    DMSG_EC_SUBENGAGEDEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_SUBENGAGEDEL_finalize_ex(
    DMSG_EC_SUBENGAGEDEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_EC_SUBENGAGEDEL_copy(
    DMSG_EC_SUBENGAGEDEL* dst,
    const DMSG_EC_SUBENGAGEDEL* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTubeID, &src->byTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTube, &src->byTube)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_SUBENGAGEDEL' sequence class.
 */
#define T DMSG_EC_SUBENGAGEDEL
#define TSeq DMSG_EC_SUBENGAGEDELSeq
#define T_initialize_ex DMSG_EC_SUBENGAGEDEL_initialize_ex
#define T_finalize_ex   DMSG_EC_SUBENGAGEDEL_finalize_ex
#define T_copy       DMSG_EC_SUBENGAGEDEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_FIREMODETYPENAME = "DMSG_HMI_FIREMODE";

DDS_TypeCode* DMSG_HMI_FIREMODE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_FIREMODE_g_tc_members[1]=
    {
        {
            (char *)"cMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_FIREMODE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_FIREMODE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_FIREMODE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_FIREMODE*/

    if (is_initialized) {
        return &DMSG_HMI_FIREMODE_g_tc;
    }


    DMSG_HMI_FIREMODE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_FIREMODE_g_tc;
}


RTIBool DMSG_HMI_FIREMODE_initialize(
    DMSG_HMI_FIREMODE* sample) {
  return DMSG_HMI_FIREMODE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_FIREMODE_initialize_ex(
    DMSG_HMI_FIREMODE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cMode)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_FIREMODE_finalize(
    DMSG_HMI_FIREMODE* sample)
{
    DMSG_HMI_FIREMODE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_FIREMODE_finalize_ex(
    DMSG_HMI_FIREMODE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_FIREMODE_copy(
    DMSG_HMI_FIREMODE* dst,
    const DMSG_HMI_FIREMODE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cMode, &src->cMode)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_FIREMODE' sequence class.
 */
#define T DMSG_HMI_FIREMODE
#define TSeq DMSG_HMI_FIREMODESeq
#define T_initialize_ex DMSG_HMI_FIREMODE_initialize_ex
#define T_finalize_ex   DMSG_HMI_FIREMODE_finalize_ex
#define T_copy       DMSG_HMI_FIREMODE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_ASSIGNSLTSTUBETYPENAME = "DMSG_HMI_ASSIGNSLTSTUBE";

DDS_TypeCode* DMSG_HMI_ASSIGNSLTSTUBE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_ASSIGNSLTSTUBE_g_tc_members[2]=
    {
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeDirection",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_ASSIGNSLTSTUBE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_ASSIGNSLTSTUBE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_ASSIGNSLTSTUBE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_ASSIGNSLTSTUBE*/

    if (is_initialized) {
        return &DMSG_HMI_ASSIGNSLTSTUBE_g_tc;
    }


    DMSG_HMI_ASSIGNSLTSTUBE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_ASSIGNSLTSTUBE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_ASSIGNSLTSTUBE_g_tc;
}


RTIBool DMSG_HMI_ASSIGNSLTSTUBE_initialize(
    DMSG_HMI_ASSIGNSLTSTUBE* sample) {
  return DMSG_HMI_ASSIGNSLTSTUBE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_ASSIGNSLTSTUBE_initialize_ex(
    DMSG_HMI_ASSIGNSLTSTUBE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeDirection)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_ASSIGNSLTSTUBE_finalize(
    DMSG_HMI_ASSIGNSLTSTUBE* sample)
{
    DMSG_HMI_ASSIGNSLTSTUBE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_ASSIGNSLTSTUBE_finalize_ex(
    DMSG_HMI_ASSIGNSLTSTUBE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_ASSIGNSLTSTUBE_copy(
    DMSG_HMI_ASSIGNSLTSTUBE* dst,
    const DMSG_HMI_ASSIGNSLTSTUBE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeDirection, &src->cTubeDirection)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_ASSIGNSLTSTUBE' sequence class.
 */
#define T DMSG_HMI_ASSIGNSLTSTUBE
#define TSeq DMSG_HMI_ASSIGNSLTSTUBESeq
#define T_initialize_ex DMSG_HMI_ASSIGNSLTSTUBE_initialize_ex
#define T_finalize_ex   DMSG_HMI_ASSIGNSLTSTUBE_finalize_ex
#define T_copy       DMSG_HMI_ASSIGNSLTSTUBE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_ENGAGEADVICEDELTYPENAME = "DMSG_TEWA_ENGAGEADVICEDEL";

DDS_TypeCode* DMSG_TEWA_ENGAGEADVICEDEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_ENGAGEADVICEDEL_g_tc_members[1]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_ENGAGEADVICEDEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_ENGAGEADVICEDEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_TEWA_ENGAGEADVICEDEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_ENGAGEADVICEDEL*/

    if (is_initialized) {
        return &DMSG_TEWA_ENGAGEADVICEDEL_g_tc;
    }


    DMSG_TEWA_ENGAGEADVICEDEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_ENGAGEADVICEDEL_g_tc;
}


RTIBool DMSG_TEWA_ENGAGEADVICEDEL_initialize(
    DMSG_TEWA_ENGAGEADVICEDEL* sample) {
  return DMSG_TEWA_ENGAGEADVICEDEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_ENGAGEADVICEDEL_initialize_ex(
    DMSG_TEWA_ENGAGEADVICEDEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_TEWA_ENGAGEADVICEDEL_finalize(
    DMSG_TEWA_ENGAGEADVICEDEL* sample)
{
    DMSG_TEWA_ENGAGEADVICEDEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_ENGAGEADVICEDEL_finalize_ex(
    DMSG_TEWA_ENGAGEADVICEDEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_TEWA_ENGAGEADVICEDEL_copy(
    DMSG_TEWA_ENGAGEADVICEDEL* dst,
    const DMSG_TEWA_ENGAGEADVICEDEL* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_ENGAGEADVICEDEL' sequence class.
 */
#define T DMSG_TEWA_ENGAGEADVICEDEL
#define TSeq DMSG_TEWA_ENGAGEADVICEDELSeq
#define T_initialize_ex DMSG_TEWA_ENGAGEADVICEDEL_initialize_ex
#define T_finalize_ex   DMSG_TEWA_ENGAGEADVICEDEL_finalize_ex
#define T_copy       DMSG_TEWA_ENGAGEADVICEDEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_FASTRESPONSECHANNELTYPENAME = "DMSG_TEWA_FASTRESPONSECHANNEL";

DDS_TypeCode* DMSG_TEWA_FASTRESPONSECHANNEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_FASTRESPONSECHANNEL_g_tc_members[6]=
    {
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackRdrID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cChannelID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_FASTRESPONSECHANNEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_FASTRESPONSECHANNEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        6, /* Number of members */
        DMSG_TEWA_FASTRESPONSECHANNEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_FASTRESPONSECHANNEL*/

    if (is_initialized) {
        return &DMSG_TEWA_FASTRESPONSECHANNEL_g_tc;
    }


    DMSG_TEWA_FASTRESPONSECHANNEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_FASTRESPONSECHANNEL_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_TEWA_FASTRESPONSECHANNEL_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_FASTRESPONSECHANNEL_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_FASTRESPONSECHANNEL_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_FASTRESPONSECHANNEL_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_FASTRESPONSECHANNEL_g_tc;
}


RTIBool DMSG_TEWA_FASTRESPONSECHANNEL_initialize(
    DMSG_TEWA_FASTRESPONSECHANNEL* sample) {
  return DMSG_TEWA_FASTRESPONSECHANNEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_FASTRESPONSECHANNEL_initialize_ex(
    DMSG_TEWA_FASTRESPONSECHANNEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cTrackRdrID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cChannelID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TEWA_FASTRESPONSECHANNEL_finalize(
    DMSG_TEWA_FASTRESPONSECHANNEL* sample)
{
    DMSG_TEWA_FASTRESPONSECHANNEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_FASTRESPONSECHANNEL_finalize_ex(
    DMSG_TEWA_FASTRESPONSECHANNEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_TEWA_FASTRESPONSECHANNEL_copy(
    DMSG_TEWA_FASTRESPONSECHANNEL* dst,
    const DMSG_TEWA_FASTRESPONSECHANNEL* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackRdrID, &src->cTrackRdrID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cChannelID, &src->cChannelID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_FASTRESPONSECHANNEL' sequence class.
 */
#define T DMSG_TEWA_FASTRESPONSECHANNEL
#define TSeq DMSG_TEWA_FASTRESPONSECHANNELSeq
#define T_initialize_ex DMSG_TEWA_FASTRESPONSECHANNEL_initialize_ex
#define T_finalize_ex   DMSG_TEWA_FASTRESPONSECHANNEL_finalize_ex
#define T_copy       DMSG_TEWA_FASTRESPONSECHANNEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_ENGAGEADVICETYPENAME = "DMSG_TEWA_ENGAGEADVICE";

DDS_TypeCode* DMSG_TEWA_ENGAGEADVICE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_TEWA_ENGAGEADVICE_g_tc_EngageTime_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,6,NULL,NULL);

    static DDS_TypeCode_Member DMSG_TEWA_ENGAGEADVICE_g_tc_members[9]=
    {
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageAvailability",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackRdrID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cChannelID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPriority",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"EngageTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_ENGAGEADVICE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_ENGAGEADVICE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        9, /* Number of members */
        DMSG_TEWA_ENGAGEADVICE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_ENGAGEADVICE*/

    if (is_initialized) {
        return &DMSG_TEWA_ENGAGEADVICE_g_tc;
    }

    DMSG_TEWA_ENGAGEADVICE_g_tc_EngageTime_array._data._typeCode = (RTICdrTypeCode *)time1_get_typecode();

    DMSG_TEWA_ENGAGEADVICE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_ENGAGEADVICE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_TEWA_ENGAGEADVICE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_ENGAGEADVICE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_ENGAGEADVICE_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_ENGAGEADVICE_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_ENGAGEADVICE_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_ENGAGEADVICE_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_ENGAGEADVICE_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TEWA_ENGAGEADVICE_g_tc_EngageTime_array;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_ENGAGEADVICE_g_tc;
}


RTIBool DMSG_TEWA_ENGAGEADVICE_initialize(
    DMSG_TEWA_ENGAGEADVICE* sample) {
  return DMSG_TEWA_ENGAGEADVICE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_ENGAGEADVICE_initialize_ex(
    DMSG_TEWA_ENGAGEADVICE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cEngageAvailability)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackRdrID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cChannelID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cPriority)) {
        return RTI_FALSE;
    }                
            
    
    {
        int i = 0;
        time1* elem =
            (time1*) &sample->EngageTime[0];

        for (i = 0; i < (int)((6)); ++i, ++elem) {
            if (!time1_initialize_ex(elem,allocatePointers)) {
                return RTI_FALSE;
            }
        }
    }
            

    return RTI_TRUE;
}

void DMSG_TEWA_ENGAGEADVICE_finalize(
    DMSG_TEWA_ENGAGEADVICE* sample)
{
    DMSG_TEWA_ENGAGEADVICE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_ENGAGEADVICE_finalize_ex(
    DMSG_TEWA_ENGAGEADVICE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
    
    {
        int i = 0;
        time1* elem =
            (time1*) &sample->EngageTime[0];

        for (i = 0; i < (int)((6)); ++i, ++elem) {
            time1_finalize_ex(elem,deletePointers);
        }
    }
            
}

RTIBool DMSG_TEWA_ENGAGEADVICE_copy(
    DMSG_TEWA_ENGAGEADVICE* dst,
    const DMSG_TEWA_ENGAGEADVICE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageAvailability, &src->cEngageAvailability)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackRdrID, &src->cTrackRdrID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cChannelID, &src->cChannelID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cPriority, &src->cPriority)) {
        return RTI_FALSE;
    }
            
    
    {
        int i = 0;
        time1* elemOut = (time1*) &dst->EngageTime[0];
        const time1* elemIn = (const time1*) &src->EngageTime[0];

        for (i = 0; i < (int)((6));
             ++i, ++elemOut, ++elemIn) {
            if (!time1_copy(elemOut,(const time1*)elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_ENGAGEADVICE' sequence class.
 */
#define T DMSG_TEWA_ENGAGEADVICE
#define TSeq DMSG_TEWA_ENGAGEADVICESeq
#define T_initialize_ex DMSG_TEWA_ENGAGEADVICE_initialize_ex
#define T_finalize_ex   DMSG_TEWA_ENGAGEADVICE_finalize_ex
#define T_copy       DMSG_TEWA_ENGAGEADVICE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_THREATDELTYPENAME = "DMSG_TEWA_THREATDEL";

DDS_TypeCode* DMSG_TEWA_THREATDEL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_THREATDEL_g_tc_members[1]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_THREATDEL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_THREATDEL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_TEWA_THREATDEL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_THREATDEL*/

    if (is_initialized) {
        return &DMSG_TEWA_THREATDEL_g_tc;
    }


    DMSG_TEWA_THREATDEL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_THREATDEL_g_tc;
}


RTIBool DMSG_TEWA_THREATDEL_initialize(
    DMSG_TEWA_THREATDEL* sample) {
  return DMSG_TEWA_THREATDEL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_THREATDEL_initialize_ex(
    DMSG_TEWA_THREATDEL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_TEWA_THREATDEL_finalize(
    DMSG_TEWA_THREATDEL* sample)
{
    DMSG_TEWA_THREATDEL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_THREATDEL_finalize_ex(
    DMSG_TEWA_THREATDEL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_TEWA_THREATDEL_copy(
    DMSG_TEWA_THREATDEL* dst,
    const DMSG_TEWA_THREATDEL* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_THREATDEL' sequence class.
 */
#define T DMSG_TEWA_THREATDEL
#define TSeq DMSG_TEWA_THREATDELSeq
#define T_initialize_ex DMSG_TEWA_THREATDEL_initialize_ex
#define T_finalize_ex   DMSG_TEWA_THREATDEL_finalize_ex
#define T_copy       DMSG_TEWA_THREATDEL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_AIRTHREATEVALUATIONTYPENAME = "DMSG_TEWA_AIRTHREATEVALUATION";

DDS_TypeCode* DMSG_TEWA_AIRTHREATEVALUATION_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_AIRTHREATEVALUATION_g_tc_members[7]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPriority",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sScore",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sWeight",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sTimeToGo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageAvailability",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_AIRTHREATEVALUATION_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_AIRTHREATEVALUATION", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        7, /* Number of members */
        DMSG_TEWA_AIRTHREATEVALUATION_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_AIRTHREATEVALUATION*/

    if (is_initialized) {
        return &DMSG_TEWA_AIRTHREATEVALUATION_g_tc;
    }


    DMSG_TEWA_AIRTHREATEVALUATION_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_TEWA_AIRTHREATEVALUATION_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_AIRTHREATEVALUATION_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_AIRTHREATEVALUATION_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TEWA_AIRTHREATEVALUATION_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TEWA_AIRTHREATEVALUATION_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TEWA_AIRTHREATEVALUATION_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_AIRTHREATEVALUATION_g_tc;
}


RTIBool DMSG_TEWA_AIRTHREATEVALUATION_initialize(
    DMSG_TEWA_AIRTHREATEVALUATION* sample) {
  return DMSG_TEWA_AIRTHREATEVALUATION_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_AIRTHREATEVALUATION_initialize_ex(
    DMSG_TEWA_AIRTHREATEVALUATION* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cPriority)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sScore)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sWeight)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sTimeToGo)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cEngageAvailability)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TEWA_AIRTHREATEVALUATION_finalize(
    DMSG_TEWA_AIRTHREATEVALUATION* sample)
{
    DMSG_TEWA_AIRTHREATEVALUATION_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_AIRTHREATEVALUATION_finalize_ex(
    DMSG_TEWA_AIRTHREATEVALUATION* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_TEWA_AIRTHREATEVALUATION_copy(
    DMSG_TEWA_AIRTHREATEVALUATION* dst,
    const DMSG_TEWA_AIRTHREATEVALUATION* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cPriority, &src->cPriority)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sScore, &src->sScore)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sWeight, &src->sWeight)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sTimeToGo, &src->sTimeToGo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageAvailability, &src->cEngageAvailability)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_AIRTHREATEVALUATION' sequence class.
 */
#define T DMSG_TEWA_AIRTHREATEVALUATION
#define TSeq DMSG_TEWA_AIRTHREATEVALUATIONSeq
#define T_initialize_ex DMSG_TEWA_AIRTHREATEVALUATION_initialize_ex
#define T_finalize_ex   DMSG_TEWA_AIRTHREATEVALUATION_finalize_ex
#define T_copy       DMSG_TEWA_AIRTHREATEVALUATION_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_SHIPTHREATEVALUATIONTYPENAME = "DMSG_TEWA_SHIPTHREATEVALUATION";

DDS_TypeCode* DMSG_TEWA_SHIPTHREATEVALUATION_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_sWeaponCapability_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,10,NULL,NULL);

    static DDS_TypeCode_Member DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_members[7]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPriority",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fMaxEffectiveRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sWeaponCapability",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageAvailability",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_SHIPTHREATEVALUATION_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_SHIPTHREATEVALUATION", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        7, /* Number of members */
        DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_SHIPTHREATEVALUATION*/

    if (is_initialized) {
        return &DMSG_TEWA_SHIPTHREATEVALUATION_g_tc;
    }

    DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_sWeaponCapability_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

    DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_sWeaponCapability_array;
    DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TEWA_SHIPTHREATEVALUATION_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_SHIPTHREATEVALUATION_g_tc;
}


RTIBool DMSG_TEWA_SHIPTHREATEVALUATION_initialize(
    DMSG_TEWA_SHIPTHREATEVALUATION* sample) {
  return DMSG_TEWA_SHIPTHREATEVALUATION_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_SHIPTHREATEVALUATION_initialize_ex(
    DMSG_TEWA_SHIPTHREATEVALUATION* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cPriority)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fMaxEffectiveRange)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->sWeaponCapability, (10), RTI_CDR_UNSIGNED_SHORT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cEngageAvailability)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TEWA_SHIPTHREATEVALUATION_finalize(
    DMSG_TEWA_SHIPTHREATEVALUATION* sample)
{
    DMSG_TEWA_SHIPTHREATEVALUATION_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_SHIPTHREATEVALUATION_finalize_ex(
    DMSG_TEWA_SHIPTHREATEVALUATION* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_TEWA_SHIPTHREATEVALUATION_copy(
    DMSG_TEWA_SHIPTHREATEVALUATION* dst,
    const DMSG_TEWA_SHIPTHREATEVALUATION* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cPriority, &src->cPriority)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fMaxEffectiveRange, &src->fMaxEffectiveRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->sWeaponCapability, src->sWeaponCapability, (10), RTI_CDR_UNSIGNED_SHORT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageAvailability, &src->cEngageAvailability)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_SHIPTHREATEVALUATION' sequence class.
 */
#define T DMSG_TEWA_SHIPTHREATEVALUATION
#define TSeq DMSG_TEWA_SHIPTHREATEVALUATIONSeq
#define T_initialize_ex DMSG_TEWA_SHIPTHREATEVALUATION_initialize_ex
#define T_finalize_ex   DMSG_TEWA_SHIPTHREATEVALUATION_finalize_ex
#define T_copy       DMSG_TEWA_SHIPTHREATEVALUATION_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_SUBTHREATEVALUATIONTYPENAME = "DMSG_TEWA_SUBTHREATEVALUATION";

DDS_TypeCode* DMSG_TEWA_SUBTHREATEVALUATION_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[10]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPriority",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cThreatType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDoppler",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sIdentity",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageAvailability",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nFirstOccurenceTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_SUBTHREATEVALUATION_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_SUBTHREATEVALUATION", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        10, /* Number of members */
        DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_SUBTHREATEVALUATION*/

    if (is_initialized) {
        return &DMSG_TEWA_SUBTHREATEVALUATION_g_tc;
    }


    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TEWA_SUBTHREATEVALUATION_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_SUBTHREATEVALUATION_g_tc;
}


RTIBool DMSG_TEWA_SUBTHREATEVALUATION_initialize(
    DMSG_TEWA_SUBTHREATEVALUATION* sample) {
  return DMSG_TEWA_SUBTHREATEVALUATION_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_SUBTHREATEVALUATION_initialize_ex(
    DMSG_TEWA_SUBTHREATEVALUATION* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cPriority)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cThreatType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDoppler)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->sIdentity)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cEngageAvailability)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nFirstOccurenceTime)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TEWA_SUBTHREATEVALUATION_finalize(
    DMSG_TEWA_SUBTHREATEVALUATION* sample)
{
    DMSG_TEWA_SUBTHREATEVALUATION_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_SUBTHREATEVALUATION_finalize_ex(
    DMSG_TEWA_SUBTHREATEVALUATION* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_TEWA_SUBTHREATEVALUATION_copy(
    DMSG_TEWA_SUBTHREATEVALUATION* dst,
    const DMSG_TEWA_SUBTHREATEVALUATION* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cPriority, &src->cPriority)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cThreatType, &src->cThreatType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDoppler, &src->fDoppler)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->sIdentity, &src->sIdentity)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageAvailability, &src->cEngageAvailability)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBearing, &src->fBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nFirstOccurenceTime, &src->nFirstOccurenceTime)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_SUBTHREATEVALUATION' sequence class.
 */
#define T DMSG_TEWA_SUBTHREATEVALUATION
#define TSeq DMSG_TEWA_SUBTHREATEVALUATIONSeq
#define T_initialize_ex DMSG_TEWA_SUBTHREATEVALUATION_initialize_ex
#define T_finalize_ex   DMSG_TEWA_SUBTHREATEVALUATION_finalize_ex
#define T_copy       DMSG_TEWA_SUBTHREATEVALUATION_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_ENGAGEPOSSIBILITYTYPENAME = "DMSG_TEWA_ENGAGEPOSSIBILITY";

DDS_TypeCode* DMSG_TEWA_ENGAGEPOSSIBILITY_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_ENGAGEPOSSIBILITY_g_tc_members[1]=
    {
        {
            (char *)"TBD",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_ENGAGEPOSSIBILITY_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_ENGAGEPOSSIBILITY", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_TEWA_ENGAGEPOSSIBILITY_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_ENGAGEPOSSIBILITY*/

    if (is_initialized) {
        return &DMSG_TEWA_ENGAGEPOSSIBILITY_g_tc;
    }


    DMSG_TEWA_ENGAGEPOSSIBILITY_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_ENGAGEPOSSIBILITY_g_tc;
}


RTIBool DMSG_TEWA_ENGAGEPOSSIBILITY_initialize(
    DMSG_TEWA_ENGAGEPOSSIBILITY* sample) {
  return DMSG_TEWA_ENGAGEPOSSIBILITY_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_ENGAGEPOSSIBILITY_initialize_ex(
    DMSG_TEWA_ENGAGEPOSSIBILITY* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->TBD)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TEWA_ENGAGEPOSSIBILITY_finalize(
    DMSG_TEWA_ENGAGEPOSSIBILITY* sample)
{
    DMSG_TEWA_ENGAGEPOSSIBILITY_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_ENGAGEPOSSIBILITY_finalize_ex(
    DMSG_TEWA_ENGAGEPOSSIBILITY* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TEWA_ENGAGEPOSSIBILITY_copy(
    DMSG_TEWA_ENGAGEPOSSIBILITY* dst,
    const DMSG_TEWA_ENGAGEPOSSIBILITY* src)
{        

    if (!RTICdrType_copyChar(
        &dst->TBD, &src->TBD)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_ENGAGEPOSSIBILITY' sequence class.
 */
#define T DMSG_TEWA_ENGAGEPOSSIBILITY
#define TSeq DMSG_TEWA_ENGAGEPOSSIBILITYSeq
#define T_initialize_ex DMSG_TEWA_ENGAGEPOSSIBILITY_initialize_ex
#define T_finalize_ex   DMSG_TEWA_ENGAGEPOSSIBILITY_finalize_ex
#define T_copy       DMSG_TEWA_ENGAGEPOSSIBILITY_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_SWSTATETYPENAME = "DMSG_TEWA_SWSTATE";

DDS_TypeCode* DMSG_TEWA_SWSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_SWSTATE_g_tc_members[1]=
    {
        {
            (char *)"cSoftwareState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_SWSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_SWSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_TEWA_SWSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_SWSTATE*/

    if (is_initialized) {
        return &DMSG_TEWA_SWSTATE_g_tc;
    }


    DMSG_TEWA_SWSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_SWSTATE_g_tc;
}


RTIBool DMSG_TEWA_SWSTATE_initialize(
    DMSG_TEWA_SWSTATE* sample) {
  return DMSG_TEWA_SWSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_SWSTATE_initialize_ex(
    DMSG_TEWA_SWSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cSoftwareState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TEWA_SWSTATE_finalize(
    DMSG_TEWA_SWSTATE* sample)
{
    DMSG_TEWA_SWSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_SWSTATE_finalize_ex(
    DMSG_TEWA_SWSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TEWA_SWSTATE_copy(
    DMSG_TEWA_SWSTATE* dst,
    const DMSG_TEWA_SWSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cSoftwareState, &src->cSoftwareState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_SWSTATE' sequence class.
 */
#define T DMSG_TEWA_SWSTATE
#define TSeq DMSG_TEWA_SWSTATESeq
#define T_initialize_ex DMSG_TEWA_SWSTATE_initialize_ex
#define T_finalize_ex   DMSG_TEWA_SWSTATE_finalize_ex
#define T_copy       DMSG_TEWA_SWSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_TORPEDOALERTTYPENAME = "DMSG_TEWA_TORPEDOALERT";

DDS_TypeCode* DMSG_TEWA_TORPEDOALERT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_TORPEDOALERT_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bAlert",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_TORPEDOALERT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_TORPEDOALERT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_TEWA_TORPEDOALERT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_TORPEDOALERT*/

    if (is_initialized) {
        return &DMSG_TEWA_TORPEDOALERT_g_tc;
    }


    DMSG_TEWA_TORPEDOALERT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_TEWA_TORPEDOALERT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_TORPEDOALERT_g_tc;
}


RTIBool DMSG_TEWA_TORPEDOALERT_initialize(
    DMSG_TEWA_TORPEDOALERT* sample) {
  return DMSG_TEWA_TORPEDOALERT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_TORPEDOALERT_initialize_ex(
    DMSG_TEWA_TORPEDOALERT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initBoolean(&sample->bAlert)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TEWA_TORPEDOALERT_finalize(
    DMSG_TEWA_TORPEDOALERT* sample)
{
    DMSG_TEWA_TORPEDOALERT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_TORPEDOALERT_finalize_ex(
    DMSG_TEWA_TORPEDOALERT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_TEWA_TORPEDOALERT_copy(
    DMSG_TEWA_TORPEDOALERT* dst,
    const DMSG_TEWA_TORPEDOALERT* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bAlert, &src->bAlert)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_TORPEDOALERT' sequence class.
 */
#define T DMSG_TEWA_TORPEDOALERT
#define TSeq DMSG_TEWA_TORPEDOALERTSeq
#define T_initialize_ex DMSG_TEWA_TORPEDOALERT_initialize_ex
#define T_finalize_ex   DMSG_TEWA_TORPEDOALERT_finalize_ex
#define T_copy       DMSG_TEWA_TORPEDOALERT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_DIRECTENGAGEADVICETYPENAME = "DMSG_TEWA_DIRECTENGAGEADVICE";

DDS_TypeCode* DMSG_TEWA_DIRECTENGAGEADVICE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members[8]=
    {
        {
            (char *)"nWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTrackRadarID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"sRadarType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nChannelID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLong",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dAlt",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"wEngagement_Availability",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_DIRECTENGAGEADVICE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_DIRECTENGAGEADVICE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        8, /* Number of members */
        DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_DIRECTENGAGEADVICE*/

    if (is_initialized) {
        return &DMSG_TEWA_DIRECTENGAGEADVICE_g_tc;
    }


    DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_short;
    DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_TEWA_DIRECTENGAGEADVICE_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_DIRECTENGAGEADVICE_g_tc;
}


RTIBool DMSG_TEWA_DIRECTENGAGEADVICE_initialize(
    DMSG_TEWA_DIRECTENGAGEADVICE* sample) {
  return DMSG_TEWA_DIRECTENGAGEADVICE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_DIRECTENGAGEADVICE_initialize_ex(
    DMSG_TEWA_DIRECTENGAGEADVICE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTrackRadarID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initShort(&sample->sRadarType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nChannelID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dLong)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dAlt)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedShort(&sample->wEngagement_Availability)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TEWA_DIRECTENGAGEADVICE_finalize(
    DMSG_TEWA_DIRECTENGAGEADVICE* sample)
{
    DMSG_TEWA_DIRECTENGAGEADVICE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_DIRECTENGAGEADVICE_finalize_ex(
    DMSG_TEWA_DIRECTENGAGEADVICE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TEWA_DIRECTENGAGEADVICE_copy(
    DMSG_TEWA_DIRECTENGAGEADVICE* dst,
    const DMSG_TEWA_DIRECTENGAGEADVICE* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nWeaponID, &src->nWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTrackRadarID, &src->nTrackRadarID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyShort(
        &dst->sRadarType, &src->sRadarType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nChannelID, &src->nChannelID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dLat, &src->dLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dLong, &src->dLong)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dAlt, &src->dAlt)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->wEngagement_Availability, &src->wEngagement_Availability)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_DIRECTENGAGEADVICE' sequence class.
 */
#define T DMSG_TEWA_DIRECTENGAGEADVICE
#define TSeq DMSG_TEWA_DIRECTENGAGEADVICESeq
#define T_initialize_ex DMSG_TEWA_DIRECTENGAGEADVICE_initialize_ex
#define T_finalize_ex   DMSG_TEWA_DIRECTENGAGEADVICE_finalize_ex
#define T_copy       DMSG_TEWA_DIRECTENGAGEADVICE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TEWA_SENSORWEAPONREQTYPENAME = "DMSG_TEWA_SENSORWEAPONREQ";

DDS_TypeCode* DMSG_TEWA_SENSORWEAPONREQ_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TEWA_SENSORWEAPONREQ_g_tc_members[2]=
    {
        {
            (char *)"nWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nSensorID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TEWA_SENSORWEAPONREQ_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TEWA_SENSORWEAPONREQ", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_TEWA_SENSORWEAPONREQ_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TEWA_SENSORWEAPONREQ*/

    if (is_initialized) {
        return &DMSG_TEWA_SENSORWEAPONREQ_g_tc;
    }


    DMSG_TEWA_SENSORWEAPONREQ_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TEWA_SENSORWEAPONREQ_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_TEWA_SENSORWEAPONREQ_g_tc;
}


RTIBool DMSG_TEWA_SENSORWEAPONREQ_initialize(
    DMSG_TEWA_SENSORWEAPONREQ* sample) {
  return DMSG_TEWA_SENSORWEAPONREQ_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TEWA_SENSORWEAPONREQ_initialize_ex(
    DMSG_TEWA_SENSORWEAPONREQ* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nSensorID)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TEWA_SENSORWEAPONREQ_finalize(
    DMSG_TEWA_SENSORWEAPONREQ* sample)
{
    DMSG_TEWA_SENSORWEAPONREQ_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TEWA_SENSORWEAPONREQ_finalize_ex(
    DMSG_TEWA_SENSORWEAPONREQ* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TEWA_SENSORWEAPONREQ_copy(
    DMSG_TEWA_SENSORWEAPONREQ* dst,
    const DMSG_TEWA_SENSORWEAPONREQ* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nWeaponID, &src->nWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nSensorID, &src->nSensorID)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TEWA_SENSORWEAPONREQ' sequence class.
 */
#define T DMSG_TEWA_SENSORWEAPONREQ
#define TSeq DMSG_TEWA_SENSORWEAPONREQSeq
#define T_initialize_ex DMSG_TEWA_SENSORWEAPONREQ_initialize_ex
#define T_finalize_ex   DMSG_TEWA_SENSORWEAPONREQ_finalize_ex
#define T_copy       DMSG_TEWA_SENSORWEAPONREQ_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_HITEVALUATIONSRESULTTYPENAME = "DMSG_EC_HITEVALUATIONSRESULT";

DDS_TypeCode* DMSG_EC_HITEVALUATIONSRESULT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_HITEVALUATIONSRESULT_g_tc_members[2]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cKillResult",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_HITEVALUATIONSRESULT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_HITEVALUATIONSRESULT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_EC_HITEVALUATIONSRESULT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_HITEVALUATIONSRESULT*/

    if (is_initialized) {
        return &DMSG_EC_HITEVALUATIONSRESULT_g_tc;
    }


    DMSG_EC_HITEVALUATIONSRESULT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_EC_HITEVALUATIONSRESULT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_HITEVALUATIONSRESULT_g_tc;
}


RTIBool DMSG_EC_HITEVALUATIONSRESULT_initialize(
    DMSG_EC_HITEVALUATIONSRESULT* sample) {
  return DMSG_EC_HITEVALUATIONSRESULT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_HITEVALUATIONSRESULT_initialize_ex(
    DMSG_EC_HITEVALUATIONSRESULT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cKillResult)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_HITEVALUATIONSRESULT_finalize(
    DMSG_EC_HITEVALUATIONSRESULT* sample)
{
    DMSG_EC_HITEVALUATIONSRESULT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_HITEVALUATIONSRESULT_finalize_ex(
    DMSG_EC_HITEVALUATIONSRESULT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_EC_HITEVALUATIONSRESULT_copy(
    DMSG_EC_HITEVALUATIONSRESULT* dst,
    const DMSG_EC_HITEVALUATIONSRESULT* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cKillResult, &src->cKillResult)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_HITEVALUATIONSRESULT' sequence class.
 */
#define T DMSG_EC_HITEVALUATIONSRESULT
#define TSeq DMSG_EC_HITEVALUATIONSRESULTSeq
#define T_initialize_ex DMSG_EC_HITEVALUATIONSRESULT_initialize_ex
#define T_finalize_ex   DMSG_EC_HITEVALUATIONSRESULT_finalize_ex
#define T_copy       DMSG_EC_HITEVALUATIONSRESULT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_ENGAGEINFOTYPENAME = "DMSG_EC_ENGAGEINFO";

DDS_TypeCode* DMSG_EC_ENGAGEINFO_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_EC_ENGAGEINFO_g_tc_EngageTime_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,6,NULL,NULL);

    static DDS_TypeCode_Member DMSG_EC_ENGAGEINFO_g_tc_members[10]=
    {
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"assignNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackRdrID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cRdrType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cChannelID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageInfo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"EngageTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_ENGAGEINFO_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_ENGAGEINFO", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        10, /* Number of members */
        DMSG_EC_ENGAGEINFO_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_ENGAGEINFO*/

    if (is_initialized) {
        return &DMSG_EC_ENGAGEINFO_g_tc;
    }

    DMSG_EC_ENGAGEINFO_g_tc_EngageTime_array._data._typeCode = (RTICdrTypeCode *)time1_get_typecode();

    DMSG_EC_ENGAGEINFO_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEINFO_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_EC_ENGAGEINFO_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_EC_ENGAGEINFO_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEINFO_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEINFO_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEINFO_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEINFO_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEINFO_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEINFO_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DMSG_EC_ENGAGEINFO_g_tc_EngageTime_array;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_ENGAGEINFO_g_tc;
}


RTIBool DMSG_EC_ENGAGEINFO_initialize(
    DMSG_EC_ENGAGEINFO* sample) {
  return DMSG_EC_ENGAGEINFO_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_ENGAGEINFO_initialize_ex(
    DMSG_EC_ENGAGEINFO* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initUnsignedShort(&sample->assignNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackRdrID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cRdrType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cChannelID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cEngageInfo)) {
        return RTI_FALSE;
    }                
            
    
    {
        int i = 0;
        time1* elem =
            (time1*) &sample->EngageTime[0];

        for (i = 0; i < (int)((6)); ++i, ++elem) {
            if (!time1_initialize_ex(elem,allocatePointers)) {
                return RTI_FALSE;
            }
        }
    }
            

    return RTI_TRUE;
}

void DMSG_EC_ENGAGEINFO_finalize(
    DMSG_EC_ENGAGEINFO* sample)
{
    DMSG_EC_ENGAGEINFO_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_ENGAGEINFO_finalize_ex(
    DMSG_EC_ENGAGEINFO* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
    
    {
        int i = 0;
        time1* elem =
            (time1*) &sample->EngageTime[0];

        for (i = 0; i < (int)((6)); ++i, ++elem) {
            time1_finalize_ex(elem,deletePointers);
        }
    }
            
}

RTIBool DMSG_EC_ENGAGEINFO_copy(
    DMSG_EC_ENGAGEINFO* dst,
    const DMSG_EC_ENGAGEINFO* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->assignNum, &src->assignNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackRdrID, &src->cTrackRdrID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cRdrType, &src->cRdrType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cChannelID, &src->cChannelID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageInfo, &src->cEngageInfo)) {
        return RTI_FALSE;
    }
            
    
    {
        int i = 0;
        time1* elemOut = (time1*) &dst->EngageTime[0];
        const time1* elemIn = (const time1*) &src->EngageTime[0];

        for (i = 0; i < (int)((6));
             ++i, ++elemOut, ++elemIn) {
            if (!time1_copy(elemOut,(const time1*)elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_ENGAGEINFO' sequence class.
 */
#define T DMSG_EC_ENGAGEINFO
#define TSeq DMSG_EC_ENGAGEINFOSeq
#define T_initialize_ex DMSG_EC_ENGAGEINFO_initialize_ex
#define T_finalize_ex   DMSG_EC_ENGAGEINFO_finalize_ex
#define T_copy       DMSG_EC_ENGAGEINFO_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_ENGAGEASSIGNTYPENAME = "DMSG_EC_ENGAGEASSIGN";

DDS_TypeCode* DMSG_EC_ENGAGEASSIGN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_EC_ENGAGEASSIGN_g_tc_EngageTime_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,6,NULL,NULL);

    static DDS_TypeCode_Member DMSG_EC_ENGAGEASSIGN_g_tc_members[14]=
    {
        {
            (char *)"cEngageType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"assignNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTrackRdrID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cRdrType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cChannelID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"EngageTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLatitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLongitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dAltitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_ENGAGEASSIGN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_ENGAGEASSIGN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        14, /* Number of members */
        DMSG_EC_ENGAGEASSIGN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_ENGAGEASSIGN*/

    if (is_initialized) {
        return &DMSG_EC_ENGAGEASSIGN_g_tc;
    }

    DMSG_EC_ENGAGEASSIGN_g_tc_EngageTime_array._data._typeCode = (RTICdrTypeCode *)time1_get_typecode();

    DMSG_EC_ENGAGEASSIGN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_EC_ENGAGEASSIGN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DMSG_EC_ENGAGEASSIGN_g_tc_EngageTime_array;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_EC_ENGAGEASSIGN_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_ENGAGEASSIGN_g_tc;
}


RTIBool DMSG_EC_ENGAGEASSIGN_initialize(
    DMSG_EC_ENGAGEASSIGN* sample) {
  return DMSG_EC_ENGAGEASSIGN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_ENGAGEASSIGN_initialize_ex(
    DMSG_EC_ENGAGEASSIGN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngageType)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initUnsignedShort(&sample->assignNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTrackRdrID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cRdrType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cChannelID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    
    {
        int i = 0;
        time1* elem =
            (time1*) &sample->EngageTime[0];

        for (i = 0; i < (int)((6)); ++i, ++elem) {
            if (!time1_initialize_ex(elem,allocatePointers)) {
                return RTI_FALSE;
            }
        }
    }
            
    if (!RTICdrType_initDouble(&sample->dLatitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dLongitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dAltitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fBearing)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_ENGAGEASSIGN_finalize(
    DMSG_EC_ENGAGEASSIGN* sample)
{
    DMSG_EC_ENGAGEASSIGN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_ENGAGEASSIGN_finalize_ex(
    DMSG_EC_ENGAGEASSIGN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
    
    {
        int i = 0;
        time1* elem =
            (time1*) &sample->EngageTime[0];

        for (i = 0; i < (int)((6)); ++i, ++elem) {
            time1_finalize_ex(elem,deletePointers);
        }
    }
            
}

RTIBool DMSG_EC_ENGAGEASSIGN_copy(
    DMSG_EC_ENGAGEASSIGN* dst,
    const DMSG_EC_ENGAGEASSIGN* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngageType, &src->cEngageType)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedShort(
        &dst->assignNum, &src->assignNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTrackRdrID, &src->cTrackRdrID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cRdrType, &src->cRdrType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cChannelID, &src->cChannelID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    
    {
        int i = 0;
        time1* elemOut = (time1*) &dst->EngageTime[0];
        const time1* elemIn = (const time1*) &src->EngageTime[0];

        for (i = 0; i < (int)((6));
             ++i, ++elemOut, ++elemIn) {
            if (!time1_copy(elemOut,(const time1*)elemIn)) {
                return RTI_FALSE;
            }
        }
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dLatitude, &src->dLatitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dLongitude, &src->dLongitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dAltitude, &src->dAltitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRange, &src->fRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBearing, &src->fBearing)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_ENGAGEASSIGN' sequence class.
 */
#define T DMSG_EC_ENGAGEASSIGN
#define TSeq DMSG_EC_ENGAGEASSIGNSeq
#define T_initialize_ex DMSG_EC_ENGAGEASSIGN_initialize_ex
#define T_finalize_ex   DMSG_EC_ENGAGEASSIGN_finalize_ex
#define T_copy       DMSG_EC_ENGAGEASSIGN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_ENGAGEPLANSETTYPENAME = "DMSG_EC_ENGAGEPLANSET";

DDS_TypeCode* DMSG_EC_ENGAGEPLANSET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_ENGAGEPLANSET_g_tc_members[2]=
    {
        {
            (char *)"cEngagePlanCtrl",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_ENGAGEPLANSET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_ENGAGEPLANSET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_EC_ENGAGEPLANSET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_ENGAGEPLANSET*/

    if (is_initialized) {
        return &DMSG_EC_ENGAGEPLANSET_g_tc;
    }


    DMSG_EC_ENGAGEPLANSET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGEPLANSET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();

    is_initialized = RTI_TRUE;

    return &DMSG_EC_ENGAGEPLANSET_g_tc;
}


RTIBool DMSG_EC_ENGAGEPLANSET_initialize(
    DMSG_EC_ENGAGEPLANSET* sample) {
  return DMSG_EC_ENGAGEPLANSET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_ENGAGEPLANSET_initialize_ex(
    DMSG_EC_ENGAGEPLANSET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cEngagePlanCtrl)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_EC_ENGAGEPLANSET_finalize(
    DMSG_EC_ENGAGEPLANSET* sample)
{
    DMSG_EC_ENGAGEPLANSET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_ENGAGEPLANSET_finalize_ex(
    DMSG_EC_ENGAGEPLANSET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_EC_ENGAGEPLANSET_copy(
    DMSG_EC_ENGAGEPLANSET* dst,
    const DMSG_EC_ENGAGEPLANSET* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cEngagePlanCtrl, &src->cEngagePlanCtrl)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_ENGAGEPLANSET' sequence class.
 */
#define T DMSG_EC_ENGAGEPLANSET
#define TSeq DMSG_EC_ENGAGEPLANSETSeq
#define T_initialize_ex DMSG_EC_ENGAGEPLANSET_initialize_ex
#define T_finalize_ex   DMSG_EC_ENGAGEPLANSET_finalize_ex
#define T_copy       DMSG_EC_ENGAGEPLANSET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_FIREPERMITKEYSTATETYPENAME = "DMSG_EC_FIREPERMITKEYSTATE";

DDS_TypeCode* DMSG_EC_FIREPERMITKEYSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_FIREPERMITKEYSTATE_g_tc_members[1]=
    {
        {
            (char *)"cFirePermitKey",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_FIREPERMITKEYSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_FIREPERMITKEYSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_EC_FIREPERMITKEYSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_FIREPERMITKEYSTATE*/

    if (is_initialized) {
        return &DMSG_EC_FIREPERMITKEYSTATE_g_tc;
    }


    DMSG_EC_FIREPERMITKEYSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_FIREPERMITKEYSTATE_g_tc;
}


RTIBool DMSG_EC_FIREPERMITKEYSTATE_initialize(
    DMSG_EC_FIREPERMITKEYSTATE* sample) {
  return DMSG_EC_FIREPERMITKEYSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_FIREPERMITKEYSTATE_initialize_ex(
    DMSG_EC_FIREPERMITKEYSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cFirePermitKey)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_FIREPERMITKEYSTATE_finalize(
    DMSG_EC_FIREPERMITKEYSTATE* sample)
{
    DMSG_EC_FIREPERMITKEYSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_FIREPERMITKEYSTATE_finalize_ex(
    DMSG_EC_FIREPERMITKEYSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_EC_FIREPERMITKEYSTATE_copy(
    DMSG_EC_FIREPERMITKEYSTATE* dst,
    const DMSG_EC_FIREPERMITKEYSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cFirePermitKey, &src->cFirePermitKey)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_FIREPERMITKEYSTATE' sequence class.
 */
#define T DMSG_EC_FIREPERMITKEYSTATE
#define TSeq DMSG_EC_FIREPERMITKEYSTATESeq
#define T_initialize_ex DMSG_EC_FIREPERMITKEYSTATE_initialize_ex
#define T_finalize_ex   DMSG_EC_FIREPERMITKEYSTATE_finalize_ex
#define T_copy       DMSG_EC_FIREPERMITKEYSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_ENGAGESTATETYPENAME = "DMSG_EC_ENGAGESTATE";

DDS_TypeCode* DMSG_EC_ENGAGESTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_ENGAGESTATE_g_tc_members[4]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTube",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byEngageState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_ENGAGESTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_ENGAGESTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        4, /* Number of members */
        DMSG_EC_ENGAGESTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_ENGAGESTATE*/

    if (is_initialized) {
        return &DMSG_EC_ENGAGESTATE_g_tc;
    }


    DMSG_EC_ENGAGESTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_EC_ENGAGESTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGESTATE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_ENGAGESTATE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_ENGAGESTATE_g_tc;
}


RTIBool DMSG_EC_ENGAGESTATE_initialize(
    DMSG_EC_ENGAGESTATE* sample) {
  return DMSG_EC_ENGAGESTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_ENGAGESTATE_initialize_ex(
    DMSG_EC_ENGAGESTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->byTube)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTubeNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byEngageState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_ENGAGESTATE_finalize(
    DMSG_EC_ENGAGESTATE* sample)
{
    DMSG_EC_ENGAGESTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_ENGAGESTATE_finalize_ex(
    DMSG_EC_ENGAGESTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_EC_ENGAGESTATE_copy(
    DMSG_EC_ENGAGESTATE* dst,
    const DMSG_EC_ENGAGESTATE* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTube, &src->byTube)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTubeNum, &src->byTubeNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byEngageState, &src->byEngageState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_ENGAGESTATE' sequence class.
 */
#define T DMSG_EC_ENGAGESTATE
#define TSeq DMSG_EC_ENGAGESTATESeq
#define T_initialize_ex DMSG_EC_ENGAGESTATE_initialize_ex
#define T_finalize_ex   DMSG_EC_ENGAGESTATE_finalize_ex
#define T_copy       DMSG_EC_ENGAGESTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_SWSTATETYPENAME = "DMSG_EC_SWSTATE";

DDS_TypeCode* DMSG_EC_SWSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_SWSTATE_g_tc_members[1]=
    {
        {
            (char *)"cSoftwareState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_SWSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_SWSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_EC_SWSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_SWSTATE*/

    if (is_initialized) {
        return &DMSG_EC_SWSTATE_g_tc;
    }


    DMSG_EC_SWSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_SWSTATE_g_tc;
}


RTIBool DMSG_EC_SWSTATE_initialize(
    DMSG_EC_SWSTATE* sample) {
  return DMSG_EC_SWSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_SWSTATE_initialize_ex(
    DMSG_EC_SWSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cSoftwareState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_SWSTATE_finalize(
    DMSG_EC_SWSTATE* sample)
{
    DMSG_EC_SWSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_SWSTATE_finalize_ex(
    DMSG_EC_SWSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_EC_SWSTATE_copy(
    DMSG_EC_SWSTATE* dst,
    const DMSG_EC_SWSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cSoftwareState, &src->cSoftwareState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_SWSTATE' sequence class.
 */
#define T DMSG_EC_SWSTATE
#define TSeq DMSG_EC_SWSTATESeq
#define T_initialize_ex DMSG_EC_SWSTATE_initialize_ex
#define T_finalize_ex   DMSG_EC_SWSTATE_finalize_ex
#define T_copy       DMSG_EC_SWSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_WEAPONCTRLMODETYPENAME = "DMSG_EC_WEAPONCTRLMODE";

DDS_TypeCode* DMSG_EC_WEAPONCTRLMODE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_WEAPONCTRLMODE_g_tc_members[1]=
    {
        {
            (char *)"cControlMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_WEAPONCTRLMODE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_WEAPONCTRLMODE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_EC_WEAPONCTRLMODE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_WEAPONCTRLMODE*/

    if (is_initialized) {
        return &DMSG_EC_WEAPONCTRLMODE_g_tc;
    }


    DMSG_EC_WEAPONCTRLMODE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_WEAPONCTRLMODE_g_tc;
}


RTIBool DMSG_EC_WEAPONCTRLMODE_initialize(
    DMSG_EC_WEAPONCTRLMODE* sample) {
  return DMSG_EC_WEAPONCTRLMODE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_WEAPONCTRLMODE_initialize_ex(
    DMSG_EC_WEAPONCTRLMODE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cControlMode)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_WEAPONCTRLMODE_finalize(
    DMSG_EC_WEAPONCTRLMODE* sample)
{
    DMSG_EC_WEAPONCTRLMODE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_WEAPONCTRLMODE_finalize_ex(
    DMSG_EC_WEAPONCTRLMODE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_EC_WEAPONCTRLMODE_copy(
    DMSG_EC_WEAPONCTRLMODE* dst,
    const DMSG_EC_WEAPONCTRLMODE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cControlMode, &src->cControlMode)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_WEAPONCTRLMODE' sequence class.
 */
#define T DMSG_EC_WEAPONCTRLMODE
#define TSeq DMSG_EC_WEAPONCTRLMODESeq
#define T_initialize_ex DMSG_EC_WEAPONCTRLMODE_initialize_ex
#define T_finalize_ex   DMSG_EC_WEAPONCTRLMODE_finalize_ex
#define T_copy       DMSG_EC_WEAPONCTRLMODE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_HORTUBEASSIGNTYPENAME = "DMSG_EC_HORTUBEASSIGN";

DDS_TypeCode* DMSG_EC_HORTUBEASSIGN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_HORTUBEASSIGN_g_tc_members[3]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_HORTUBEASSIGN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_HORTUBEASSIGN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_EC_HORTUBEASSIGN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_HORTUBEASSIGN*/

    if (is_initialized) {
        return &DMSG_EC_HORTUBEASSIGN_g_tc;
    }


    DMSG_EC_HORTUBEASSIGN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_HORTUBEASSIGN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_EC_HORTUBEASSIGN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_HORTUBEASSIGN_g_tc;
}


RTIBool DMSG_EC_HORTUBEASSIGN_initialize(
    DMSG_EC_HORTUBEASSIGN* sample) {
  return DMSG_EC_HORTUBEASSIGN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_HORTUBEASSIGN_initialize_ex(
    DMSG_EC_HORTUBEASSIGN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->byTubeNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_HORTUBEASSIGN_finalize(
    DMSG_EC_HORTUBEASSIGN* sample)
{
    DMSG_EC_HORTUBEASSIGN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_HORTUBEASSIGN_finalize_ex(
    DMSG_EC_HORTUBEASSIGN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_EC_HORTUBEASSIGN_copy(
    DMSG_EC_HORTUBEASSIGN* dst,
    const DMSG_EC_HORTUBEASSIGN* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTubeNum, &src->byTubeNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_HORTUBEASSIGN' sequence class.
 */
#define T DMSG_EC_HORTUBEASSIGN
#define TSeq DMSG_EC_HORTUBEASSIGNSeq
#define T_initialize_ex DMSG_EC_HORTUBEASSIGN_initialize_ex
#define T_finalize_ex   DMSG_EC_HORTUBEASSIGN_finalize_ex
#define T_copy       DMSG_EC_HORTUBEASSIGN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_VERTUBEASSIGNTYPENAME = "DMSG_EC_VERTUBEASSIGN";

DDS_TypeCode* DMSG_EC_VERTUBEASSIGN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_VERTUBEASSIGN_g_tc_members[3]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byLauncherNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_VERTUBEASSIGN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_VERTUBEASSIGN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_EC_VERTUBEASSIGN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_VERTUBEASSIGN*/

    if (is_initialized) {
        return &DMSG_EC_VERTUBEASSIGN_g_tc;
    }


    DMSG_EC_VERTUBEASSIGN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_VERTUBEASSIGN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_EC_VERTUBEASSIGN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_VERTUBEASSIGN_g_tc;
}


RTIBool DMSG_EC_VERTUBEASSIGN_initialize(
    DMSG_EC_VERTUBEASSIGN* sample) {
  return DMSG_EC_VERTUBEASSIGN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_VERTUBEASSIGN_initialize_ex(
    DMSG_EC_VERTUBEASSIGN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->byLauncherNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_VERTUBEASSIGN_finalize(
    DMSG_EC_VERTUBEASSIGN* sample)
{
    DMSG_EC_VERTUBEASSIGN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_VERTUBEASSIGN_finalize_ex(
    DMSG_EC_VERTUBEASSIGN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_EC_VERTUBEASSIGN_copy(
    DMSG_EC_VERTUBEASSIGN* dst,
    const DMSG_EC_VERTUBEASSIGN* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byLauncherNum, &src->byLauncherNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_VERTUBEASSIGN' sequence class.
 */
#define T DMSG_EC_VERTUBEASSIGN
#define TSeq DMSG_EC_VERTUBEASSIGNSeq
#define T_initialize_ex DMSG_EC_VERTUBEASSIGN_initialize_ex
#define T_finalize_ex   DMSG_EC_VERTUBEASSIGN_finalize_ex
#define T_copy       DMSG_EC_VERTUBEASSIGN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_WEAPONFIRESTATETYPENAME = "DMSG_EC_WEAPONFIRESTATE";

DDS_TypeCode* DMSG_EC_WEAPONFIRESTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_WEAPONFIRESTATE_g_tc_members[2]=
    {
        {
            (char *)"cWeaponID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFireState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_WEAPONFIRESTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_WEAPONFIRESTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_EC_WEAPONFIRESTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_WEAPONFIRESTATE*/

    if (is_initialized) {
        return &DMSG_EC_WEAPONFIRESTATE_g_tc;
    }


    DMSG_EC_WEAPONFIRESTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_WEAPONFIRESTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_WEAPONFIRESTATE_g_tc;
}


RTIBool DMSG_EC_WEAPONFIRESTATE_initialize(
    DMSG_EC_WEAPONFIRESTATE* sample) {
  return DMSG_EC_WEAPONFIRESTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_WEAPONFIRESTATE_initialize_ex(
    DMSG_EC_WEAPONFIRESTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cWeaponID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFireState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_WEAPONFIRESTATE_finalize(
    DMSG_EC_WEAPONFIRESTATE* sample)
{
    DMSG_EC_WEAPONFIRESTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_WEAPONFIRESTATE_finalize_ex(
    DMSG_EC_WEAPONFIRESTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_EC_WEAPONFIRESTATE_copy(
    DMSG_EC_WEAPONFIRESTATE* dst,
    const DMSG_EC_WEAPONFIRESTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cWeaponID, &src->cWeaponID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFireState, &src->cFireState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_WEAPONFIRESTATE' sequence class.
 */
#define T DMSG_EC_WEAPONFIRESTATE
#define TSeq DMSG_EC_WEAPONFIRESTATESeq
#define T_initialize_ex DMSG_EC_WEAPONFIRESTATE_initialize_ex
#define T_finalize_ex   DMSG_EC_WEAPONFIRESTATE_finalize_ex
#define T_copy       DMSG_EC_WEAPONFIRESTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_EC_FIRECMDTYPENAME = "DMSG_EC_FIRECMD";

DDS_TypeCode* DMSG_EC_FIRECMD_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_EC_FIRECMD_g_tc_members[4]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cLauncherNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cLinkLauncherNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFireCmd",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_EC_FIRECMD_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_EC_FIRECMD", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        4, /* Number of members */
        DMSG_EC_FIRECMD_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_EC_FIRECMD*/

    if (is_initialized) {
        return &DMSG_EC_FIRECMD_g_tc;
    }


    DMSG_EC_FIRECMD_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_FIRECMD_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_FIRECMD_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_EC_FIRECMD_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_EC_FIRECMD_g_tc;
}


RTIBool DMSG_EC_FIRECMD_initialize(
    DMSG_EC_FIRECMD* sample) {
  return DMSG_EC_FIRECMD_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_EC_FIRECMD_initialize_ex(
    DMSG_EC_FIRECMD* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cLauncherNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cLinkLauncherNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFireCmd)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_EC_FIRECMD_finalize(
    DMSG_EC_FIRECMD* sample)
{
    DMSG_EC_FIRECMD_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_EC_FIRECMD_finalize_ex(
    DMSG_EC_FIRECMD* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_EC_FIRECMD_copy(
    DMSG_EC_FIRECMD* dst,
    const DMSG_EC_FIRECMD* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cLauncherNum, &src->cLauncherNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cLinkLauncherNum, &src->cLinkLauncherNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFireCmd, &src->cFireCmd)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_EC_FIRECMD' sequence class.
 */
#define T DMSG_EC_FIRECMD
#define TSeq DMSG_EC_FIRECMDSeq
#define T_initialize_ex DMSG_EC_FIRECMD_initialize_ex
#define T_finalize_ex   DMSG_EC_FIRECMD_finalize_ex
#define T_copy       DMSG_EC_FIRECMD_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TACTICORDERTYPENAME = "DMSG_HMI_TACTICORDER";

DDS_TypeCode* DMSG_HMI_TACTICORDER_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TACTICORDER_g_tc_members[1]=
    {
        {
            (char *)"nTacticOrder",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TACTICORDER_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TACTICORDER", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_TACTICORDER_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TACTICORDER*/

    if (is_initialized) {
        return &DMSG_HMI_TACTICORDER_g_tc;
    }


    DMSG_HMI_TACTICORDER_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TACTICORDER_g_tc;
}


RTIBool DMSG_HMI_TACTICORDER_initialize(
    DMSG_HMI_TACTICORDER* sample) {
  return DMSG_HMI_TACTICORDER_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TACTICORDER_initialize_ex(
    DMSG_HMI_TACTICORDER* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nTacticOrder)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TACTICORDER_finalize(
    DMSG_HMI_TACTICORDER* sample)
{
    DMSG_HMI_TACTICORDER_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TACTICORDER_finalize_ex(
    DMSG_HMI_TACTICORDER* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_TACTICORDER_copy(
    DMSG_HMI_TACTICORDER* dst,
    const DMSG_HMI_TACTICORDER* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nTacticOrder, &src->nTacticOrder)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TACTICORDER' sequence class.
 */
#define T DMSG_HMI_TACTICORDER
#define TSeq DMSG_HMI_TACTICORDERSeq
#define T_initialize_ex DMSG_HMI_TACTICORDER_initialize_ex
#define T_finalize_ex   DMSG_HMI_TACTICORDER_finalize_ex
#define T_copy       DMSG_HMI_TACTICORDER_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_DCOYLAUNCHMODETYPENAME = "DMSG_HMI_DCOYLAUNCHMODE";

DDS_TypeCode* DMSG_HMI_DCOYLAUNCHMODE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_DCOYLAUNCHMODE_g_tc_members[1]=
    {
        {
            (char *)"nDecoyLaunchMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_DCOYLAUNCHMODE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_DCOYLAUNCHMODE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_DCOYLAUNCHMODE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_DCOYLAUNCHMODE*/

    if (is_initialized) {
        return &DMSG_HMI_DCOYLAUNCHMODE_g_tc;
    }


    DMSG_HMI_DCOYLAUNCHMODE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_DCOYLAUNCHMODE_g_tc;
}


RTIBool DMSG_HMI_DCOYLAUNCHMODE_initialize(
    DMSG_HMI_DCOYLAUNCHMODE* sample) {
  return DMSG_HMI_DCOYLAUNCHMODE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_DCOYLAUNCHMODE_initialize_ex(
    DMSG_HMI_DCOYLAUNCHMODE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nDecoyLaunchMode)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_DCOYLAUNCHMODE_finalize(
    DMSG_HMI_DCOYLAUNCHMODE* sample)
{
    DMSG_HMI_DCOYLAUNCHMODE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_DCOYLAUNCHMODE_finalize_ex(
    DMSG_HMI_DCOYLAUNCHMODE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_DCOYLAUNCHMODE_copy(
    DMSG_HMI_DCOYLAUNCHMODE* dst,
    const DMSG_HMI_DCOYLAUNCHMODE* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nDecoyLaunchMode, &src->nDecoyLaunchMode)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_DCOYLAUNCHMODE' sequence class.
 */
#define T DMSG_HMI_DCOYLAUNCHMODE
#define TSeq DMSG_HMI_DCOYLAUNCHMODESeq
#define T_initialize_ex DMSG_HMI_DCOYLAUNCHMODE_initialize_ex
#define T_finalize_ex   DMSG_HMI_DCOYLAUNCHMODE_finalize_ex
#define T_copy       DMSG_HMI_DCOYLAUNCHMODE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_DCOYTUBESETTYPENAME = "DMSG_HMI_DCOYTUBESET";

DDS_TypeCode* DMSG_HMI_DCOYTUBESET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_DCOYTUBESET_g_tc_members[2]=
    {
        {
            (char *)"cLauncherID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_DCOYTUBESET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_DCOYTUBESET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_DCOYTUBESET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_DCOYTUBESET*/

    if (is_initialized) {
        return &DMSG_HMI_DCOYTUBESET_g_tc;
    }


    DMSG_HMI_DCOYTUBESET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_DCOYTUBESET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_DCOYTUBESET_g_tc;
}


RTIBool DMSG_HMI_DCOYTUBESET_initialize(
    DMSG_HMI_DCOYTUBESET* sample) {
  return DMSG_HMI_DCOYTUBESET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_DCOYTUBESET_initialize_ex(
    DMSG_HMI_DCOYTUBESET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cLauncherID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_DCOYTUBESET_finalize(
    DMSG_HMI_DCOYTUBESET* sample)
{
    DMSG_HMI_DCOYTUBESET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_DCOYTUBESET_finalize_ex(
    DMSG_HMI_DCOYTUBESET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_DCOYTUBESET_copy(
    DMSG_HMI_DCOYTUBESET* dst,
    const DMSG_HMI_DCOYTUBESET* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cLauncherID, &src->cLauncherID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_DCOYTUBESET' sequence class.
 */
#define T DMSG_HMI_DCOYTUBESET
#define TSeq DMSG_HMI_DCOYTUBESETSeq
#define T_initialize_ex DMSG_HMI_DCOYTUBESET_initialize_ex
#define T_finalize_ex   DMSG_HMI_DCOYTUBESET_finalize_ex
#define T_copy       DMSG_HMI_DCOYTUBESET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_MISSILECTRLTYPENAME = "DMSG_HMI_MISSILECTRL";

DDS_TypeCode* DMSG_HMI_MISSILECTRL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_MISSILECTRL_g_tc_members[2]=
    {
        {
            (char *)"byLauncherNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCtrlCmd",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_MISSILECTRL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_MISSILECTRL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_MISSILECTRL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_MISSILECTRL*/

    if (is_initialized) {
        return &DMSG_HMI_MISSILECTRL_g_tc;
    }


    DMSG_HMI_MISSILECTRL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MISSILECTRL_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_MISSILECTRL_g_tc;
}


RTIBool DMSG_HMI_MISSILECTRL_initialize(
    DMSG_HMI_MISSILECTRL* sample) {
  return DMSG_HMI_MISSILECTRL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_MISSILECTRL_initialize_ex(
    DMSG_HMI_MISSILECTRL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byLauncherNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCtrlCmd)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_MISSILECTRL_finalize(
    DMSG_HMI_MISSILECTRL* sample)
{
    DMSG_HMI_MISSILECTRL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_MISSILECTRL_finalize_ex(
    DMSG_HMI_MISSILECTRL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_MISSILECTRL_copy(
    DMSG_HMI_MISSILECTRL* dst,
    const DMSG_HMI_MISSILECTRL* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byLauncherNum, &src->byLauncherNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCtrlCmd, &src->byCtrlCmd)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_MISSILECTRL' sequence class.
 */
#define T DMSG_HMI_MISSILECTRL
#define TSeq DMSG_HMI_MISSILECTRLSeq
#define T_initialize_ex DMSG_HMI_MISSILECTRL_initialize_ex
#define T_finalize_ex   DMSG_HMI_MISSILECTRL_finalize_ex
#define T_copy       DMSG_HMI_MISSILECTRL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_MISSILEENGAGEPLANTYPENAME = "DMSG_HMI_MISSILEENGAGEPLAN";

DDS_TypeCode* DMSG_HMI_MISSILEENGAGEPLAN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[26]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byMissileNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nWpCnt",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP1Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP1Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP2Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP2Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP3Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP3Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP4Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP4Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP5Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP5Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP6Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP6Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP7Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP7Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP8Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP8Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nStaccatoVolley",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nAttackMissileCnt",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nAttackMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nSearchType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nAttackType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_MISSILEENGAGEPLAN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_MISSILEENGAGEPLAN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        26, /* Number of members */
        DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_MISSILEENGAGEPLAN*/

    if (is_initialized) {
        return &DMSG_HMI_MISSILEENGAGEPLAN_g_tc;
    }


    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_MISSILEENGAGEPLAN_g_tc_members[25]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_MISSILEENGAGEPLAN_g_tc;
}


RTIBool DMSG_HMI_MISSILEENGAGEPLAN_initialize(
    DMSG_HMI_MISSILEENGAGEPLAN* sample) {
  return DMSG_HMI_MISSILEENGAGEPLAN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_MISSILEENGAGEPLAN_initialize_ex(
    DMSG_HMI_MISSILEENGAGEPLAN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byMissileNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nWpCnt)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initDouble(&sample->dWP1Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP1Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP2Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP2Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP3Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP3Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP4Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP4Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP5Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP5Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP6Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP6Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP7Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP7Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP8Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP8Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nStaccatoVolley)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nAttackMissileCnt)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nAttackMode)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nSearchType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nAttackType)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_MISSILEENGAGEPLAN_finalize(
    DMSG_HMI_MISSILEENGAGEPLAN* sample)
{
    DMSG_HMI_MISSILEENGAGEPLAN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_MISSILEENGAGEPLAN_finalize_ex(
    DMSG_HMI_MISSILEENGAGEPLAN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_MISSILEENGAGEPLAN_copy(
    DMSG_HMI_MISSILEENGAGEPLAN* dst,
    const DMSG_HMI_MISSILEENGAGEPLAN* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byMissileNum, &src->byMissileNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nWpCnt, &src->nWpCnt)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP1Lat, &src->dWP1Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP1Lon, &src->dWP1Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP2Lat, &src->dWP2Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP2Lon, &src->dWP2Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP3Lat, &src->dWP3Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP3Lon, &src->dWP3Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP4Lat, &src->dWP4Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP4Lon, &src->dWP4Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP5Lat, &src->dWP5Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP5Lon, &src->dWP5Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP6Lat, &src->dWP6Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP6Lon, &src->dWP6Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP7Lat, &src->dWP7Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP7Lon, &src->dWP7Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP8Lat, &src->dWP8Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP8Lon, &src->dWP8Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nStaccatoVolley, &src->nStaccatoVolley)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nAttackMissileCnt, &src->nAttackMissileCnt)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nAttackMode, &src->nAttackMode)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nSearchType, &src->nSearchType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nAttackType, &src->nAttackType)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_MISSILEENGAGEPLAN' sequence class.
 */
#define T DMSG_HMI_MISSILEENGAGEPLAN
#define TSeq DMSG_HMI_MISSILEENGAGEPLANSeq
#define T_initialize_ex DMSG_HMI_MISSILEENGAGEPLAN_initialize_ex
#define T_finalize_ex   DMSG_HMI_MISSILEENGAGEPLAN_finalize_ex
#define T_copy       DMSG_HMI_MISSILEENGAGEPLAN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TORPEDOENGAGEPLANTYPENAME = "DMSG_HMI_TORPEDOENGAGEPLAN";

DDS_TypeCode* DMSG_HMI_TORPEDOENGAGEPLAN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[36]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTargetType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cInductionMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cGuidanceMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nRouteNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRouteLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRouteLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRouteDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRouteSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTorpDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDounLimitDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fUpLimitDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRunDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fPreOderSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDetectionRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDefaultRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSearchSector",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fLinkDetectionRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fLinkDefaultRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fLinkSearchSector",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bSonarOder",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bRouteSensorOder",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bHitEvasionSet",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bTropLinkFire",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fHorLinkOffset",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fVerLinkOffset",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpExpectFiretimeMin",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpExpectFiretimeSec",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpRuntimeMin",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpRuntimeSec",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bLinkedLaunch",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nLinkedDistance",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nLinkedTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"n2ndTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TORPEDOENGAGEPLAN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TORPEDOENGAGEPLAN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        36, /* Number of members */
        DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TORPEDOENGAGEPLAN*/

    if (is_initialized) {
        return &DMSG_HMI_TORPEDOENGAGEPLAN_g_tc;
    }


    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[25]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[26]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[27]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[28]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[29]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[30]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[31]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[32]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[33]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[34]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_TORPEDOENGAGEPLAN_g_tc_members[35]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TORPEDOENGAGEPLAN_g_tc;
}


RTIBool DMSG_HMI_TORPEDOENGAGEPLAN_initialize(
    DMSG_HMI_TORPEDOENGAGEPLAN* sample) {
  return DMSG_HMI_TORPEDOENGAGEPLAN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TORPEDOENGAGEPLAN_initialize_ex(
    DMSG_HMI_TORPEDOENGAGEPLAN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cTargetType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cInductionMode)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cGuidanceMode)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nRouteNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRouteLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRouteLon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRouteDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRouteSpeed)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTorpDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDounLimitDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fUpLimitDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRunDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fPreOderSpeed)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDetectionRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDefaultRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSearchSector)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fLinkDetectionRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fLinkDefaultRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fLinkSearchSector)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bSonarOder)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bRouteSensorOder)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bHitEvasionSet)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bTropLinkFire)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fHorLinkOffset)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fVerLinkOffset)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTorpExpectFiretimeMin)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTorpExpectFiretimeSec)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTorpRuntimeMin)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTorpRuntimeSec)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bLinkedLaunch)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nLinkedDistance)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nLinkedTime)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->n2ndTubeNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TORPEDOENGAGEPLAN_finalize(
    DMSG_HMI_TORPEDOENGAGEPLAN* sample)
{
    DMSG_HMI_TORPEDOENGAGEPLAN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TORPEDOENGAGEPLAN_finalize_ex(
    DMSG_HMI_TORPEDOENGAGEPLAN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_TORPEDOENGAGEPLAN_copy(
    DMSG_HMI_TORPEDOENGAGEPLAN* dst,
    const DMSG_HMI_TORPEDOENGAGEPLAN* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTargetType, &src->cTargetType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cInductionMode, &src->cInductionMode)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cGuidanceMode, &src->cGuidanceMode)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nRouteNum, &src->nRouteNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRouteLat, &src->fRouteLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRouteLon, &src->fRouteLon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRouteDepth, &src->fRouteDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRouteSpeed, &src->fRouteSpeed)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTorpDepth, &src->fTorpDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDounLimitDepth, &src->fDounLimitDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fUpLimitDepth, &src->fUpLimitDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRunDepth, &src->fRunDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fPreOderSpeed, &src->fPreOderSpeed)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDetectionRange, &src->fDetectionRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDefaultRange, &src->fDefaultRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSearchSector, &src->fSearchSector)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fLinkDetectionRange, &src->fLinkDetectionRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fLinkDefaultRange, &src->fLinkDefaultRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fLinkSearchSector, &src->fLinkSearchSector)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bSonarOder, &src->bSonarOder)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bRouteSensorOder, &src->bRouteSensorOder)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bHitEvasionSet, &src->bHitEvasionSet)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bTropLinkFire, &src->bTropLinkFire)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fHorLinkOffset, &src->fHorLinkOffset)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fVerLinkOffset, &src->fVerLinkOffset)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTorpExpectFiretimeMin, &src->nTorpExpectFiretimeMin)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTorpExpectFiretimeSec, &src->nTorpExpectFiretimeSec)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTorpRuntimeMin, &src->nTorpRuntimeMin)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTorpRuntimeSec, &src->nTorpRuntimeSec)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bLinkedLaunch, &src->bLinkedLaunch)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nLinkedDistance, &src->nLinkedDistance)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nLinkedTime, &src->nLinkedTime)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->n2ndTubeNum, &src->n2ndTubeNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TORPEDOENGAGEPLAN' sequence class.
 */
#define T DMSG_HMI_TORPEDOENGAGEPLAN
#define TSeq DMSG_HMI_TORPEDOENGAGEPLANSeq
#define T_initialize_ex DMSG_HMI_TORPEDOENGAGEPLAN_initialize_ex
#define T_finalize_ex   DMSG_HMI_TORPEDOENGAGEPLAN_finalize_ex
#define T_copy       DMSG_HMI_TORPEDOENGAGEPLAN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_RESERVEDENGAGEPLANTYPENAME = "DMSG_HMI_RESERVEDENGAGEPLAN";

DDS_TypeCode* DMSG_HMI_RESERVEDENGAGEPLAN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[36]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTargetType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cInductionMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cGuidanceMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nRouteNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRouteLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRouteLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRouteDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRouteSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTorpDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDounLimitDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fUpLimitDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRunDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fPreOderSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDetectionRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDefaultRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSearchSector",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fLinkDetectionRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fLinkDefaultRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fLinkSearchSector",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bSonarOder",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bRouteSensorOder",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bHitEvasionSet",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bTropLinkFire",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fHorLinkOffset",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fVerLinkOffset",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpExpectFiretimeMin",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpExpectFiretimeSec",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpRuntimeMin",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpRuntimeSec",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bLinkedLaunch",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nLinkedDistance",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nLinkedTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"n2ndTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_RESERVEDENGAGEPLAN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_RESERVEDENGAGEPLAN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        36, /* Number of members */
        DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_RESERVEDENGAGEPLAN*/

    if (is_initialized) {
        return &DMSG_HMI_RESERVEDENGAGEPLAN_g_tc;
    }


    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[25]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[26]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[27]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[28]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[29]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[30]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[31]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[32]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[33]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[34]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_RESERVEDENGAGEPLAN_g_tc_members[35]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_RESERVEDENGAGEPLAN_g_tc;
}


RTIBool DMSG_HMI_RESERVEDENGAGEPLAN_initialize(
    DMSG_HMI_RESERVEDENGAGEPLAN* sample) {
  return DMSG_HMI_RESERVEDENGAGEPLAN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_RESERVEDENGAGEPLAN_initialize_ex(
    DMSG_HMI_RESERVEDENGAGEPLAN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cTargetType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cInductionMode)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cGuidanceMode)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nRouteNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRouteLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRouteLon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRouteDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRouteSpeed)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTorpDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDounLimitDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fUpLimitDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRunDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fPreOderSpeed)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDetectionRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDefaultRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSearchSector)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fLinkDetectionRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fLinkDefaultRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fLinkSearchSector)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bSonarOder)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bRouteSensorOder)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bHitEvasionSet)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bTropLinkFire)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fHorLinkOffset)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fVerLinkOffset)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTorpExpectFiretimeMin)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTorpExpectFiretimeSec)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTorpRuntimeMin)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTorpRuntimeSec)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bLinkedLaunch)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nLinkedDistance)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nLinkedTime)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->n2ndTubeNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_RESERVEDENGAGEPLAN_finalize(
    DMSG_HMI_RESERVEDENGAGEPLAN* sample)
{
    DMSG_HMI_RESERVEDENGAGEPLAN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_RESERVEDENGAGEPLAN_finalize_ex(
    DMSG_HMI_RESERVEDENGAGEPLAN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_RESERVEDENGAGEPLAN_copy(
    DMSG_HMI_RESERVEDENGAGEPLAN* dst,
    const DMSG_HMI_RESERVEDENGAGEPLAN* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTargetType, &src->cTargetType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cInductionMode, &src->cInductionMode)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cGuidanceMode, &src->cGuidanceMode)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nRouteNum, &src->nRouteNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRouteLat, &src->fRouteLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRouteLon, &src->fRouteLon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRouteDepth, &src->fRouteDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRouteSpeed, &src->fRouteSpeed)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTorpDepth, &src->fTorpDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDounLimitDepth, &src->fDounLimitDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fUpLimitDepth, &src->fUpLimitDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRunDepth, &src->fRunDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fPreOderSpeed, &src->fPreOderSpeed)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDetectionRange, &src->fDetectionRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDefaultRange, &src->fDefaultRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSearchSector, &src->fSearchSector)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fLinkDetectionRange, &src->fLinkDetectionRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fLinkDefaultRange, &src->fLinkDefaultRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fLinkSearchSector, &src->fLinkSearchSector)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bSonarOder, &src->bSonarOder)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bRouteSensorOder, &src->bRouteSensorOder)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bHitEvasionSet, &src->bHitEvasionSet)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bTropLinkFire, &src->bTropLinkFire)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fHorLinkOffset, &src->fHorLinkOffset)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fVerLinkOffset, &src->fVerLinkOffset)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTorpExpectFiretimeMin, &src->nTorpExpectFiretimeMin)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTorpExpectFiretimeSec, &src->nTorpExpectFiretimeSec)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTorpRuntimeMin, &src->nTorpRuntimeMin)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTorpRuntimeSec, &src->nTorpRuntimeSec)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bLinkedLaunch, &src->bLinkedLaunch)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nLinkedDistance, &src->nLinkedDistance)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nLinkedTime, &src->nLinkedTime)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->n2ndTubeNum, &src->n2ndTubeNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_RESERVEDENGAGEPLAN' sequence class.
 */
#define T DMSG_HMI_RESERVEDENGAGEPLAN
#define TSeq DMSG_HMI_RESERVEDENGAGEPLANSeq
#define T_initialize_ex DMSG_HMI_RESERVEDENGAGEPLAN_initialize_ex
#define T_finalize_ex   DMSG_HMI_RESERVEDENGAGEPLAN_finalize_ex
#define T_copy       DMSG_HMI_RESERVEDENGAGEPLAN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TORPCTRLTYPENAME = "DMSG_HMI_TORPCTRL";

DDS_TypeCode* DMSG_HMI_TORPCTRL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TORPCTRL_g_tc_members[2]=
    {
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTorpCtrl",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TORPCTRL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TORPCTRL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_TORPCTRL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TORPCTRL*/

    if (is_initialized) {
        return &DMSG_HMI_TORPCTRL_g_tc;
    }


    DMSG_HMI_TORPCTRL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TORPCTRL_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TORPCTRL_g_tc;
}


RTIBool DMSG_HMI_TORPCTRL_initialize(
    DMSG_HMI_TORPCTRL* sample) {
  return DMSG_HMI_TORPCTRL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TORPCTRL_initialize_ex(
    DMSG_HMI_TORPCTRL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTorpCtrl)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TORPCTRL_finalize(
    DMSG_HMI_TORPCTRL* sample)
{
    DMSG_HMI_TORPCTRL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TORPCTRL_finalize_ex(
    DMSG_HMI_TORPCTRL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_TORPCTRL_copy(
    DMSG_HMI_TORPCTRL* dst,
    const DMSG_HMI_TORPCTRL* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTorpCtrl, &src->cTorpCtrl)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TORPCTRL' sequence class.
 */
#define T DMSG_HMI_TORPCTRL
#define TSeq DMSG_HMI_TORPCTRLSeq
#define T_initialize_ex DMSG_HMI_TORPCTRL_initialize_ex
#define T_finalize_ex   DMSG_HMI_TORPCTRL_finalize_ex
#define T_copy       DMSG_HMI_TORPCTRL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SHOOTMODIFYTYPENAME = "DMSG_HMI_SHOOTMODIFY";

DDS_TypeCode* DMSG_HMI_SHOOTMODIFY_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SHOOTMODIFY_g_tc_members[2]=
    {
        {
            (char *)"dBearingError",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nDistanceError",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SHOOTMODIFY_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SHOOTMODIFY", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_SHOOTMODIFY_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SHOOTMODIFY*/

    if (is_initialized) {
        return &DMSG_HMI_SHOOTMODIFY_g_tc;
    }


    DMSG_HMI_SHOOTMODIFY_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_SHOOTMODIFY_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SHOOTMODIFY_g_tc;
}


RTIBool DMSG_HMI_SHOOTMODIFY_initialize(
    DMSG_HMI_SHOOTMODIFY* sample) {
  return DMSG_HMI_SHOOTMODIFY_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SHOOTMODIFY_initialize_ex(
    DMSG_HMI_SHOOTMODIFY* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->dBearingError)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nDistanceError)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_SHOOTMODIFY_finalize(
    DMSG_HMI_SHOOTMODIFY* sample)
{
    DMSG_HMI_SHOOTMODIFY_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SHOOTMODIFY_finalize_ex(
    DMSG_HMI_SHOOTMODIFY* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SHOOTMODIFY_copy(
    DMSG_HMI_SHOOTMODIFY* dst,
    const DMSG_HMI_SHOOTMODIFY* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->dBearingError, &src->dBearingError)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nDistanceError, &src->nDistanceError)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SHOOTMODIFY' sequence class.
 */
#define T DMSG_HMI_SHOOTMODIFY
#define TSeq DMSG_HMI_SHOOTMODIFYSeq
#define T_initialize_ex DMSG_HMI_SHOOTMODIFY_initialize_ex
#define T_finalize_ex   DMSG_HMI_SHOOTMODIFY_finalize_ex
#define T_copy       DMSG_HMI_SHOOTMODIFY_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_CORRECTTYPENAME = "DMSG_HMI_CORRECT";

DDS_TypeCode* DMSG_HMI_CORRECT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_CORRECT_g_tc_members[2]=
    {
        {
            (char *)"dBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dAltitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_CORRECT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_CORRECT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_CORRECT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_CORRECT*/

    if (is_initialized) {
        return &DMSG_HMI_CORRECT_g_tc;
    }


    DMSG_HMI_CORRECT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_CORRECT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_CORRECT_g_tc;
}


RTIBool DMSG_HMI_CORRECT_initialize(
    DMSG_HMI_CORRECT* sample) {
  return DMSG_HMI_CORRECT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_CORRECT_initialize_ex(
    DMSG_HMI_CORRECT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->dBearing)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dAltitude)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_CORRECT_finalize(
    DMSG_HMI_CORRECT* sample)
{
    DMSG_HMI_CORRECT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_CORRECT_finalize_ex(
    DMSG_HMI_CORRECT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_CORRECT_copy(
    DMSG_HMI_CORRECT* dst,
    const DMSG_HMI_CORRECT* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->dBearing, &src->dBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dAltitude, &src->dAltitude)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_CORRECT' sequence class.
 */
#define T DMSG_HMI_CORRECT
#define TSeq DMSG_HMI_CORRECTSeq
#define T_initialize_ex DMSG_HMI_CORRECT_initialize_ex
#define T_finalize_ex   DMSG_HMI_CORRECT_finalize_ex
#define T_copy       DMSG_HMI_CORRECT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SENSORWEAPONPOSTYPENAME = "DMSG_HMI_SENSORWEAPONPOS";

DDS_TypeCode* DMSG_HMI_SENSORWEAPONPOS_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SENSORWEAPONPOS_g_tc_members[3]=
    {
        {
            (char *)"bySensorCategory",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bySensorPos",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byWeaponPos",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SENSORWEAPONPOS_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SENSORWEAPONPOS", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_SENSORWEAPONPOS_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SENSORWEAPONPOS*/

    if (is_initialized) {
        return &DMSG_HMI_SENSORWEAPONPOS_g_tc;
    }


    DMSG_HMI_SENSORWEAPONPOS_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SENSORWEAPONPOS_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SENSORWEAPONPOS_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SENSORWEAPONPOS_g_tc;
}


RTIBool DMSG_HMI_SENSORWEAPONPOS_initialize(
    DMSG_HMI_SENSORWEAPONPOS* sample) {
  return DMSG_HMI_SENSORWEAPONPOS_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SENSORWEAPONPOS_initialize_ex(
    DMSG_HMI_SENSORWEAPONPOS* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->bySensorCategory)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->bySensorPos)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byWeaponPos)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_SENSORWEAPONPOS_finalize(
    DMSG_HMI_SENSORWEAPONPOS* sample)
{
    DMSG_HMI_SENSORWEAPONPOS_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SENSORWEAPONPOS_finalize_ex(
    DMSG_HMI_SENSORWEAPONPOS* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SENSORWEAPONPOS_copy(
    DMSG_HMI_SENSORWEAPONPOS* dst,
    const DMSG_HMI_SENSORWEAPONPOS* src)
{        

    if (!RTICdrType_copyChar(
        &dst->bySensorCategory, &src->bySensorCategory)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->bySensorPos, &src->bySensorPos)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byWeaponPos, &src->byWeaponPos)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SENSORWEAPONPOS' sequence class.
 */
#define T DMSG_HMI_SENSORWEAPONPOS
#define TSeq DMSG_HMI_SENSORWEAPONPOSSeq
#define T_initialize_ex DMSG_HMI_SENSORWEAPONPOS_initialize_ex
#define T_finalize_ex   DMSG_HMI_SENSORWEAPONPOS_finalize_ex
#define T_copy       DMSG_HMI_SENSORWEAPONPOS_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_BLINDNESSFIRETYPENAME = "DMSG_HMI_BLINDNESSFIRE";

DDS_TypeCode* DMSG_HMI_BLINDNESSFIRE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_BLINDNESSFIRE_g_tc_members[3]=
    {
        {
            (char *)"dPosX",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dPosY",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dPosZ",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_BLINDNESSFIRE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_BLINDNESSFIRE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_BLINDNESSFIRE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_BLINDNESSFIRE*/

    if (is_initialized) {
        return &DMSG_HMI_BLINDNESSFIRE_g_tc;
    }


    DMSG_HMI_BLINDNESSFIRE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_BLINDNESSFIRE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_BLINDNESSFIRE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_BLINDNESSFIRE_g_tc;
}


RTIBool DMSG_HMI_BLINDNESSFIRE_initialize(
    DMSG_HMI_BLINDNESSFIRE* sample) {
  return DMSG_HMI_BLINDNESSFIRE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_BLINDNESSFIRE_initialize_ex(
    DMSG_HMI_BLINDNESSFIRE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->dPosX)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dPosY)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dPosZ)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_BLINDNESSFIRE_finalize(
    DMSG_HMI_BLINDNESSFIRE* sample)
{
    DMSG_HMI_BLINDNESSFIRE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_BLINDNESSFIRE_finalize_ex(
    DMSG_HMI_BLINDNESSFIRE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_BLINDNESSFIRE_copy(
    DMSG_HMI_BLINDNESSFIRE* dst,
    const DMSG_HMI_BLINDNESSFIRE* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->dPosX, &src->dPosX)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dPosY, &src->dPosY)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dPosZ, &src->dPosZ)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_BLINDNESSFIRE' sequence class.
 */
#define T DMSG_HMI_BLINDNESSFIRE
#define TSeq DMSG_HMI_BLINDNESSFIRESeq
#define T_initialize_ex DMSG_HMI_BLINDNESSFIRE_initialize_ex
#define T_finalize_ex   DMSG_HMI_BLINDNESSFIRE_finalize_ex
#define T_copy       DMSG_HMI_BLINDNESSFIRE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_DIRECTFIRETYPENAME = "DMSG_HMI_DIRECTFIRE";

DDS_TypeCode* DMSG_HMI_DIRECTFIRE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_DIRECTFIRE_g_tc_members[3]=
    {
        {
            (char *)"dLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLong",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dAlt",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_DIRECTFIRE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_DIRECTFIRE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_DIRECTFIRE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_DIRECTFIRE*/

    if (is_initialized) {
        return &DMSG_HMI_DIRECTFIRE_g_tc;
    }


    DMSG_HMI_DIRECTFIRE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_DIRECTFIRE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_DIRECTFIRE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_DIRECTFIRE_g_tc;
}


RTIBool DMSG_HMI_DIRECTFIRE_initialize(
    DMSG_HMI_DIRECTFIRE* sample) {
  return DMSG_HMI_DIRECTFIRE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_DIRECTFIRE_initialize_ex(
    DMSG_HMI_DIRECTFIRE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->dLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dLong)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dAlt)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_DIRECTFIRE_finalize(
    DMSG_HMI_DIRECTFIRE* sample)
{
    DMSG_HMI_DIRECTFIRE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_DIRECTFIRE_finalize_ex(
    DMSG_HMI_DIRECTFIRE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_DIRECTFIRE_copy(
    DMSG_HMI_DIRECTFIRE* dst,
    const DMSG_HMI_DIRECTFIRE* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->dLat, &src->dLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dLong, &src->dLong)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dAlt, &src->dAlt)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_DIRECTFIRE' sequence class.
 */
#define T DMSG_HMI_DIRECTFIRE
#define TSeq DMSG_HMI_DIRECTFIRESeq
#define T_initialize_ex DMSG_HMI_DIRECTFIRE_initialize_ex
#define T_finalize_ex   DMSG_HMI_DIRECTFIRE_finalize_ex
#define T_copy       DMSG_HMI_DIRECTFIRE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TORPMANUALWAYPOINTTYPENAME = "DMSG_HMI_TORPMANUALWAYPOINT";

DDS_TypeCode* DMSG_HMI_TORPMANUALWAYPOINT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[22]=
    {
        {
            (char *)"byTorpNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nWpCnt",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP1Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP1Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP2Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP2Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP3Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP3Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP4Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP4Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP5Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP5Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP6Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP6Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP7Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP7Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP8Lat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dWP8Lon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nStaccatoVolley",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TORPMANUALWAYPOINT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TORPMANUALWAYPOINT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        22, /* Number of members */
        DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TORPMANUALWAYPOINT*/

    if (is_initialized) {
        return &DMSG_HMI_TORPMANUALWAYPOINT_g_tc;
    }


    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TORPMANUALWAYPOINT_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TORPMANUALWAYPOINT_g_tc;
}


RTIBool DMSG_HMI_TORPMANUALWAYPOINT_initialize(
    DMSG_HMI_TORPMANUALWAYPOINT* sample) {
  return DMSG_HMI_TORPMANUALWAYPOINT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TORPMANUALWAYPOINT_initialize_ex(
    DMSG_HMI_TORPMANUALWAYPOINT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byTorpNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nWpCnt)) {
        return RTI_FALSE;
    }                
            
    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initDouble(&sample->dWP1Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP1Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP2Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP2Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP3Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP3Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP4Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP4Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP5Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP5Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP6Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP6Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP7Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP7Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP8Lat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dWP8Lon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nStaccatoVolley)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TORPMANUALWAYPOINT_finalize(
    DMSG_HMI_TORPMANUALWAYPOINT* sample)
{
    DMSG_HMI_TORPMANUALWAYPOINT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TORPMANUALWAYPOINT_finalize_ex(
    DMSG_HMI_TORPMANUALWAYPOINT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_HMI_TORPMANUALWAYPOINT_copy(
    DMSG_HMI_TORPMANUALWAYPOINT* dst,
    const DMSG_HMI_TORPMANUALWAYPOINT* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byTorpNum, &src->byTorpNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nWpCnt, &src->nWpCnt)) {
        return RTI_FALSE;
    }
            
    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP1Lat, &src->dWP1Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP1Lon, &src->dWP1Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP2Lat, &src->dWP2Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP2Lon, &src->dWP2Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP3Lat, &src->dWP3Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP3Lon, &src->dWP3Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP4Lat, &src->dWP4Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP4Lon, &src->dWP4Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP5Lat, &src->dWP5Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP5Lon, &src->dWP5Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP6Lat, &src->dWP6Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP6Lon, &src->dWP6Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP7Lat, &src->dWP7Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP7Lon, &src->dWP7Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP8Lat, &src->dWP8Lat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dWP8Lon, &src->dWP8Lon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nStaccatoVolley, &src->nStaccatoVolley)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TORPMANUALWAYPOINT' sequence class.
 */
#define T DMSG_HMI_TORPMANUALWAYPOINT
#define TSeq DMSG_HMI_TORPMANUALWAYPOINTSeq
#define T_initialize_ex DMSG_HMI_TORPMANUALWAYPOINT_initialize_ex
#define T_finalize_ex   DMSG_HMI_TORPMANUALWAYPOINT_finalize_ex
#define T_copy       DMSG_HMI_TORPMANUALWAYPOINT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_TORPBREAKENGAGETYPENAME = "DMSG_HMI_TORPBREAKENGAGE";

DDS_TypeCode* DMSG_HMI_TORPBREAKENGAGE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_TORPBREAKENGAGE_g_tc_members[2]=
    {
        {
            (char *)"byTorpNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byAction",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_TORPBREAKENGAGE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_TORPBREAKENGAGE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_TORPBREAKENGAGE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_TORPBREAKENGAGE*/

    if (is_initialized) {
        return &DMSG_HMI_TORPBREAKENGAGE_g_tc;
    }


    DMSG_HMI_TORPBREAKENGAGE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_TORPBREAKENGAGE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_TORPBREAKENGAGE_g_tc;
}


RTIBool DMSG_HMI_TORPBREAKENGAGE_initialize(
    DMSG_HMI_TORPBREAKENGAGE* sample) {
  return DMSG_HMI_TORPBREAKENGAGE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_TORPBREAKENGAGE_initialize_ex(
    DMSG_HMI_TORPBREAKENGAGE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byTorpNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byAction)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_TORPBREAKENGAGE_finalize(
    DMSG_HMI_TORPBREAKENGAGE* sample)
{
    DMSG_HMI_TORPBREAKENGAGE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_TORPBREAKENGAGE_finalize_ex(
    DMSG_HMI_TORPBREAKENGAGE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_TORPBREAKENGAGE_copy(
    DMSG_HMI_TORPBREAKENGAGE* dst,
    const DMSG_HMI_TORPBREAKENGAGE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byTorpNum, &src->byTorpNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byAction, &src->byAction)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_TORPBREAKENGAGE' sequence class.
 */
#define T DMSG_HMI_TORPBREAKENGAGE
#define TSeq DMSG_HMI_TORPBREAKENGAGESeq
#define T_initialize_ex DMSG_HMI_TORPBREAKENGAGE_initialize_ex
#define T_finalize_ex   DMSG_HMI_TORPBREAKENGAGE_finalize_ex
#define T_copy       DMSG_HMI_TORPBREAKENGAGE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_RESERVEDCOPYTYPENAME = "DMSG_HMI_RESERVEDCOPY";

DDS_TypeCode* DMSG_HMI_RESERVEDCOPY_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_RESERVEDCOPY_g_tc_members[3]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cCopy",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_RESERVEDCOPY_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_RESERVEDCOPY", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_HMI_RESERVEDCOPY_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_RESERVEDCOPY*/

    if (is_initialized) {
        return &DMSG_HMI_RESERVEDCOPY_g_tc;
    }


    DMSG_HMI_RESERVEDCOPY_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_RESERVEDCOPY_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_RESERVEDCOPY_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_RESERVEDCOPY_g_tc;
}


RTIBool DMSG_HMI_RESERVEDCOPY_initialize(
    DMSG_HMI_RESERVEDCOPY* sample) {
  return DMSG_HMI_RESERVEDCOPY_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_RESERVEDCOPY_initialize_ex(
    DMSG_HMI_RESERVEDCOPY* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cCopy)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_RESERVEDCOPY_finalize(
    DMSG_HMI_RESERVEDCOPY* sample)
{
    DMSG_HMI_RESERVEDCOPY_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_RESERVEDCOPY_finalize_ex(
    DMSG_HMI_RESERVEDCOPY* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_RESERVEDCOPY_copy(
    DMSG_HMI_RESERVEDCOPY* dst,
    const DMSG_HMI_RESERVEDCOPY* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cCopy, &src->cCopy)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_RESERVEDCOPY' sequence class.
 */
#define T DMSG_HMI_RESERVEDCOPY
#define TSeq DMSG_HMI_RESERVEDCOPYSeq
#define T_initialize_ex DMSG_HMI_RESERVEDCOPY_initialize_ex
#define T_finalize_ex   DMSG_HMI_RESERVEDCOPY_finalize_ex
#define T_copy       DMSG_HMI_RESERVEDCOPY_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_FIRINGDATATYPENAME = "DMSG_TFC_FIRINGDATA";

DDS_TypeCode* DMSG_TFC_FIRINGDATA_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_TFC_FIRINGDATA_g_tc_fExpcLat_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,4,NULL,NULL);
    static DDS_TypeCode DMSG_TFC_FIRINGDATA_g_tc_fExpcLon_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,4,NULL,NULL);
    static DDS_TypeCode DMSG_TFC_FIRINGDATA_g_tc_fExpcDepth_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,4,NULL,NULL);
    static DDS_TypeCode DMSG_TFC_FIRINGDATA_g_tc_fTorpRouteLat_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,1000,NULL,NULL);
    static DDS_TypeCode DMSG_TFC_FIRINGDATA_g_tc_fTorpRouteLon_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,1000,NULL,NULL);
    static DDS_TypeCode DMSG_TFC_FIRINGDATA_g_tc_fTorpRouteDepth_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,1000,NULL,NULL);

    static DDS_TypeCode_Member DMSG_TFC_FIRINGDATA_g_tc_members[34]=
    {
        {
            (char *)"nConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTorpNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bLinkedLaunch",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTorpCommLine",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fShipCommLine",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTorpCommLineMax",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fShipCommLineMax",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nBattery",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fBatteryDistance",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTropFireMin",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTropFireSec",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"TBD",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nReAttackNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fAdviceCrs",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fHitRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nHitTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTgtObtainProbability",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"HitPt",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"AQPt",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fAQDistance",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTorpDistance",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fExpcLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fExpcLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fExpcDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nPtCount",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTorpRouteLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTorpRouteLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTorpRouteDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nBatteryTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nOwnShipWireTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTorpWireTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fRemainHitRange",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bReservedPlan",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nRunningTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_FIRINGDATA_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_FIRINGDATA", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        34, /* Number of members */
        DMSG_TFC_FIRINGDATA_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_FIRINGDATA*/

    if (is_initialized) {
        return &DMSG_TFC_FIRINGDATA_g_tc;
    }

    DMSG_TFC_FIRINGDATA_g_tc_fExpcLat_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_fExpcLon_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_fExpcDepth_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_fTorpRouteLat_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_fTorpRouteLon_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_fTorpRouteDepth_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    DMSG_TFC_FIRINGDATA_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
    DMSG_TFC_FIRINGDATA_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_FIRINGDATA_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_TFC_FIRINGDATA_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TFC_FIRINGDATA_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TFC_FIRINGDATA_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TFC_FIRINGDATA_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_FIRINGDATA_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TFC_FIRINGDATA_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TFC_FIRINGDATA_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)coordiHSys_get_typecode();
    DMSG_TFC_FIRINGDATA_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)coordiHSys_get_typecode();
    DMSG_TFC_FIRINGDATA_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TFC_FIRINGDATA_g_tc_fExpcLat_array;
    DMSG_TFC_FIRINGDATA_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TFC_FIRINGDATA_g_tc_fExpcLon_array;
    DMSG_TFC_FIRINGDATA_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TFC_FIRINGDATA_g_tc_fExpcDepth_array;
    DMSG_TFC_FIRINGDATA_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TFC_FIRINGDATA_g_tc_members[25]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TFC_FIRINGDATA_g_tc_fTorpRouteLat_array;
    DMSG_TFC_FIRINGDATA_g_tc_members[26]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TFC_FIRINGDATA_g_tc_fTorpRouteLon_array;
    DMSG_TFC_FIRINGDATA_g_tc_members[27]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TFC_FIRINGDATA_g_tc_fTorpRouteDepth_array;
    DMSG_TFC_FIRINGDATA_g_tc_members[28]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TFC_FIRINGDATA_g_tc_members[29]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TFC_FIRINGDATA_g_tc_members[30]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_TFC_FIRINGDATA_g_tc_members[31]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_FIRINGDATA_g_tc_members[32]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;
    DMSG_TFC_FIRINGDATA_g_tc_members[33]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_FIRINGDATA_g_tc;
}


RTIBool DMSG_TFC_FIRINGDATA_initialize(
    DMSG_TFC_FIRINGDATA* sample) {
  return DMSG_TFC_FIRINGDATA_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_FIRINGDATA_initialize_ex(
    DMSG_TFC_FIRINGDATA* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedShort(&sample->nConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTorpNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bLinkedLaunch)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTorpCommLine)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fShipCommLine)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTorpCommLineMax)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fShipCommLineMax)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nBattery)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fBatteryDistance)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTropFireMin)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTropFireSec)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->TBD)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nReAttackNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fAdviceCrs)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fHitRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nHitTime)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTgtObtainProbability)) {
        return RTI_FALSE;
    }                
            
    if (!coordiHSys_initialize_ex(&sample->HitPt,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!coordiHSys_initialize_ex(&sample->AQPt,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initFloat(&sample->fAQDistance)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTorpDistance)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->fExpcLat, (4), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->fExpcLon, (4), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->fExpcDepth, (4), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initLong(&sample->nPtCount)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->fTorpRouteLat, (1000), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->fTorpRouteLon, (1000), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->fTorpRouteDepth, (1000), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initLong(&sample->nBatteryTime)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nOwnShipWireTime)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTorpWireTime)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fRemainHitRange)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bReservedPlan)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initUnsignedLong(&sample->nRunningTime)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TFC_FIRINGDATA_finalize(
    DMSG_TFC_FIRINGDATA* sample)
{
    DMSG_TFC_FIRINGDATA_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_FIRINGDATA_finalize_ex(
    DMSG_TFC_FIRINGDATA* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    coordiHSys_finalize_ex(&sample->HitPt,deletePointers);
            
    coordiHSys_finalize_ex(&sample->AQPt,deletePointers);
            
}

RTIBool DMSG_TFC_FIRINGDATA_copy(
    DMSG_TFC_FIRINGDATA* dst,
    const DMSG_TFC_FIRINGDATA* src)
{        

    if (!RTICdrType_copyUnsignedShort(
        &dst->nConsoleID, &src->nConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTorpNum, &src->byTorpNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bLinkedLaunch, &src->bLinkedLaunch)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTorpCommLine, &src->fTorpCommLine)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fShipCommLine, &src->fShipCommLine)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTorpCommLineMax, &src->fTorpCommLineMax)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fShipCommLineMax, &src->fShipCommLineMax)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nBattery, &src->nBattery)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fBatteryDistance, &src->fBatteryDistance)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTropFireMin, &src->nTropFireMin)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTropFireSec, &src->nTropFireSec)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->TBD, &src->TBD)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nReAttackNum, &src->nReAttackNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fAdviceCrs, &src->fAdviceCrs)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fHitRange, &src->fHitRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nHitTime, &src->nHitTime)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTgtObtainProbability, &src->fTgtObtainProbability)) {
        return RTI_FALSE;
    }
            
    if (!coordiHSys_copy(
        &dst->HitPt, &src->HitPt)) {
        return RTI_FALSE;
    }
            
    if (!coordiHSys_copy(
        &dst->AQPt, &src->AQPt)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fAQDistance, &src->fAQDistance)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTorpDistance, &src->fTorpDistance)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->fExpcLat, src->fExpcLat, (4), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->fExpcLon, src->fExpcLon, (4), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->fExpcDepth, src->fExpcDepth, (4), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nPtCount, &src->nPtCount)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->fTorpRouteLat, src->fTorpRouteLat, (1000), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->fTorpRouteLon, src->fTorpRouteLon, (1000), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->fTorpRouteDepth, src->fTorpRouteDepth, (1000), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nBatteryTime, &src->nBatteryTime)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nOwnShipWireTime, &src->nOwnShipWireTime)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTorpWireTime, &src->nTorpWireTime)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fRemainHitRange, &src->fRemainHitRange)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bReservedPlan, &src->bReservedPlan)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyUnsignedLong(
        &dst->nRunningTime, &src->nRunningTime)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_FIRINGDATA' sequence class.
 */
#define T DMSG_TFC_FIRINGDATA
#define TSeq DMSG_TFC_FIRINGDATASeq
#define T_initialize_ex DMSG_TFC_FIRINGDATA_initialize_ex
#define T_finalize_ex   DMSG_TFC_FIRINGDATA_finalize_ex
#define T_copy       DMSG_TFC_FIRINGDATA_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_TORPSTATETYPENAME = "DMSG_TFC_TORPSTATE";

DDS_TypeCode* DMSG_TFC_TORPSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TFC_TORPSTATE_g_tc_members[6]=
    {
        {
            (char *)"byImpressedPower",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byFireSignal",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTorpConnect",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTorpSetState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTropCeiling",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTropFloor",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_TORPSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_TORPSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        6, /* Number of members */
        DMSG_TFC_TORPSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_TORPSTATE*/

    if (is_initialized) {
        return &DMSG_TFC_TORPSTATE_g_tc;
    }


    DMSG_TFC_TORPSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_TORPSTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_TORPSTATE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_TORPSTATE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_TORPSTATE_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_TORPSTATE_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_TORPSTATE_g_tc;
}


RTIBool DMSG_TFC_TORPSTATE_initialize(
    DMSG_TFC_TORPSTATE* sample) {
  return DMSG_TFC_TORPSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_TORPSTATE_initialize_ex(
    DMSG_TFC_TORPSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byImpressedPower)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byFireSignal)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTorpConnect)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTorpSetState)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTropCeiling)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTropFloor)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TFC_TORPSTATE_finalize(
    DMSG_TFC_TORPSTATE* sample)
{
    DMSG_TFC_TORPSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_TORPSTATE_finalize_ex(
    DMSG_TFC_TORPSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TFC_TORPSTATE_copy(
    DMSG_TFC_TORPSTATE* dst,
    const DMSG_TFC_TORPSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byImpressedPower, &src->byImpressedPower)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byFireSignal, &src->byFireSignal)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTorpConnect, &src->cTorpConnect)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTorpSetState, &src->cTorpSetState)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTropCeiling, &src->fTropCeiling)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTropFloor, &src->fTropFloor)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_TORPSTATE' sequence class.
 */
#define T DMSG_TFC_TORPSTATE
#define TSeq DMSG_TFC_TORPSTATESeq
#define T_initialize_ex DMSG_TFC_TORPSTATE_initialize_ex
#define T_finalize_ex   DMSG_TFC_TORPSTATE_finalize_ex
#define T_copy       DMSG_TFC_TORPSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_TORPMANEUVERTYPENAME = "DMSG_TFC_TORPMANEUVER";

DDS_TypeCode* DMSG_TFC_TORPMANEUVER_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TFC_TORPMANEUVER_g_tc_members[5]=
    {
        {
            (char *)"fLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fCourse",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fSpeed",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_TORPMANEUVER_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_TORPMANEUVER", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        5, /* Number of members */
        DMSG_TFC_TORPMANEUVER_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_TORPMANEUVER*/

    if (is_initialized) {
        return &DMSG_TFC_TORPMANEUVER_g_tc;
    }


    DMSG_TFC_TORPMANEUVER_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_TORPMANEUVER_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_TORPMANEUVER_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_TORPMANEUVER_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_TORPMANEUVER_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_TORPMANEUVER_g_tc;
}


RTIBool DMSG_TFC_TORPMANEUVER_initialize(
    DMSG_TFC_TORPMANEUVER* sample) {
  return DMSG_TFC_TORPMANEUVER_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_TORPMANEUVER_initialize_ex(
    DMSG_TFC_TORPMANEUVER* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initFloat(&sample->fLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fLon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fCourse)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fDepth)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fSpeed)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TFC_TORPMANEUVER_finalize(
    DMSG_TFC_TORPMANEUVER* sample)
{
    DMSG_TFC_TORPMANEUVER_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_TORPMANEUVER_finalize_ex(
    DMSG_TFC_TORPMANEUVER* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TFC_TORPMANEUVER_copy(
    DMSG_TFC_TORPMANEUVER* dst,
    const DMSG_TFC_TORPMANEUVER* src)
{        

    if (!RTICdrType_copyFloat(
        &dst->fLat, &src->fLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fLon, &src->fLon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fCourse, &src->fCourse)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fDepth, &src->fDepth)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fSpeed, &src->fSpeed)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_TORPMANEUVER' sequence class.
 */
#define T DMSG_TFC_TORPMANEUVER
#define TSeq DMSG_TFC_TORPMANEUVERSeq
#define T_initialize_ex DMSG_TFC_TORPMANEUVER_initialize_ex
#define T_finalize_ex   DMSG_TFC_TORPMANEUVER_finalize_ex
#define T_copy       DMSG_TFC_TORPMANEUVER_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_CHECKRESULTTYPENAME = "DMSG_TFC_CHECKRESULT";

DDS_TypeCode* DMSG_TFC_CHECKRESULT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_TFC_CHECKRESULT_g_tc_byPartState_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,16,NULL,NULL);

    static DDS_TypeCode_Member DMSG_TFC_CHECKRESULT_g_tc_members[2]=
    {
        {
            (char *)"byErr",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byPartState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_CHECKRESULT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_CHECKRESULT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_TFC_CHECKRESULT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_CHECKRESULT*/

    if (is_initialized) {
        return &DMSG_TFC_CHECKRESULT_g_tc;
    }

    DMSG_TFC_CHECKRESULT_g_tc_byPartState_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    DMSG_TFC_CHECKRESULT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_CHECKRESULT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TFC_CHECKRESULT_g_tc_byPartState_array;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_CHECKRESULT_g_tc;
}


RTIBool DMSG_TFC_CHECKRESULT_initialize(
    DMSG_TFC_CHECKRESULT* sample) {
  return DMSG_TFC_CHECKRESULT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_CHECKRESULT_initialize_ex(
    DMSG_TFC_CHECKRESULT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byErr)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->byPartState, (16), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_TFC_CHECKRESULT_finalize(
    DMSG_TFC_CHECKRESULT* sample)
{
    DMSG_TFC_CHECKRESULT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_CHECKRESULT_finalize_ex(
    DMSG_TFC_CHECKRESULT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TFC_CHECKRESULT_copy(
    DMSG_TFC_CHECKRESULT* dst,
    const DMSG_TFC_CHECKRESULT* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byErr, &src->byErr)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->byPartState, src->byPartState, (16), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_CHECKRESULT' sequence class.
 */
#define T DMSG_TFC_CHECKRESULT
#define TSeq DMSG_TFC_CHECKRESULTSeq
#define T_initialize_ex DMSG_TFC_CHECKRESULT_initialize_ex
#define T_finalize_ex   DMSG_TFC_CHECKRESULT_finalize_ex
#define T_copy       DMSG_TFC_CHECKRESULT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_INTERLOCKTYPENAME = "DMSG_TFC_INTERLOCK";

DDS_TypeCode* DMSG_TFC_INTERLOCK_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TFC_INTERLOCK_g_tc_members[17]=
    {
        {
            (char *)"cDiscreteSig_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTargetAssignInfo_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cBattlePlan_Data_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cLimitDepth_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cBattleSolution_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponControl_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cCommunication_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPower_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPreFire_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cHorizonStatus_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cHorizonControlStatus_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cOwnshipSafe_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFirePermit_Key_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cOtherWeapon_Fire",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cLinkWeapon_FireRady_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFireStep_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cOverride",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_INTERLOCK_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_INTERLOCK", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        17, /* Number of members */
        DMSG_TFC_INTERLOCK_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_INTERLOCK*/

    if (is_initialized) {
        return &DMSG_TFC_INTERLOCK_g_tc;
    }


    DMSG_TFC_INTERLOCK_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_INTERLOCK_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_INTERLOCK_g_tc;
}


RTIBool DMSG_TFC_INTERLOCK_initialize(
    DMSG_TFC_INTERLOCK* sample) {
  return DMSG_TFC_INTERLOCK_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_INTERLOCK_initialize_ex(
    DMSG_TFC_INTERLOCK* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cDiscreteSig_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTargetAssignInfo_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cBattlePlan_Data_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cLimitDepth_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cBattleSolution_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponControl_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cCommunication_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cPower_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cPreFire_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cHorizonStatus_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cHorizonControlStatus_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cOwnshipSafe_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFirePermit_Key_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cOtherWeapon_Fire)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cLinkWeapon_FireRady_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFireStep_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cOverride)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TFC_INTERLOCK_finalize(
    DMSG_TFC_INTERLOCK* sample)
{
    DMSG_TFC_INTERLOCK_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_INTERLOCK_finalize_ex(
    DMSG_TFC_INTERLOCK* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TFC_INTERLOCK_copy(
    DMSG_TFC_INTERLOCK* dst,
    const DMSG_TFC_INTERLOCK* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cDiscreteSig_Err, &src->cDiscreteSig_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTargetAssignInfo_Err, &src->cTargetAssignInfo_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cBattlePlan_Data_Err, &src->cBattlePlan_Data_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cLimitDepth_Err, &src->cLimitDepth_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cBattleSolution_Err, &src->cBattleSolution_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponControl_Err, &src->cWeaponControl_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cCommunication_Err, &src->cCommunication_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cPower_Err, &src->cPower_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cPreFire_Err, &src->cPreFire_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cHorizonStatus_Err, &src->cHorizonStatus_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cHorizonControlStatus_Err, &src->cHorizonControlStatus_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cOwnshipSafe_Err, &src->cOwnshipSafe_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFirePermit_Key_Err, &src->cFirePermit_Key_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cOtherWeapon_Fire, &src->cOtherWeapon_Fire)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cLinkWeapon_FireRady_Err, &src->cLinkWeapon_FireRady_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFireStep_Err, &src->cFireStep_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cOverride, &src->cOverride)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_INTERLOCK' sequence class.
 */
#define T DMSG_TFC_INTERLOCK
#define TSeq DMSG_TFC_INTERLOCKSeq
#define T_initialize_ex DMSG_TFC_INTERLOCK_initialize_ex
#define T_finalize_ex   DMSG_TFC_INTERLOCK_finalize_ex
#define T_copy       DMSG_TFC_INTERLOCK_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_TORPSONARTYPENAME = "DMSG_TFC_TORPSONAR";

DDS_TypeCode* DMSG_TFC_TORPSONAR_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_TFC_TORPSONAR_g_tc_cSonarSignal_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,16,NULL,NULL);

    static DDS_TypeCode_Member DMSG_TFC_TORPSONAR_g_tc_members[2]=
    {
        {
            (char *)"cTropedoSonarState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cSonarSignal",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_TORPSONAR_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_TORPSONAR", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_TFC_TORPSONAR_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_TORPSONAR*/

    if (is_initialized) {
        return &DMSG_TFC_TORPSONAR_g_tc;
    }

    DMSG_TFC_TORPSONAR_g_tc_cSonarSignal_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    DMSG_TFC_TORPSONAR_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_TORPSONAR_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TFC_TORPSONAR_g_tc_cSonarSignal_array;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_TORPSONAR_g_tc;
}


RTIBool DMSG_TFC_TORPSONAR_initialize(
    DMSG_TFC_TORPSONAR* sample) {
  return DMSG_TFC_TORPSONAR_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_TORPSONAR_initialize_ex(
    DMSG_TFC_TORPSONAR* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cTropedoSonarState)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->cSonarSignal, (16), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_TFC_TORPSONAR_finalize(
    DMSG_TFC_TORPSONAR* sample)
{
    DMSG_TFC_TORPSONAR_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_TORPSONAR_finalize_ex(
    DMSG_TFC_TORPSONAR* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TFC_TORPSONAR_copy(
    DMSG_TFC_TORPSONAR* dst,
    const DMSG_TFC_TORPSONAR* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cTropedoSonarState, &src->cTropedoSonarState)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cSonarSignal, src->cSonarSignal, (16), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_TORPSONAR' sequence class.
 */
#define T DMSG_TFC_TORPSONAR
#define TSeq DMSG_TFC_TORPSONARSeq
#define T_initialize_ex DMSG_TFC_TORPSONAR_initialize_ex
#define T_finalize_ex   DMSG_TFC_TORPSONAR_finalize_ex
#define T_copy       DMSG_TFC_TORPSONAR_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_TORPTARGETTYPENAME = "DMSG_TFC_TORPTARGET";

DDS_TypeCode* DMSG_TFC_TORPTARGET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_TFC_TORPTARGET_g_tc_bySonarBeam_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,16,NULL,NULL);

    static DDS_TypeCode_Member DMSG_TFC_TORPTARGET_g_tc_members[5]=
    {
        {
            (char *)"byTargetID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byTargetType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTargetAltitude",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fTargetBearing",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bySonarBeam",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_TORPTARGET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_TORPTARGET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        5, /* Number of members */
        DMSG_TFC_TORPTARGET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_TORPTARGET*/

    if (is_initialized) {
        return &DMSG_TFC_TORPTARGET_g_tc;
    }

    DMSG_TFC_TORPTARGET_g_tc_bySonarBeam_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    DMSG_TFC_TORPTARGET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_TORPTARGET_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_TORPTARGET_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_TORPTARGET_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_TFC_TORPTARGET_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DMSG_TFC_TORPTARGET_g_tc_bySonarBeam_array;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_TORPTARGET_g_tc;
}


RTIBool DMSG_TFC_TORPTARGET_initialize(
    DMSG_TFC_TORPTARGET* sample) {
  return DMSG_TFC_TORPTARGET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_TORPTARGET_initialize_ex(
    DMSG_TFC_TORPTARGET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byTargetID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byTargetType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTargetAltitude)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initFloat(&sample->fTargetBearing)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->bySonarBeam, (16), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_TFC_TORPTARGET_finalize(
    DMSG_TFC_TORPTARGET* sample)
{
    DMSG_TFC_TORPTARGET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_TORPTARGET_finalize_ex(
    DMSG_TFC_TORPTARGET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TFC_TORPTARGET_copy(
    DMSG_TFC_TORPTARGET* dst,
    const DMSG_TFC_TORPTARGET* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byTargetID, &src->byTargetID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byTargetType, &src->byTargetType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTargetAltitude, &src->fTargetAltitude)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyFloat(
        &dst->fTargetBearing, &src->fTargetBearing)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->bySonarBeam, src->bySonarBeam, (16), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_TORPTARGET' sequence class.
 */
#define T DMSG_TFC_TORPTARGET
#define TSeq DMSG_TFC_TORPTARGETSeq
#define T_initialize_ex DMSG_TFC_TORPTARGET_initialize_ex
#define T_finalize_ex   DMSG_TFC_TORPTARGET_finalize_ex
#define T_copy       DMSG_TFC_TORPTARGET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_TORPEDOAVAILABILITYTYPENAME = "DMSG_TFC_TORPEDOAVAILABILITY";

DDS_TypeCode* DMSG_TFC_TORPEDOAVAILABILITY_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TFC_TORPEDOAVAILABILITY_g_tc_members[2]=
    {
        {
            (char *)"cState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_TORPEDOAVAILABILITY_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_TORPEDOAVAILABILITY", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_TFC_TORPEDOAVAILABILITY_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_TORPEDOAVAILABILITY*/

    if (is_initialized) {
        return &DMSG_TFC_TORPEDOAVAILABILITY_g_tc;
    }


    DMSG_TFC_TORPEDOAVAILABILITY_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_TORPEDOAVAILABILITY_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_TORPEDOAVAILABILITY_g_tc;
}


RTIBool DMSG_TFC_TORPEDOAVAILABILITY_initialize(
    DMSG_TFC_TORPEDOAVAILABILITY* sample) {
  return DMSG_TFC_TORPEDOAVAILABILITY_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_TORPEDOAVAILABILITY_initialize_ex(
    DMSG_TFC_TORPEDOAVAILABILITY* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cState)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TFC_TORPEDOAVAILABILITY_finalize(
    DMSG_TFC_TORPEDOAVAILABILITY* sample)
{
    DMSG_TFC_TORPEDOAVAILABILITY_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_TORPEDOAVAILABILITY_finalize_ex(
    DMSG_TFC_TORPEDOAVAILABILITY* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TFC_TORPEDOAVAILABILITY_copy(
    DMSG_TFC_TORPEDOAVAILABILITY* dst,
    const DMSG_TFC_TORPEDOAVAILABILITY* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cState, &src->cState)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeNum, &src->cTubeNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_TORPEDOAVAILABILITY' sequence class.
 */
#define T DMSG_TFC_TORPEDOAVAILABILITY
#define TSeq DMSG_TFC_TORPEDOAVAILABILITYSeq
#define T_initialize_ex DMSG_TFC_TORPEDOAVAILABILITY_initialize_ex
#define T_finalize_ex   DMSG_TFC_TORPEDOAVAILABILITY_finalize_ex
#define T_copy       DMSG_TFC_TORPEDOAVAILABILITY_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_ENGAGESTATETYPENAME = "DMSG_TFC_ENGAGESTATE";

DDS_TypeCode* DMSG_TFC_ENGAGESTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TFC_ENGAGESTATE_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_ENGAGESTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_ENGAGESTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_TFC_ENGAGESTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_ENGAGESTATE*/

    if (is_initialized) {
        return &DMSG_TFC_ENGAGESTATE_g_tc;
    }


    DMSG_TFC_ENGAGESTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_TFC_ENGAGESTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_ENGAGESTATE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_ENGAGESTATE_g_tc;
}


RTIBool DMSG_TFC_ENGAGESTATE_initialize(
    DMSG_TFC_ENGAGESTATE* sample) {
  return DMSG_TFC_ENGAGESTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_ENGAGESTATE_initialize_ex(
    DMSG_TFC_ENGAGESTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cTubeNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cEngageState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TFC_ENGAGESTATE_finalize(
    DMSG_TFC_ENGAGESTATE* sample)
{
    DMSG_TFC_ENGAGESTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_ENGAGESTATE_finalize_ex(
    DMSG_TFC_ENGAGESTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_TFC_ENGAGESTATE_copy(
    DMSG_TFC_ENGAGESTATE* dst,
    const DMSG_TFC_ENGAGESTATE* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeNum, &src->cTubeNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageState, &src->cEngageState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_ENGAGESTATE' sequence class.
 */
#define T DMSG_TFC_ENGAGESTATE
#define TSeq DMSG_TFC_ENGAGESTATESeq
#define T_initialize_ex DMSG_TFC_ENGAGESTATE_initialize_ex
#define T_finalize_ex   DMSG_TFC_ENGAGESTATE_finalize_ex
#define T_copy       DMSG_TFC_ENGAGESTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_SWSTATETYPENAME = "DMSG_TFC_SWSTATE";

DDS_TypeCode* DMSG_TFC_SWSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TFC_SWSTATE_g_tc_members[1]=
    {
        {
            (char *)"cSoftwareState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_SWSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_SWSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_TFC_SWSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_SWSTATE*/

    if (is_initialized) {
        return &DMSG_TFC_SWSTATE_g_tc;
    }


    DMSG_TFC_SWSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_SWSTATE_g_tc;
}


RTIBool DMSG_TFC_SWSTATE_initialize(
    DMSG_TFC_SWSTATE* sample) {
  return DMSG_TFC_SWSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_SWSTATE_initialize_ex(
    DMSG_TFC_SWSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cSoftwareState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TFC_SWSTATE_finalize(
    DMSG_TFC_SWSTATE* sample)
{
    DMSG_TFC_SWSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_SWSTATE_finalize_ex(
    DMSG_TFC_SWSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TFC_SWSTATE_copy(
    DMSG_TFC_SWSTATE* dst,
    const DMSG_TFC_SWSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cSoftwareState, &src->cSoftwareState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_SWSTATE' sequence class.
 */
#define T DMSG_TFC_SWSTATE
#define TSeq DMSG_TFC_SWSTATESeq
#define T_initialize_ex DMSG_TFC_SWSTATE_initialize_ex
#define T_finalize_ex   DMSG_TFC_SWSTATE_finalize_ex
#define T_copy       DMSG_TFC_SWSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_TFC_HLTCTRLTYPENAME = "DMSG_TFC_HLTCTRL";

DDS_TypeCode* DMSG_TFC_HLTCTRL_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_TFC_HLTCTRL_g_tc_members[2]=
    {
        {
            (char *)"byTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCtrlCmd",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_TFC_HLTCTRL_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_TFC_HLTCTRL", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_TFC_HLTCTRL_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_TFC_HLTCTRL*/

    if (is_initialized) {
        return &DMSG_TFC_HLTCTRL_g_tc;
    }


    DMSG_TFC_HLTCTRL_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_TFC_HLTCTRL_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_TFC_HLTCTRL_g_tc;
}


RTIBool DMSG_TFC_HLTCTRL_initialize(
    DMSG_TFC_HLTCTRL* sample) {
  return DMSG_TFC_HLTCTRL_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_TFC_HLTCTRL_initialize_ex(
    DMSG_TFC_HLTCTRL* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byTubeNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCtrlCmd)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_TFC_HLTCTRL_finalize(
    DMSG_TFC_HLTCTRL* sample)
{
    DMSG_TFC_HLTCTRL_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_TFC_HLTCTRL_finalize_ex(
    DMSG_TFC_HLTCTRL* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_TFC_HLTCTRL_copy(
    DMSG_TFC_HLTCTRL* dst,
    const DMSG_TFC_HLTCTRL* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byTubeNum, &src->byTubeNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCtrlCmd, &src->byCtrlCmd)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_TFC_HLTCTRL' sequence class.
 */
#define T DMSG_TFC_HLTCTRL
#define TSeq DMSG_TFC_HLTCTRLSeq
#define T_initialize_ex DMSG_TFC_HLTCTRL_initialize_ex
#define T_finalize_ex   DMSG_TFC_HLTCTRL_finalize_ex
#define T_copy       DMSG_TFC_HLTCTRL_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MFC_SUMSTATETYPENAME = "DMSG_MFC_SUMSTATE";

DDS_TypeCode* DMSG_MFC_SUMSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MFC_SUMSTATE_g_tc_members[3]=
    {
        {
            (char *)"byPower",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byFireSig",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byFire",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MFC_SUMSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MFC_SUMSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_MFC_SUMSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MFC_SUMSTATE*/

    if (is_initialized) {
        return &DMSG_MFC_SUMSTATE_g_tc;
    }


    DMSG_MFC_SUMSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_SUMSTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_SUMSTATE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_MFC_SUMSTATE_g_tc;
}


RTIBool DMSG_MFC_SUMSTATE_initialize(
    DMSG_MFC_SUMSTATE* sample) {
  return DMSG_MFC_SUMSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MFC_SUMSTATE_initialize_ex(
    DMSG_MFC_SUMSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->byPower)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byFireSig)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byFire)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MFC_SUMSTATE_finalize(
    DMSG_MFC_SUMSTATE* sample)
{
    DMSG_MFC_SUMSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MFC_SUMSTATE_finalize_ex(
    DMSG_MFC_SUMSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_MFC_SUMSTATE_copy(
    DMSG_MFC_SUMSTATE* dst,
    const DMSG_MFC_SUMSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->byPower, &src->byPower)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byFireSig, &src->byFireSig)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byFire, &src->byFire)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MFC_SUMSTATE' sequence class.
 */
#define T DMSG_MFC_SUMSTATE
#define TSeq DMSG_MFC_SUMSTATESeq
#define T_initialize_ex DMSG_MFC_SUMSTATE_initialize_ex
#define T_finalize_ex   DMSG_MFC_SUMSTATE_finalize_ex
#define T_copy       DMSG_MFC_SUMSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MFC_FIRINGDATATYPENAME = "DMSG_MFC_FIRINGDATA";

DDS_TypeCode* DMSG_MFC_FIRINGDATA_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MFC_FIRINGDATA_g_tc_members[10]=
    {
        {
            (char *)"dTgtLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dTgtLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nFlightTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dFireAvailableLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dFireAvailableLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dAdvicedCrs",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dExpectFlightLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dExpectFlightLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dFlightLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dFlightLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MFC_FIRINGDATA_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MFC_FIRINGDATA", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        10, /* Number of members */
        DMSG_MFC_FIRINGDATA_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MFC_FIRINGDATA*/

    if (is_initialized) {
        return &DMSG_MFC_FIRINGDATA_g_tc;
    }


    DMSG_MFC_FIRINGDATA_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_MFC_FIRINGDATA_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_MFC_FIRINGDATA_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_MFC_FIRINGDATA_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_MFC_FIRINGDATA_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_MFC_FIRINGDATA_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_MFC_FIRINGDATA_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_MFC_FIRINGDATA_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_MFC_FIRINGDATA_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_MFC_FIRINGDATA_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    is_initialized = RTI_TRUE;

    return &DMSG_MFC_FIRINGDATA_g_tc;
}


RTIBool DMSG_MFC_FIRINGDATA_initialize(
    DMSG_MFC_FIRINGDATA* sample) {
  return DMSG_MFC_FIRINGDATA_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MFC_FIRINGDATA_initialize_ex(
    DMSG_MFC_FIRINGDATA* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initDouble(&sample->dTgtLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dTgtLon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nFlightTime)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dFireAvailableLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dFireAvailableLon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dAdvicedCrs)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dExpectFlightLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dExpectFlightLon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dFlightLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dFlightLon)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MFC_FIRINGDATA_finalize(
    DMSG_MFC_FIRINGDATA* sample)
{
    DMSG_MFC_FIRINGDATA_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MFC_FIRINGDATA_finalize_ex(
    DMSG_MFC_FIRINGDATA* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_MFC_FIRINGDATA_copy(
    DMSG_MFC_FIRINGDATA* dst,
    const DMSG_MFC_FIRINGDATA* src)
{        

    if (!RTICdrType_copyDouble(
        &dst->dTgtLat, &src->dTgtLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dTgtLon, &src->dTgtLon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nFlightTime, &src->nFlightTime)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dFireAvailableLat, &src->dFireAvailableLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dFireAvailableLon, &src->dFireAvailableLon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dAdvicedCrs, &src->dAdvicedCrs)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dExpectFlightLat, &src->dExpectFlightLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dExpectFlightLon, &src->dExpectFlightLon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dFlightLat, &src->dFlightLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dFlightLon, &src->dFlightLon)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MFC_FIRINGDATA' sequence class.
 */
#define T DMSG_MFC_FIRINGDATA
#define TSeq DMSG_MFC_FIRINGDATASeq
#define T_initialize_ex DMSG_MFC_FIRINGDATA_initialize_ex
#define T_finalize_ex   DMSG_MFC_FIRINGDATA_finalize_ex
#define T_copy       DMSG_MFC_FIRINGDATA_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MFC_INTERLOCKTYPENAME = "DMSG_MFC_INTERLOCK";

DDS_TypeCode* DMSG_MFC_INTERLOCK_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MFC_INTERLOCK_g_tc_members[13]=
    {
        {
            (char *)"cOverRideSet",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cDiscreteSig_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cMissionPermit",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cSwitch_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPower_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFlightCrs_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPreFire_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cVLTStatus_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFirePassWord_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cShipSafeCondition_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFirePermit_Key_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cFireStep_Err",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cLauncherNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MFC_INTERLOCK_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MFC_INTERLOCK", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        13, /* Number of members */
        DMSG_MFC_INTERLOCK_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MFC_INTERLOCK*/

    if (is_initialized) {
        return &DMSG_MFC_INTERLOCK_g_tc;
    }


    DMSG_MFC_INTERLOCK_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_INTERLOCK_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_MFC_INTERLOCK_g_tc;
}


RTIBool DMSG_MFC_INTERLOCK_initialize(
    DMSG_MFC_INTERLOCK* sample) {
  return DMSG_MFC_INTERLOCK_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MFC_INTERLOCK_initialize_ex(
    DMSG_MFC_INTERLOCK* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cOverRideSet)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cDiscreteSig_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cMissionPermit)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cSwitch_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cPower_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFlightCrs_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cPreFire_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cVLTStatus_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFirePassWord_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cShipSafeCondition_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFirePermit_Key_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cFireStep_Err)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cLauncherNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MFC_INTERLOCK_finalize(
    DMSG_MFC_INTERLOCK* sample)
{
    DMSG_MFC_INTERLOCK_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MFC_INTERLOCK_finalize_ex(
    DMSG_MFC_INTERLOCK* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_MFC_INTERLOCK_copy(
    DMSG_MFC_INTERLOCK* dst,
    const DMSG_MFC_INTERLOCK* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cOverRideSet, &src->cOverRideSet)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cDiscreteSig_Err, &src->cDiscreteSig_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cMissionPermit, &src->cMissionPermit)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cSwitch_Err, &src->cSwitch_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cPower_Err, &src->cPower_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFlightCrs_Err, &src->cFlightCrs_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cPreFire_Err, &src->cPreFire_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cVLTStatus_Err, &src->cVLTStatus_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFirePassWord_Err, &src->cFirePassWord_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cShipSafeCondition_Err, &src->cShipSafeCondition_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFirePermit_Key_Err, &src->cFirePermit_Key_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cFireStep_Err, &src->cFireStep_Err)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cLauncherNum, &src->cLauncherNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MFC_INTERLOCK' sequence class.
 */
#define T DMSG_MFC_INTERLOCK
#define TSeq DMSG_MFC_INTERLOCKSeq
#define T_initialize_ex DMSG_MFC_INTERLOCK_initialize_ex
#define T_finalize_ex   DMSG_MFC_INTERLOCK_finalize_ex
#define T_copy       DMSG_MFC_INTERLOCK_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MFC_SAFETYSWITCHSTATETYPENAME = "DMSG_MFC_SAFETYSWITCHSTATE";

DDS_TypeCode* DMSG_MFC_SAFETYSWITCHSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MFC_SAFETYSWITCHSTATE_g_tc_members[2]=
    {
        {
            (char *)"cLauncherNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cSwitchState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MFC_SAFETYSWITCHSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MFC_SAFETYSWITCHSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_MFC_SAFETYSWITCHSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MFC_SAFETYSWITCHSTATE*/

    if (is_initialized) {
        return &DMSG_MFC_SAFETYSWITCHSTATE_g_tc;
    }


    DMSG_MFC_SAFETYSWITCHSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_SAFETYSWITCHSTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_MFC_SAFETYSWITCHSTATE_g_tc;
}


RTIBool DMSG_MFC_SAFETYSWITCHSTATE_initialize(
    DMSG_MFC_SAFETYSWITCHSTATE* sample) {
  return DMSG_MFC_SAFETYSWITCHSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MFC_SAFETYSWITCHSTATE_initialize_ex(
    DMSG_MFC_SAFETYSWITCHSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cLauncherNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cSwitchState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MFC_SAFETYSWITCHSTATE_finalize(
    DMSG_MFC_SAFETYSWITCHSTATE* sample)
{
    DMSG_MFC_SAFETYSWITCHSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MFC_SAFETYSWITCHSTATE_finalize_ex(
    DMSG_MFC_SAFETYSWITCHSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_MFC_SAFETYSWITCHSTATE_copy(
    DMSG_MFC_SAFETYSWITCHSTATE* dst,
    const DMSG_MFC_SAFETYSWITCHSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cLauncherNum, &src->cLauncherNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cSwitchState, &src->cSwitchState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MFC_SAFETYSWITCHSTATE' sequence class.
 */
#define T DMSG_MFC_SAFETYSWITCHSTATE
#define TSeq DMSG_MFC_SAFETYSWITCHSTATESeq
#define T_initialize_ex DMSG_MFC_SAFETYSWITCHSTATE_initialize_ex
#define T_finalize_ex   DMSG_MFC_SAFETYSWITCHSTATE_finalize_ex
#define T_copy       DMSG_MFC_SAFETYSWITCHSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MFC_SUMTESTRESULTTYPENAME = "DMSG_MFC_SUMTESTRESULT";

DDS_TypeCode* DMSG_MFC_SUMTESTRESULT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MFC_SUMTESTRESULT_g_tc_members[1]=
    {
        {
            (char *)"cErr",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MFC_SUMTESTRESULT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MFC_SUMTESTRESULT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_MFC_SUMTESTRESULT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MFC_SUMTESTRESULT*/

    if (is_initialized) {
        return &DMSG_MFC_SUMTESTRESULT_g_tc;
    }


    DMSG_MFC_SUMTESTRESULT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_MFC_SUMTESTRESULT_g_tc;
}


RTIBool DMSG_MFC_SUMTESTRESULT_initialize(
    DMSG_MFC_SUMTESTRESULT* sample) {
  return DMSG_MFC_SUMTESTRESULT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MFC_SUMTESTRESULT_initialize_ex(
    DMSG_MFC_SUMTESTRESULT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cErr)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MFC_SUMTESTRESULT_finalize(
    DMSG_MFC_SUMTESTRESULT* sample)
{
    DMSG_MFC_SUMTESTRESULT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MFC_SUMTESTRESULT_finalize_ex(
    DMSG_MFC_SUMTESTRESULT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_MFC_SUMTESTRESULT_copy(
    DMSG_MFC_SUMTESTRESULT* dst,
    const DMSG_MFC_SUMTESTRESULT* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cErr, &src->cErr)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MFC_SUMTESTRESULT' sequence class.
 */
#define T DMSG_MFC_SUMTESTRESULT
#define TSeq DMSG_MFC_SUMTESTRESULTSeq
#define T_initialize_ex DMSG_MFC_SUMTESTRESULT_initialize_ex
#define T_finalize_ex   DMSG_MFC_SUMTESTRESULT_finalize_ex
#define T_copy       DMSG_MFC_SUMTESTRESULT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MFC_ENGAGESTATETYPENAME = "DMSG_MFC_ENGAGESTATE";

DDS_TypeCode* DMSG_MFC_ENGAGESTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MFC_ENGAGESTATE_g_tc_members[3]=
    {
        {
            (char *)"trkNo",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cEngageState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MFC_ENGAGESTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MFC_ENGAGESTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_MFC_ENGAGESTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MFC_ENGAGESTATE*/

    if (is_initialized) {
        return &DMSG_MFC_ENGAGESTATE_g_tc;
    }


    DMSG_MFC_ENGAGESTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)TrkNoSys_get_typecode();
    DMSG_MFC_ENGAGESTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_ENGAGESTATE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_MFC_ENGAGESTATE_g_tc;
}


RTIBool DMSG_MFC_ENGAGESTATE_initialize(
    DMSG_MFC_ENGAGESTATE* sample) {
  return DMSG_MFC_ENGAGESTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MFC_ENGAGESTATE_initialize_ex(
    DMSG_MFC_ENGAGESTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!TrkNoSys_initialize_ex(&sample->trkNo,allocatePointers)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_initChar(&sample->cTubeNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cEngageState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MFC_ENGAGESTATE_finalize(
    DMSG_MFC_ENGAGESTATE* sample)
{
    DMSG_MFC_ENGAGESTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MFC_ENGAGESTATE_finalize_ex(
    DMSG_MFC_ENGAGESTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


    TrkNoSys_finalize_ex(&sample->trkNo,deletePointers);
            
}

RTIBool DMSG_MFC_ENGAGESTATE_copy(
    DMSG_MFC_ENGAGESTATE* dst,
    const DMSG_MFC_ENGAGESTATE* src)
{        

    if (!TrkNoSys_copy(
        &dst->trkNo, &src->trkNo)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeNum, &src->cTubeNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cEngageState, &src->cEngageState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MFC_ENGAGESTATE' sequence class.
 */
#define T DMSG_MFC_ENGAGESTATE
#define TSeq DMSG_MFC_ENGAGESTATESeq
#define T_initialize_ex DMSG_MFC_ENGAGESTATE_initialize_ex
#define T_finalize_ex   DMSG_MFC_ENGAGESTATE_finalize_ex
#define T_copy       DMSG_MFC_ENGAGESTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MFC_MISSILEAVAILABILITYTYPENAME = "DMSG_MFC_MISSILEAVAILABILITY";

DDS_TypeCode* DMSG_MFC_MISSILEAVAILABILITY_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MFC_MISSILEAVAILABILITY_g_tc_members[2]=
    {
        {
            (char *)"cTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MFC_MISSILEAVAILABILITY_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MFC_MISSILEAVAILABILITY", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_MFC_MISSILEAVAILABILITY_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MFC_MISSILEAVAILABILITY*/

    if (is_initialized) {
        return &DMSG_MFC_MISSILEAVAILABILITY_g_tc;
    }


    DMSG_MFC_MISSILEAVAILABILITY_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_MISSILEAVAILABILITY_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_MFC_MISSILEAVAILABILITY_g_tc;
}


RTIBool DMSG_MFC_MISSILEAVAILABILITY_initialize(
    DMSG_MFC_MISSILEAVAILABILITY* sample) {
  return DMSG_MFC_MISSILEAVAILABILITY_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MFC_MISSILEAVAILABILITY_initialize_ex(
    DMSG_MFC_MISSILEAVAILABILITY* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cTubeNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MFC_MISSILEAVAILABILITY_finalize(
    DMSG_MFC_MISSILEAVAILABILITY* sample)
{
    DMSG_MFC_MISSILEAVAILABILITY_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MFC_MISSILEAVAILABILITY_finalize_ex(
    DMSG_MFC_MISSILEAVAILABILITY* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_MFC_MISSILEAVAILABILITY_copy(
    DMSG_MFC_MISSILEAVAILABILITY* dst,
    const DMSG_MFC_MISSILEAVAILABILITY* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cTubeNum, &src->cTubeNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeState, &src->cTubeState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MFC_MISSILEAVAILABILITY' sequence class.
 */
#define T DMSG_MFC_MISSILEAVAILABILITY
#define TSeq DMSG_MFC_MISSILEAVAILABILITYSeq
#define T_initialize_ex DMSG_MFC_MISSILEAVAILABILITY_initialize_ex
#define T_finalize_ex   DMSG_MFC_MISSILEAVAILABILITY_finalize_ex
#define T_copy       DMSG_MFC_MISSILEAVAILABILITY_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MFC_SWSTATETYPENAME = "DMSG_MFC_SWSTATE";

DDS_TypeCode* DMSG_MFC_SWSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MFC_SWSTATE_g_tc_members[1]=
    {
        {
            (char *)"cSoftwareState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MFC_SWSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MFC_SWSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_MFC_SWSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MFC_SWSTATE*/

    if (is_initialized) {
        return &DMSG_MFC_SWSTATE_g_tc;
    }


    DMSG_MFC_SWSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_MFC_SWSTATE_g_tc;
}


RTIBool DMSG_MFC_SWSTATE_initialize(
    DMSG_MFC_SWSTATE* sample) {
  return DMSG_MFC_SWSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MFC_SWSTATE_initialize_ex(
    DMSG_MFC_SWSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cSoftwareState)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MFC_SWSTATE_finalize(
    DMSG_MFC_SWSTATE* sample)
{
    DMSG_MFC_SWSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MFC_SWSTATE_finalize_ex(
    DMSG_MFC_SWSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_MFC_SWSTATE_copy(
    DMSG_MFC_SWSTATE* dst,
    const DMSG_MFC_SWSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cSoftwareState, &src->cSoftwareState)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MFC_SWSTATE' sequence class.
 */
#define T DMSG_MFC_SWSTATE
#define TSeq DMSG_MFC_SWSTATESeq
#define T_initialize_ex DMSG_MFC_SWSTATE_initialize_ex
#define T_finalize_ex   DMSG_MFC_SWSTATE_finalize_ex
#define T_copy       DMSG_MFC_SWSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MFC_COUNTDOWNSTATETYPENAME = "DMSG_MFC_COUNTDOWNSTATE";

DDS_TypeCode* DMSG_MFC_COUNTDOWNSTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MFC_COUNTDOWNSTATE_g_tc_members[10]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCountdown1",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCountdown2",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCountdown3",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCountdown4",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCountdown5",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCountdown6",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCountdown7",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"byCountdown8",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MFC_COUNTDOWNSTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MFC_COUNTDOWNSTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        10, /* Number of members */
        DMSG_MFC_COUNTDOWNSTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MFC_COUNTDOWNSTATE*/

    if (is_initialized) {
        return &DMSG_MFC_COUNTDOWNSTATE_g_tc;
    }


    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_MFC_COUNTDOWNSTATE_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_MFC_COUNTDOWNSTATE_g_tc;
}


RTIBool DMSG_MFC_COUNTDOWNSTATE_initialize(
    DMSG_MFC_COUNTDOWNSTATE* sample) {
  return DMSG_MFC_COUNTDOWNSTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MFC_COUNTDOWNSTATE_initialize_ex(
    DMSG_MFC_COUNTDOWNSTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCountdown1)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCountdown2)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCountdown3)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCountdown4)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCountdown5)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCountdown6)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCountdown7)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->byCountdown8)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MFC_COUNTDOWNSTATE_finalize(
    DMSG_MFC_COUNTDOWNSTATE* sample)
{
    DMSG_MFC_COUNTDOWNSTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MFC_COUNTDOWNSTATE_finalize_ex(
    DMSG_MFC_COUNTDOWNSTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_MFC_COUNTDOWNSTATE_copy(
    DMSG_MFC_COUNTDOWNSTATE* dst,
    const DMSG_MFC_COUNTDOWNSTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeNum, &src->cTubeNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCountdown1, &src->byCountdown1)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCountdown2, &src->byCountdown2)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCountdown3, &src->byCountdown3)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCountdown4, &src->byCountdown4)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCountdown5, &src->byCountdown5)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCountdown6, &src->byCountdown6)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCountdown7, &src->byCountdown7)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->byCountdown8, &src->byCountdown8)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MFC_COUNTDOWNSTATE' sequence class.
 */
#define T DMSG_MFC_COUNTDOWNSTATE
#define TSeq DMSG_MFC_COUNTDOWNSTATESeq
#define T_initialize_ex DMSG_MFC_COUNTDOWNSTATE_initialize_ex
#define T_finalize_ex   DMSG_MFC_COUNTDOWNSTATE_finalize_ex
#define T_copy       DMSG_MFC_COUNTDOWNSTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_DFC_MANOEUVRETYPENAME = "DMSG_DFC_MANOEUVRE";

DDS_TypeCode* DMSG_DFC_MANOEUVRE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreTime_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,5,NULL,NULL);
    static DDS_TypeCode DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreHeading_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,5,NULL,NULL);
    static DDS_TypeCode DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreSpd_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,5,NULL,NULL);
    static DDS_TypeCode DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreDepth_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,5,NULL,NULL);

    static DDS_TypeCode_Member DMSG_DFC_MANOEUVRE_g_tc_members[4]=
    {
        {
            (char *)"dManoeuvreTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dManoeuvreHeading",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dManoeuvreSpd",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dManoeuvreDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_DFC_MANOEUVRE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_DFC_MANOEUVRE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        4, /* Number of members */
        DMSG_DFC_MANOEUVRE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_DFC_MANOEUVRE*/

    if (is_initialized) {
        return &DMSG_DFC_MANOEUVRE_g_tc;
    }

    DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreTime_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreHeading_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreSpd_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreDepth_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;

    DMSG_DFC_MANOEUVRE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreTime_array;
    DMSG_DFC_MANOEUVRE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreHeading_array;
    DMSG_DFC_MANOEUVRE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreSpd_array;
    DMSG_DFC_MANOEUVRE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_MANOEUVRE_g_tc_dManoeuvreDepth_array;

    is_initialized = RTI_TRUE;

    return &DMSG_DFC_MANOEUVRE_g_tc;
}


RTIBool DMSG_DFC_MANOEUVRE_initialize(
    DMSG_DFC_MANOEUVRE* sample) {
  return DMSG_DFC_MANOEUVRE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_DFC_MANOEUVRE_initialize_ex(
    DMSG_DFC_MANOEUVRE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */

    
    if (!RTICdrType_initArray(
        sample->dManoeuvreTime, (5), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->dManoeuvreHeading, (5), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->dManoeuvreSpd, (5), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->dManoeuvreDepth, (5), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_DFC_MANOEUVRE_finalize(
    DMSG_DFC_MANOEUVRE* sample)
{
    DMSG_DFC_MANOEUVRE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_DFC_MANOEUVRE_finalize_ex(
    DMSG_DFC_MANOEUVRE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_DFC_MANOEUVRE_copy(
    DMSG_DFC_MANOEUVRE* dst,
    const DMSG_DFC_MANOEUVRE* src)
{        

    if (!RTICdrType_copyArray(
        dst->dManoeuvreTime, src->dManoeuvreTime, (5), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->dManoeuvreHeading, src->dManoeuvreHeading, (5), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->dManoeuvreSpd, src->dManoeuvreSpd, (5), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->dManoeuvreDepth, src->dManoeuvreDepth, (5), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_DFC_MANOEUVRE' sequence class.
 */
#define T DMSG_DFC_MANOEUVRE
#define TSeq DMSG_DFC_MANOEUVRESeq
#define T_initialize_ex DMSG_DFC_MANOEUVRE_initialize_ex
#define T_finalize_ex   DMSG_DFC_MANOEUVRE_finalize_ex
#define T_copy       DMSG_DFC_MANOEUVRE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_DFC_TACTICINFOTYPENAME = "DMSG_DFC_TACTICINFO";

DDS_TypeCode* DMSG_DFC_TACTICINFO_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_DFC_TACTICINFO_g_tc_chTacticName_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,20,NULL,NULL);

    static DDS_TypeCode_Member DMSG_DFC_TACTICINFO_g_tc_members[2]=
    {
        {
            (char *)"nTacticListID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"chTacticName",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_DFC_TACTICINFO_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_DFC_TACTICINFO", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_DFC_TACTICINFO_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_DFC_TACTICINFO*/

    if (is_initialized) {
        return &DMSG_DFC_TACTICINFO_g_tc;
    }

    DMSG_DFC_TACTICINFO_g_tc_chTacticName_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    DMSG_DFC_TACTICINFO_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_DFC_TACTICINFO_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_TACTICINFO_g_tc_chTacticName_array;

    is_initialized = RTI_TRUE;

    return &DMSG_DFC_TACTICINFO_g_tc;
}


RTIBool DMSG_DFC_TACTICINFO_initialize(
    DMSG_DFC_TACTICINFO* sample) {
  return DMSG_DFC_TACTICINFO_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_DFC_TACTICINFO_initialize_ex(
    DMSG_DFC_TACTICINFO* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nTacticListID)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->chTacticName, (20), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_DFC_TACTICINFO_finalize(
    DMSG_DFC_TACTICINFO* sample)
{
    DMSG_DFC_TACTICINFO_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_DFC_TACTICINFO_finalize_ex(
    DMSG_DFC_TACTICINFO* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_DFC_TACTICINFO_copy(
    DMSG_DFC_TACTICINFO* dst,
    const DMSG_DFC_TACTICINFO* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nTacticListID, &src->nTacticListID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->chTacticName, src->chTacticName, (20), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_DFC_TACTICINFO' sequence class.
 */
#define T DMSG_DFC_TACTICINFO
#define TSeq DMSG_DFC_TACTICINFOSeq
#define T_initialize_ex DMSG_DFC_TACTICINFO_initialize_ex
#define T_finalize_ex   DMSG_DFC_TACTICINFO_finalize_ex
#define T_copy       DMSG_DFC_TACTICINFO_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_DFC_LOADINGTYPENAME = "DMSG_DFC_LOADING";

DDS_TypeCode* DMSG_DFC_LOADING_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_UnsignedLong DMSG_DFC_LOADING_g_tc_cLauncherID_dimensions[2] = {4,9};
    static DDS_UnsignedLong DMSG_DFC_LOADING_g_tc_cTubeID_dimensions[2] = {4,9};
    static DDS_UnsignedLong DMSG_DFC_LOADING_g_tc_cDecoyType_dimensions[2] = {4,9};
    static DDS_UnsignedLong DMSG_DFC_LOADING_g_tc_cTubeState_dimensions[2] = {4,9};
    static DDS_UnsignedLong DMSG_DFC_LOADING_g_tc_cAcouMode_dimensions[2] = {4,9};
    static DDS_UnsignedLong DMSG_DFC_LOADING_g_tc_nDecoySetDepth_dimensions[2] = {4,9};
    static DDS_UnsignedLong DMSG_DFC_LOADING_g_tc_cMDMobileType_dimensions[2] = {4,9};
    static DDS_UnsignedLong DMSG_DFC_LOADING_g_tc_nDecoyLifeTime_dimensions[2] = {4,9};
    static DDS_TypeCode DMSG_DFC_LOADING_g_tc_cLauncherID_array = DDS_INITIALIZE_ARRAY_TYPECODE(2,4,DMSG_DFC_LOADING_g_tc_cLauncherID_dimensions,NULL);
    static DDS_TypeCode DMSG_DFC_LOADING_g_tc_cTubeID_array = DDS_INITIALIZE_ARRAY_TYPECODE(2,4,DMSG_DFC_LOADING_g_tc_cTubeID_dimensions,NULL);
    static DDS_TypeCode DMSG_DFC_LOADING_g_tc_cDecoyType_array = DDS_INITIALIZE_ARRAY_TYPECODE(2,4,DMSG_DFC_LOADING_g_tc_cDecoyType_dimensions,NULL);
    static DDS_TypeCode DMSG_DFC_LOADING_g_tc_cTubeState_array = DDS_INITIALIZE_ARRAY_TYPECODE(2,4,DMSG_DFC_LOADING_g_tc_cTubeState_dimensions,NULL);
    static DDS_TypeCode DMSG_DFC_LOADING_g_tc_cAcouMode_array = DDS_INITIALIZE_ARRAY_TYPECODE(2,4,DMSG_DFC_LOADING_g_tc_cAcouMode_dimensions,NULL);
    static DDS_TypeCode DMSG_DFC_LOADING_g_tc_nDecoySetDepth_array = DDS_INITIALIZE_ARRAY_TYPECODE(2,4,DMSG_DFC_LOADING_g_tc_nDecoySetDepth_dimensions,NULL);
    static DDS_TypeCode DMSG_DFC_LOADING_g_tc_cMDMobileType_array = DDS_INITIALIZE_ARRAY_TYPECODE(2,4,DMSG_DFC_LOADING_g_tc_cMDMobileType_dimensions,NULL);
    static DDS_TypeCode DMSG_DFC_LOADING_g_tc_nDecoyLifeTime_array = DDS_INITIALIZE_ARRAY_TYPECODE(2,4,DMSG_DFC_LOADING_g_tc_nDecoyLifeTime_dimensions,NULL);

    static DDS_TypeCode_Member DMSG_DFC_LOADING_g_tc_members[8]=
    {
        {
            (char *)"cLauncherID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cDecoyType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeState",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cAcouMode",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nDecoySetDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cMDMobileType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nDecoyLifeTime",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_DFC_LOADING_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_DFC_LOADING", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        8, /* Number of members */
        DMSG_DFC_LOADING_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_DFC_LOADING*/

    if (is_initialized) {
        return &DMSG_DFC_LOADING_g_tc;
    }

    DMSG_DFC_LOADING_g_tc_cLauncherID_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_LOADING_g_tc_cTubeID_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_LOADING_g_tc_cDecoyType_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_LOADING_g_tc_cTubeState_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_LOADING_g_tc_cAcouMode_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_LOADING_g_tc_nDecoySetDepth_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_DFC_LOADING_g_tc_cMDMobileType_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_LOADING_g_tc_nDecoyLifeTime_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    DMSG_DFC_LOADING_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_LOADING_g_tc_cLauncherID_array;
    DMSG_DFC_LOADING_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_LOADING_g_tc_cTubeID_array;
    DMSG_DFC_LOADING_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_LOADING_g_tc_cDecoyType_array;
    DMSG_DFC_LOADING_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_LOADING_g_tc_cTubeState_array;
    DMSG_DFC_LOADING_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_LOADING_g_tc_cAcouMode_array;
    DMSG_DFC_LOADING_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_LOADING_g_tc_nDecoySetDepth_array;
    DMSG_DFC_LOADING_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_LOADING_g_tc_cMDMobileType_array;
    DMSG_DFC_LOADING_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_LOADING_g_tc_nDecoyLifeTime_array;

    is_initialized = RTI_TRUE;

    return &DMSG_DFC_LOADING_g_tc;
}


RTIBool DMSG_DFC_LOADING_initialize(
    DMSG_DFC_LOADING* sample) {
  return DMSG_DFC_LOADING_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_DFC_LOADING_initialize_ex(
    DMSG_DFC_LOADING* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */

    
    if (!RTICdrType_initArray(
        sample->cLauncherID, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->cTubeID, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->cDecoyType, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->cTubeState, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->cAcouMode, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->nDecoySetDepth, (4)*(9), RTI_CDR_LONG_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->cMDMobileType, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->nDecoyLifeTime, (4)*(9), RTI_CDR_LONG_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_DFC_LOADING_finalize(
    DMSG_DFC_LOADING* sample)
{
    DMSG_DFC_LOADING_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_DFC_LOADING_finalize_ex(
    DMSG_DFC_LOADING* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_DFC_LOADING_copy(
    DMSG_DFC_LOADING* dst,
    const DMSG_DFC_LOADING* src)
{        

    if (!RTICdrType_copyArray(
        dst->cLauncherID, src->cLauncherID, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cTubeID, src->cTubeID, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cDecoyType, src->cDecoyType, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cTubeState, src->cTubeState, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cAcouMode, src->cAcouMode, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->nDecoySetDepth, src->nDecoySetDepth, (4)*(9), RTI_CDR_LONG_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cMDMobileType, src->cMDMobileType, (4)*(9), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->nDecoyLifeTime, src->nDecoyLifeTime, (4)*(9), RTI_CDR_LONG_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_DFC_LOADING' sequence class.
 */
#define T DMSG_DFC_LOADING
#define TSeq DMSG_DFC_LOADINGSeq
#define T_initialize_ex DMSG_DFC_LOADING_initialize_ex
#define T_finalize_ex   DMSG_DFC_LOADING_finalize_ex
#define T_copy       DMSG_DFC_LOADING_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_DFC_PREDICTPOSTYPENAME = "DMSG_DFC_PREDICTPOS";

DDS_TypeCode* DMSG_DFC_PREDICTPOS_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_DFC_PREDICTPOS_g_tc_members[5]=
    {
        {
            (char *)"nLaunchNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cLcDecoyType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLcPredictPosLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dLcPredictPosLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nLcPredictDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_DFC_PREDICTPOS_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_DFC_PREDICTPOS", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        5, /* Number of members */
        DMSG_DFC_PREDICTPOS_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_DFC_PREDICTPOS*/

    if (is_initialized) {
        return &DMSG_DFC_PREDICTPOS_g_tc;
    }


    DMSG_DFC_PREDICTPOS_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_DFC_PREDICTPOS_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_PREDICTPOS_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_DFC_PREDICTPOS_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_DFC_PREDICTPOS_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_DFC_PREDICTPOS_g_tc;
}


RTIBool DMSG_DFC_PREDICTPOS_initialize(
    DMSG_DFC_PREDICTPOS* sample) {
  return DMSG_DFC_PREDICTPOS_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_DFC_PREDICTPOS_initialize_ex(
    DMSG_DFC_PREDICTPOS* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nLaunchNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cLcDecoyType)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dLcPredictPosLat)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initDouble(&sample->dLcPredictPosLon)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nLcPredictDepth)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_DFC_PREDICTPOS_finalize(
    DMSG_DFC_PREDICTPOS* sample)
{
    DMSG_DFC_PREDICTPOS_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_DFC_PREDICTPOS_finalize_ex(
    DMSG_DFC_PREDICTPOS* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_DFC_PREDICTPOS_copy(
    DMSG_DFC_PREDICTPOS* dst,
    const DMSG_DFC_PREDICTPOS* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nLaunchNum, &src->nLaunchNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cLcDecoyType, &src->cLcDecoyType)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dLcPredictPosLat, &src->dLcPredictPosLat)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyDouble(
        &dst->dLcPredictPosLon, &src->dLcPredictPosLon)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nLcPredictDepth, &src->nLcPredictDepth)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_DFC_PREDICTPOS' sequence class.
 */
#define T DMSG_DFC_PREDICTPOS
#define TSeq DMSG_DFC_PREDICTPOSSeq
#define T_initialize_ex DMSG_DFC_PREDICTPOS_initialize_ex
#define T_finalize_ex   DMSG_DFC_PREDICTPOS_finalize_ex
#define T_copy       DMSG_DFC_PREDICTPOS_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_DFC_PERFORMTYPENAME = "DMSG_DFC_PERFORM";

DDS_TypeCode* DMSG_DFC_PERFORM_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_DFC_PERFORM_g_tc_dPerformLBound_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,8,NULL,NULL);
    static DDS_TypeCode DMSG_DFC_PERFORM_g_tc_dPerformUBound_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,8,NULL,NULL);
    static DDS_TypeCode DMSG_DFC_PERFORM_g_tc_cPerformLv_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,8,NULL,NULL);
    static DDS_TypeCode DMSG_DFC_PERFORM_g_tc_nPerformEff_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,8,NULL,NULL);

    static DDS_TypeCode_Member DMSG_DFC_PERFORM_g_tc_members[4]=
    {
        {
            (char *)"dPerformLBound",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"dPerformUBound",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cPerformLv",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nPerformEff",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_DFC_PERFORM_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_DFC_PERFORM", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        4, /* Number of members */
        DMSG_DFC_PERFORM_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_DFC_PERFORM*/

    if (is_initialized) {
        return &DMSG_DFC_PERFORM_g_tc;
    }

    DMSG_DFC_PERFORM_g_tc_dPerformLBound_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_DFC_PERFORM_g_tc_dPerformUBound_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_double;
    DMSG_DFC_PERFORM_g_tc_cPerformLv_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_PERFORM_g_tc_nPerformEff_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    DMSG_DFC_PERFORM_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_PERFORM_g_tc_dPerformLBound_array;
    DMSG_DFC_PERFORM_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_PERFORM_g_tc_dPerformUBound_array;
    DMSG_DFC_PERFORM_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_PERFORM_g_tc_cPerformLv_array;
    DMSG_DFC_PERFORM_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_PERFORM_g_tc_nPerformEff_array;

    is_initialized = RTI_TRUE;

    return &DMSG_DFC_PERFORM_g_tc;
}


RTIBool DMSG_DFC_PERFORM_initialize(
    DMSG_DFC_PERFORM* sample) {
  return DMSG_DFC_PERFORM_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_DFC_PERFORM_initialize_ex(
    DMSG_DFC_PERFORM* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */

    
    if (!RTICdrType_initArray(
        sample->dPerformLBound, (8), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->dPerformUBound, (8), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->cPerformLv, (8), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->nPerformEff, (8), RTI_CDR_LONG_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_DFC_PERFORM_finalize(
    DMSG_DFC_PERFORM* sample)
{
    DMSG_DFC_PERFORM_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_DFC_PERFORM_finalize_ex(
    DMSG_DFC_PERFORM* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_DFC_PERFORM_copy(
    DMSG_DFC_PERFORM* dst,
    const DMSG_DFC_PERFORM* src)
{        

    if (!RTICdrType_copyArray(
        dst->dPerformLBound, src->dPerformLBound, (8), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->dPerformUBound, src->dPerformUBound, (8), RTI_CDR_DOUBLE_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->cPerformLv, src->cPerformLv, (8), RTI_CDR_CHAR_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->nPerformEff, src->nPerformEff, (8), RTI_CDR_LONG_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_DFC_PERFORM' sequence class.
 */
#define T DMSG_DFC_PERFORM
#define TSeq DMSG_DFC_PERFORMSeq
#define T_initialize_ex DMSG_DFC_PERFORM_initialize_ex
#define T_finalize_ex   DMSG_DFC_PERFORM_finalize_ex
#define T_copy       DMSG_DFC_PERFORM_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_DFC_EXPECTROUTETYPENAME = "DMSG_DFC_EXPECTROUTE";

DDS_TypeCode* DMSG_DFC_EXPECTROUTE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode DMSG_DFC_EXPECTROUTE_g_tc_fExpecLat_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,100,NULL,NULL);
    static DDS_TypeCode DMSG_DFC_EXPECTROUTE_g_tc_fExpecLon_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,100,NULL,NULL);
    static DDS_TypeCode DMSG_DFC_EXPECTROUTE_g_tc_fExpecDepth_array = DDS_INITIALIZE_ARRAY_TYPECODE(1,100,NULL,NULL);

    static DDS_TypeCode_Member DMSG_DFC_EXPECTROUTE_g_tc_members[5]=
    {
        {
            (char *)"nLauncherID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fExpecLat",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fExpecLon",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"fExpecDepth",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_DFC_EXPECTROUTE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_DFC_EXPECTROUTE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        5, /* Number of members */
        DMSG_DFC_EXPECTROUTE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_DFC_EXPECTROUTE*/

    if (is_initialized) {
        return &DMSG_DFC_EXPECTROUTE_g_tc;
    }

    DMSG_DFC_EXPECTROUTE_g_tc_fExpecLat_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_DFC_EXPECTROUTE_g_tc_fExpecLon_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;
    DMSG_DFC_EXPECTROUTE_g_tc_fExpecDepth_array._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_float;

    DMSG_DFC_EXPECTROUTE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_DFC_EXPECTROUTE_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_DFC_EXPECTROUTE_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_EXPECTROUTE_g_tc_fExpecLat_array;
    DMSG_DFC_EXPECTROUTE_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_EXPECTROUTE_g_tc_fExpecLon_array;
    DMSG_DFC_EXPECTROUTE_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DMSG_DFC_EXPECTROUTE_g_tc_fExpecDepth_array;

    is_initialized = RTI_TRUE;

    return &DMSG_DFC_EXPECTROUTE_g_tc;
}


RTIBool DMSG_DFC_EXPECTROUTE_initialize(
    DMSG_DFC_EXPECTROUTE* sample) {
  return DMSG_DFC_EXPECTROUTE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_DFC_EXPECTROUTE_initialize_ex(
    DMSG_DFC_EXPECTROUTE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nLauncherID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nTubeID)) {
        return RTI_FALSE;
    }                
                
    if (!RTICdrType_initArray(
        sample->fExpecLat, (100), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->fExpecLon, (100), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
                
    if (!RTICdrType_initArray(
        sample->fExpecDepth, (100), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}

void DMSG_DFC_EXPECTROUTE_finalize(
    DMSG_DFC_EXPECTROUTE* sample)
{
    DMSG_DFC_EXPECTROUTE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_DFC_EXPECTROUTE_finalize_ex(
    DMSG_DFC_EXPECTROUTE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_DFC_EXPECTROUTE_copy(
    DMSG_DFC_EXPECTROUTE* dst,
    const DMSG_DFC_EXPECTROUTE* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nLauncherID, &src->nLauncherID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nTubeID, &src->nTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->fExpecLat, src->fExpecLat, (100), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->fExpecLon, src->fExpecLon, (100), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyArray(
        dst->fExpecDepth, src->fExpecDepth, (100), RTI_CDR_FLOAT_SIZE)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_DFC_EXPECTROUTE' sequence class.
 */
#define T DMSG_DFC_EXPECTROUTE
#define TSeq DMSG_DFC_EXPECTROUTESeq
#define T_initialize_ex DMSG_DFC_EXPECTROUTE_initialize_ex
#define T_finalize_ex   DMSG_DFC_EXPECTROUTE_finalize_ex
#define T_copy       DMSG_DFC_EXPECTROUTE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_DFC_SUBDCOYFIREPLANTYPENAME = "DMSG_DFC_SUBDCOYFIREPLAN";

DDS_TypeCode* DMSG_DFC_SUBDCOYFIREPLAN_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_DFC_SUBDCOYFIREPLAN_g_tc_members[3]=
    {
        {
            (char *)"cLauncherID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cTubeID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cDecoyType",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_DFC_SUBDCOYFIREPLAN_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_DFC_SUBDCOYFIREPLAN", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_DFC_SUBDCOYFIREPLAN_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_DFC_SUBDCOYFIREPLAN*/

    if (is_initialized) {
        return &DMSG_DFC_SUBDCOYFIREPLAN_g_tc;
    }


    DMSG_DFC_SUBDCOYFIREPLAN_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_SUBDCOYFIREPLAN_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_DFC_SUBDCOYFIREPLAN_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_DFC_SUBDCOYFIREPLAN_g_tc;
}


RTIBool DMSG_DFC_SUBDCOYFIREPLAN_initialize(
    DMSG_DFC_SUBDCOYFIREPLAN* sample) {
  return DMSG_DFC_SUBDCOYFIREPLAN_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_DFC_SUBDCOYFIREPLAN_initialize_ex(
    DMSG_DFC_SUBDCOYFIREPLAN* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cLauncherID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cTubeID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cDecoyType)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_DFC_SUBDCOYFIREPLAN_finalize(
    DMSG_DFC_SUBDCOYFIREPLAN* sample)
{
    DMSG_DFC_SUBDCOYFIREPLAN_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_DFC_SUBDCOYFIREPLAN_finalize_ex(
    DMSG_DFC_SUBDCOYFIREPLAN* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_DFC_SUBDCOYFIREPLAN_copy(
    DMSG_DFC_SUBDCOYFIREPLAN* dst,
    const DMSG_DFC_SUBDCOYFIREPLAN* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cLauncherID, &src->cLauncherID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cTubeID, &src->cTubeID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cDecoyType, &src->cDecoyType)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_DFC_SUBDCOYFIREPLAN' sequence class.
 */
#define T DMSG_DFC_SUBDCOYFIREPLAN
#define TSeq DMSG_DFC_SUBDCOYFIREPLANSeq
#define T_initialize_ex DMSG_DFC_SUBDCOYFIREPLAN_initialize_ex
#define T_finalize_ex   DMSG_DFC_SUBDCOYFIREPLAN_finalize_ex
#define T_copy       DMSG_DFC_SUBDCOYFIREPLAN_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_DFC_ENGAGESTATETYPENAME = "DMSG_DFC_ENGAGESTATE";

DDS_TypeCode* DMSG_DFC_ENGAGESTATE_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_DFC_ENGAGESTATE_g_tc_members[1]=
    {
        {
            (char *)"cLaunchDecoy",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_DFC_ENGAGESTATE_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_DFC_ENGAGESTATE", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_DFC_ENGAGESTATE_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_DFC_ENGAGESTATE*/

    if (is_initialized) {
        return &DMSG_DFC_ENGAGESTATE_g_tc;
    }


    DMSG_DFC_ENGAGESTATE_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_DFC_ENGAGESTATE_g_tc;
}


RTIBool DMSG_DFC_ENGAGESTATE_initialize(
    DMSG_DFC_ENGAGESTATE* sample) {
  return DMSG_DFC_ENGAGESTATE_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_DFC_ENGAGESTATE_initialize_ex(
    DMSG_DFC_ENGAGESTATE* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cLaunchDecoy)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_DFC_ENGAGESTATE_finalize(
    DMSG_DFC_ENGAGESTATE* sample)
{
    DMSG_DFC_ENGAGESTATE_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_DFC_ENGAGESTATE_finalize_ex(
    DMSG_DFC_ENGAGESTATE* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_DFC_ENGAGESTATE_copy(
    DMSG_DFC_ENGAGESTATE* dst,
    const DMSG_DFC_ENGAGESTATE* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cLaunchDecoy, &src->cLaunchDecoy)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_DFC_ENGAGESTATE' sequence class.
 */
#define T DMSG_DFC_ENGAGESTATE
#define TSeq DMSG_DFC_ENGAGESTATESeq
#define T_initialize_ex DMSG_DFC_ENGAGESTATE_initialize_ex
#define T_finalize_ex   DMSG_DFC_ENGAGESTATE_finalize_ex
#define T_copy       DMSG_DFC_ENGAGESTATE_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SELECTEDSENSORTYPENAME = "DMSG_HMI_SELECTEDSENSOR";

DDS_TypeCode* DMSG_HMI_SELECTEDSENSOR_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SELECTEDSENSOR_g_tc_members[2]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cSensorNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SELECTEDSENSOR_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SELECTEDSENSOR", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_SELECTEDSENSOR_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SELECTEDSENSOR*/

    if (is_initialized) {
        return &DMSG_HMI_SELECTEDSENSOR_g_tc;
    }


    DMSG_HMI_SELECTEDSENSOR_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SELECTEDSENSOR_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SELECTEDSENSOR_g_tc;
}


RTIBool DMSG_HMI_SELECTEDSENSOR_initialize(
    DMSG_HMI_SELECTEDSENSOR* sample) {
  return DMSG_HMI_SELECTEDSENSOR_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SELECTEDSENSOR_initialize_ex(
    DMSG_HMI_SELECTEDSENSOR* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cSensorNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_SELECTEDSENSOR_finalize(
    DMSG_HMI_SELECTEDSENSOR* sample)
{
    DMSG_HMI_SELECTEDSENSOR_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SELECTEDSENSOR_finalize_ex(
    DMSG_HMI_SELECTEDSENSOR* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SELECTEDSENSOR_copy(
    DMSG_HMI_SELECTEDSENSOR* dst,
    const DMSG_HMI_SELECTEDSENSOR* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cSensorNum, &src->cSensorNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SELECTEDSENSOR' sequence class.
 */
#define T DMSG_HMI_SELECTEDSENSOR
#define TSeq DMSG_HMI_SELECTEDSENSORSeq
#define T_initialize_ex DMSG_HMI_SELECTEDSENSOR_initialize_ex
#define T_finalize_ex   DMSG_HMI_SELECTEDSENSOR_finalize_ex
#define T_copy       DMSG_HMI_SELECTEDSENSOR_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SELECTEDWEAPONTYPENAME = "DMSG_HMI_SELECTEDWEAPON";

DDS_TypeCode* DMSG_HMI_SELECTEDWEAPON_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SELECTEDWEAPON_g_tc_members[2]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SELECTEDWEAPON_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SELECTEDWEAPON", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_HMI_SELECTEDWEAPON_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SELECTEDWEAPON*/

    if (is_initialized) {
        return &DMSG_HMI_SELECTEDWEAPON_g_tc;
    }


    DMSG_HMI_SELECTEDWEAPON_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_HMI_SELECTEDWEAPON_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SELECTEDWEAPON_g_tc;
}


RTIBool DMSG_HMI_SELECTEDWEAPON_initialize(
    DMSG_HMI_SELECTEDWEAPON* sample) {
  return DMSG_HMI_SELECTEDWEAPON_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SELECTEDWEAPON_initialize_ex(
    DMSG_HMI_SELECTEDWEAPON* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponNum)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_SELECTEDWEAPON_finalize(
    DMSG_HMI_SELECTEDWEAPON* sample)
{
    DMSG_HMI_SELECTEDWEAPON_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SELECTEDWEAPON_finalize_ex(
    DMSG_HMI_SELECTEDWEAPON* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SELECTEDWEAPON_copy(
    DMSG_HMI_SELECTEDWEAPON* dst,
    const DMSG_HMI_SELECTEDWEAPON* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponNum, &src->cWeaponNum)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SELECTEDWEAPON' sequence class.
 */
#define T DMSG_HMI_SELECTEDWEAPON
#define TSeq DMSG_HMI_SELECTEDWEAPONSeq
#define T_initialize_ex DMSG_HMI_SELECTEDWEAPON_initialize_ex
#define T_finalize_ex   DMSG_HMI_SELECTEDWEAPON_finalize_ex
#define T_copy       DMSG_HMI_SELECTEDWEAPON_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_PA_SENSORRANGERESULTTYPENAME = "DMSG_PA_SENSORRANGERESULT";

DDS_TypeCode* DMSG_PA_SENSORRANGERESULT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_PA_SENSORRANGERESULT_g_tc_members[3]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cSensorNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nResult",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_PA_SENSORRANGERESULT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_PA_SENSORRANGERESULT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_PA_SENSORRANGERESULT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_PA_SENSORRANGERESULT*/

    if (is_initialized) {
        return &DMSG_PA_SENSORRANGERESULT_g_tc;
    }


    DMSG_PA_SENSORRANGERESULT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_PA_SENSORRANGERESULT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_PA_SENSORRANGERESULT_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_PA_SENSORRANGERESULT_g_tc;
}


RTIBool DMSG_PA_SENSORRANGERESULT_initialize(
    DMSG_PA_SENSORRANGERESULT* sample) {
  return DMSG_PA_SENSORRANGERESULT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_PA_SENSORRANGERESULT_initialize_ex(
    DMSG_PA_SENSORRANGERESULT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cSensorNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nResult)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_PA_SENSORRANGERESULT_finalize(
    DMSG_PA_SENSORRANGERESULT* sample)
{
    DMSG_PA_SENSORRANGERESULT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_PA_SENSORRANGERESULT_finalize_ex(
    DMSG_PA_SENSORRANGERESULT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_PA_SENSORRANGERESULT_copy(
    DMSG_PA_SENSORRANGERESULT* dst,
    const DMSG_PA_SENSORRANGERESULT* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cSensorNum, &src->cSensorNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nResult, &src->nResult)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_PA_SENSORRANGERESULT' sequence class.
 */
#define T DMSG_PA_SENSORRANGERESULT
#define TSeq DMSG_PA_SENSORRANGERESULTSeq
#define T_initialize_ex DMSG_PA_SENSORRANGERESULT_initialize_ex
#define T_finalize_ex   DMSG_PA_SENSORRANGERESULT_finalize_ex
#define T_copy       DMSG_PA_SENSORRANGERESULT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_PA_WEAPONRANGERESULTTYPENAME = "DMSG_PA_WEAPONRANGERESULT";

DDS_TypeCode* DMSG_PA_WEAPONRANGERESULT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_PA_WEAPONRANGERESULT_g_tc_members[3]=
    {
        {
            (char *)"cConsoleID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cWeaponNum",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nResult",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_PA_WEAPONRANGERESULT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_PA_WEAPONRANGERESULT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_PA_WEAPONRANGERESULT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_PA_WEAPONRANGERESULT*/

    if (is_initialized) {
        return &DMSG_PA_WEAPONRANGERESULT_g_tc;
    }


    DMSG_PA_WEAPONRANGERESULT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_PA_WEAPONRANGERESULT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;
    DMSG_PA_WEAPONRANGERESULT_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;

    is_initialized = RTI_TRUE;

    return &DMSG_PA_WEAPONRANGERESULT_g_tc;
}


RTIBool DMSG_PA_WEAPONRANGERESULT_initialize(
    DMSG_PA_WEAPONRANGERESULT* sample) {
  return DMSG_PA_WEAPONRANGERESULT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_PA_WEAPONRANGERESULT_initialize_ex(
    DMSG_PA_WEAPONRANGERESULT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initChar(&sample->cConsoleID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cWeaponNum)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nResult)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_PA_WEAPONRANGERESULT_finalize(
    DMSG_PA_WEAPONRANGERESULT* sample)
{
    DMSG_PA_WEAPONRANGERESULT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_PA_WEAPONRANGERESULT_finalize_ex(
    DMSG_PA_WEAPONRANGERESULT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_PA_WEAPONRANGERESULT_copy(
    DMSG_PA_WEAPONRANGERESULT* dst,
    const DMSG_PA_WEAPONRANGERESULT* src)
{        

    if (!RTICdrType_copyChar(
        &dst->cConsoleID, &src->cConsoleID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cWeaponNum, &src->cWeaponNum)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nResult, &src->nResult)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_PA_WEAPONRANGERESULT' sequence class.
 */
#define T DMSG_PA_WEAPONRANGERESULT
#define TSeq DMSG_PA_WEAPONRANGERESULTSeq
#define T_initialize_ex DMSG_PA_WEAPONRANGERESULT_initialize_ex
#define T_finalize_ex   DMSG_PA_WEAPONRANGERESULT_finalize_ex
#define T_copy       DMSG_PA_WEAPONRANGERESULT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_SMS_CONNECTTYPENAME = "DMSG_SMS_CONNECT";

DDS_TypeCode* DMSG_SMS_CONNECT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_SMS_CONNECT_g_tc_members[2]=
    {
        {
            (char *)"nID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cIsConnect",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_SMS_CONNECT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_SMS_CONNECT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_SMS_CONNECT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_SMS_CONNECT*/

    if (is_initialized) {
        return &DMSG_SMS_CONNECT_g_tc;
    }


    DMSG_SMS_CONNECT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_SMS_CONNECT_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_SMS_CONNECT_g_tc;
}


RTIBool DMSG_SMS_CONNECT_initialize(
    DMSG_SMS_CONNECT* sample) {
  return DMSG_SMS_CONNECT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_SMS_CONNECT_initialize_ex(
    DMSG_SMS_CONNECT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cIsConnect)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_SMS_CONNECT_finalize(
    DMSG_SMS_CONNECT* sample)
{
    DMSG_SMS_CONNECT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_SMS_CONNECT_finalize_ex(
    DMSG_SMS_CONNECT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_SMS_CONNECT_copy(
    DMSG_SMS_CONNECT* dst,
    const DMSG_SMS_CONNECT* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nID, &src->nID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cIsConnect, &src->cIsConnect)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_SMS_CONNECT' sequence class.
 */
#define T DMSG_SMS_CONNECT
#define TSeq DMSG_SMS_CONNECTSeq
#define T_initialize_ex DMSG_SMS_CONNECT_initialize_ex
#define T_finalize_ex   DMSG_SMS_CONNECT_finalize_ex
#define T_copy       DMSG_SMS_CONNECT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_MMI_CONNECTREPLYTYPENAME = "DMSG_MMI_CONNECTREPLY";

DDS_TypeCode* DMSG_MMI_CONNECTREPLY_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_MMI_CONNECTREPLY_g_tc_members[2]=
    {
        {
            (char *)"nID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"cConnectReply",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_MMI_CONNECTREPLY_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_MMI_CONNECTREPLY", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        2, /* Number of members */
        DMSG_MMI_CONNECTREPLY_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_MMI_CONNECTREPLY*/

    if (is_initialized) {
        return &DMSG_MMI_CONNECTREPLY_g_tc;
    }


    DMSG_MMI_CONNECTREPLY_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_MMI_CONNECTREPLY_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_char;

    is_initialized = RTI_TRUE;

    return &DMSG_MMI_CONNECTREPLY_g_tc;
}


RTIBool DMSG_MMI_CONNECTREPLY_initialize(
    DMSG_MMI_CONNECTREPLY* sample) {
  return DMSG_MMI_CONNECTREPLY_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_MMI_CONNECTREPLY_initialize_ex(
    DMSG_MMI_CONNECTREPLY* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initChar(&sample->cConnectReply)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_MMI_CONNECTREPLY_finalize(
    DMSG_MMI_CONNECTREPLY* sample)
{
    DMSG_MMI_CONNECTREPLY_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_MMI_CONNECTREPLY_finalize_ex(
    DMSG_MMI_CONNECTREPLY* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_MMI_CONNECTREPLY_copy(
    DMSG_MMI_CONNECTREPLY* dst,
    const DMSG_MMI_CONNECTREPLY* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nID, &src->nID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyChar(
        &dst->cConnectReply, &src->cConnectReply)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_MMI_CONNECTREPLY' sequence class.
 */
#define T DMSG_MMI_CONNECTREPLY
#define TSeq DMSG_MMI_CONNECTREPLYSeq
#define T_initialize_ex DMSG_MMI_CONNECTREPLY_initialize_ex
#define T_finalize_ex   DMSG_MMI_CONNECTREPLY_finalize_ex
#define T_copy       DMSG_MMI_CONNECTREPLY_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_SMS_INITTYPENAME = "DMSG_SMS_INIT";

DDS_TypeCode* DMSG_SMS_INIT_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_SMS_INIT_g_tc_members[1]=
    {
        {
            (char *)"bInit",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_SMS_INIT_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_SMS_INIT", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_SMS_INIT_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_SMS_INIT*/

    if (is_initialized) {
        return &DMSG_SMS_INIT_g_tc;
    }


    DMSG_SMS_INIT_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;

    is_initialized = RTI_TRUE;

    return &DMSG_SMS_INIT_g_tc;
}


RTIBool DMSG_SMS_INIT_initialize(
    DMSG_SMS_INIT* sample) {
  return DMSG_SMS_INIT_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_SMS_INIT_initialize_ex(
    DMSG_SMS_INIT* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initBoolean(&sample->bInit)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_SMS_INIT_finalize(
    DMSG_SMS_INIT* sample)
{
    DMSG_SMS_INIT_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_SMS_INIT_finalize_ex(
    DMSG_SMS_INIT* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_SMS_INIT_copy(
    DMSG_SMS_INIT* dst,
    const DMSG_SMS_INIT* src)
{        

    if (!RTICdrType_copyBoolean(
        &dst->bInit, &src->bInit)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_SMS_INIT' sequence class.
 */
#define T DMSG_SMS_INIT
#define TSeq DMSG_SMS_INITSeq
#define T_initialize_ex DMSG_SMS_INIT_initialize_ex
#define T_finalize_ex   DMSG_SMS_INIT_finalize_ex
#define T_copy       DMSG_SMS_INIT_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_SMS_DDSTESTTYPENAME = "DMSG_SMS_DDSTEST";

DDS_TypeCode* DMSG_SMS_DDSTEST_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_SMS_DDSTEST_g_tc_members[3]=
    {
        {
            (char *)"nRecvID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"nSendID",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        },
        {
            (char *)"bcheck",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_SMS_DDSTEST_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_SMS_DDSTEST", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        3, /* Number of members */
        DMSG_SMS_DDSTEST_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_SMS_DDSTEST*/

    if (is_initialized) {
        return &DMSG_SMS_DDSTEST_g_tc;
    }


    DMSG_SMS_DDSTEST_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_SMS_DDSTEST_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_long;
    DMSG_SMS_DDSTEST_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_boolean;

    is_initialized = RTI_TRUE;

    return &DMSG_SMS_DDSTEST_g_tc;
}


RTIBool DMSG_SMS_DDSTEST_initialize(
    DMSG_SMS_DDSTEST* sample) {
  return DMSG_SMS_DDSTEST_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_SMS_DDSTEST_initialize_ex(
    DMSG_SMS_DDSTEST* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initLong(&sample->nRecvID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initLong(&sample->nSendID)) {
        return RTI_FALSE;
    }                
            
    if (!RTICdrType_initBoolean(&sample->bcheck)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_SMS_DDSTEST_finalize(
    DMSG_SMS_DDSTEST* sample)
{
    DMSG_SMS_DDSTEST_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_SMS_DDSTEST_finalize_ex(
    DMSG_SMS_DDSTEST* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_SMS_DDSTEST_copy(
    DMSG_SMS_DDSTEST* dst,
    const DMSG_SMS_DDSTEST* src)
{        

    if (!RTICdrType_copyLong(
        &dst->nRecvID, &src->nRecvID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyLong(
        &dst->nSendID, &src->nSendID)) {
        return RTI_FALSE;
    }
            
    if (!RTICdrType_copyBoolean(
        &dst->bcheck, &src->bcheck)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_SMS_DDSTEST' sequence class.
 */
#define T DMSG_SMS_DDSTEST
#define TSeq DMSG_SMS_DDSTESTSeq
#define T_initialize_ex DMSG_SMS_DDSTEST_initialize_ex
#define T_finalize_ex   DMSG_SMS_DDSTEST_finalize_ex
#define T_copy       DMSG_SMS_DDSTEST_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

/* ========================================================================= */
const char *DMSG_HMI_SAVECYCLESETTYPENAME = "DMSG_HMI_SAVECYCLESET";

DDS_TypeCode* DMSG_HMI_SAVECYCLESET_get_typecode()
{
    static RTIBool is_initialized = RTI_FALSE;


    static DDS_TypeCode_Member DMSG_HMI_SAVECYCLESET_g_tc_members[1]=
    {
        {
            (char *)"nSec",/* Member name */
            {
                0,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            DDS_BOOLEAN_FALSE, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Ignored */
            0,/* Ignored */
            NULL/* Ignored */
        }
    };

    static DDS_TypeCode DMSG_HMI_SAVECYCLESET_g_tc =
    {{
        DDS_TK_STRUCT,/* Kind */
        DDS_BOOLEAN_FALSE, /* Ignored */
        -1,/* Ignored */
        (char *)"DMSG_HMI_SAVECYCLESET", /* Name */
        NULL, /* Ignored */
        0, /* Ignored */
        0, /* Ignored */
        NULL, /* Ignored */
        1, /* Number of members */
        DMSG_HMI_SAVECYCLESET_g_tc_members, /* Members */
        DDS_VM_NONE /* Ignored */
    }}; /* Type code for DMSG_HMI_SAVECYCLESET*/

    if (is_initialized) {
        return &DMSG_HMI_SAVECYCLESET_g_tc;
    }


    DMSG_HMI_SAVECYCLESET_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;

    is_initialized = RTI_TRUE;

    return &DMSG_HMI_SAVECYCLESET_g_tc;
}


RTIBool DMSG_HMI_SAVECYCLESET_initialize(
    DMSG_HMI_SAVECYCLESET* sample) {
  return DMSG_HMI_SAVECYCLESET_initialize_ex(sample,RTI_TRUE);
}
        
RTIBool DMSG_HMI_SAVECYCLESET_initialize_ex(
    DMSG_HMI_SAVECYCLESET* sample,RTIBool allocatePointers)
{
        
    
    if (allocatePointers) {} /* To avoid warnings */


    if (!RTICdrType_initUnsignedLong(&sample->nSec)) {
        return RTI_FALSE;
    }                
            

    return RTI_TRUE;
}

void DMSG_HMI_SAVECYCLESET_finalize(
    DMSG_HMI_SAVECYCLESET* sample)
{
    DMSG_HMI_SAVECYCLESET_finalize_ex(sample,RTI_TRUE);
}
        
void DMSG_HMI_SAVECYCLESET_finalize_ex(
    DMSG_HMI_SAVECYCLESET* sample,RTIBool deletePointers)
{        
    if (sample) { } /* To avoid warnings */
    if (deletePointers) {} /* To avoid warnings */


}

RTIBool DMSG_HMI_SAVECYCLESET_copy(
    DMSG_HMI_SAVECYCLESET* dst,
    const DMSG_HMI_SAVECYCLESET* src)
{        

    if (!RTICdrType_copyUnsignedLong(
        &dst->nSec, &src->nSec)) {
        return RTI_FALSE;
    }
            

    return RTI_TRUE;
}


/**
 * <<IMPLEMENTATION>>
 *
 * Defines:  TSeq, T
 *
 * Configure and implement 'DMSG_HMI_SAVECYCLESET' sequence class.
 */
#define T DMSG_HMI_SAVECYCLESET
#define TSeq DMSG_HMI_SAVECYCLESETSeq
#define T_initialize_ex DMSG_HMI_SAVECYCLESET_initialize_ex
#define T_finalize_ex   DMSG_HMI_SAVECYCLESET_finalize_ex
#define T_copy       DMSG_HMI_SAVECYCLESET_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#endif
#else
#include "dds_c_sequence_TSeq.gen"
#ifdef __cplusplus
#include "dds_cpp_sequence_TSeq.gen"
#endif
#endif

#undef T_copy
#undef T_finalize_ex
#undef T_initialize_ex
#undef TSeq
#undef T

