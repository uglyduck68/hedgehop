/*
-----------------------------------------------------------------------------
Filename:    VisualX.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/
#include "StdAfx.h"
#include "VisualX.h"

//-------------------------------------------------------------------------------------
VisualX::VisualX(void) :
	m_pOcean(NULL), m_pSky(NULL)
{
}
//-------------------------------------------------------------------------------------
VisualX::~VisualX(void)
{
	DEL(m_pOcean);
	DEL(m_pSky);
}

//-------------------------------------------------------------------------------------
void VisualX::createScene(void)
{
    Ogre::Entity* ogreHead = mSceneMgr->createEntity("Head", "ogrehead.mesh");

    Ogre::SceneNode* headNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
    headNode->attachObject(ogreHead);

    // Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");

    l->setPosition(20,80,50);

	/**
	* create entities for battlefield
	*/
	m_pOcean	= new Ocean(mSceneMgr);

	if( m_pOcean )
		m_pOcean->createScene();

	/************ NOTE *********
	* change followings
	*/
	mRenderingCamera	= mCamera;

	m_pSky		= new Sky(mSceneMgr);

	if( m_pSky )
		m_pSky->createScene();

	// Register SkyX listeners
	mRoot->addFrameListener(mSkyX);
	mWindow->addListener(mSkyX);




	setPreset(mPresets[mCurrentPreset]);

}

void VisualX::setupResources(void)
{
	// load base class's resources
	BaseApplication::setupResources();

	/** add my own resource location */
	Ogre::ResourceGroupManager::getSingleton().addResourceLocation("./resource",
		"FileSystem");

	// following call cause assertion fails.
	// BaseApplication::loadResources() function has following call.
//	Ogre::ResourceGroupManager::getSingleton().initialiseAllResourceGroups();
}

void VisualX::createFrameListener(void)
{
	// Add frame listener
//	mRoot->addFrameListener(new SkyXDemoFrameListener(mWindow, mCamera, mSceneMgr));
}

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        VisualX app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
